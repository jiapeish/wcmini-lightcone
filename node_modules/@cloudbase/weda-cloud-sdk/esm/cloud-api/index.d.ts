/**
 * 新的cloud-sdk, app.cloud 挂载的为本模块返回的 CLOUD_SDK 对象
 */
import { setDefaultParams, getDataSourceViewId } from '../common';
import { setCloudConfig } from './config';
import { callDataSource, callFunction, getCloudInstance, callGraphql } from './basic-api';
import { callWorkflow, callWedaApi, checkAuth, callCommonService, getDataSourceProfile, getDataSourceProfileAsync } from './business-api';
import { getTempFileURL } from './temp-url-api';
export { normalizeMessage } from './error-normalize';
export * from './basic-api';
export { callCommonService } from './business-api';
export declare const DS_SDK: {};
/**
 * CLOUD_SDK, 返回的对象应当附加至 app.cloud 对象上
 *
 * CLOUD_SDK 会处理数据源方法返回的业务结果, resolve 的为业务的 data, 业务返回异常则reject
 * 使用 getter 包裹 dataSources, callDataSource 来控制设置 parseBusinessInfo
 *  以控制数据源方法处理响应的方式,
 */
export declare const CLOUD_API: {
    dataSources: {};
    /** 调用数据源 */
    callDataSource: typeof callDataSource;
    /** 调用连接器 */
    callConnector: typeof callDataSource;
    /** 调用模型 */
    callModel: typeof callDataSource;
    /** 是否在 IDE 编辑器中*/
    IS_WEDA_IDE: boolean;
    version: string | undefined;
    utils: {
        wrapperDatasourceMethod(options: import("./utils-api").IWrapperDatasourceOptions): (params: any) => Promise<any>;
    };
    getCloudInstance: typeof getCloudInstance;
    callGraphql: typeof callGraphql;
    callFunction: typeof callFunction;
    callWorkflow: typeof callWorkflow;
    callWedaApi: typeof callWedaApi;
    callCommonService: typeof callCommonService;
    getTempFileURL: typeof getTempFileURL;
    getDataSourceViewId: typeof getDataSourceViewId;
    getDataSourceProfile: typeof getDataSourceProfile;
    getDataSourceProfileAsync: typeof getDataSourceProfileAsync;
    setConfig: typeof setCloudConfig;
    checkAuth: typeof checkAuth;
    /** 设置数据源的默认请求参数 */
    setDataSourceDefaultParams: typeof setDefaultParams;
};
