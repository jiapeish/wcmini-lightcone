import { getConfig, TCBError, getDefaultParams, getCommonCloudFnName, isObject, deepClone, } from '../common';
import { VERSION, cloudConfig, getReferrer } from './config';
import { normalizeMessage } from './error-normalize';
import swr, { judgeToClearCache } from './swr';
import { isMatch } from '../storage';
// v1版本涉及筛选的方法
const V1_FILTER_METHOD = ['wedaGetRecords', 'wedaGetItem'];
// v2版本涉及筛选的方法
const V2_FILTER_METHOD = [
    'wedaCreateV2',
    'wedaBatchCreateV2',
    'wedaUpdateV2',
    'wedaBatchUpdateV2',
    'wedaDeleteV2',
    'wedaBatchDeleteV2',
    'wedaGetItemV2',
    'wedaGetRecordsV2',
];
const MODE_API_MAP = {
    wedaCreateV2: 'create',
    wedaBatchCreateV2: 'createMany',
    wedaUpdateV2: 'update',
    wedaBatchUpdateV2: 'updateMany',
    wedaDeleteV2: 'delete',
    wedaBatchDeleteV2: 'deleteMany',
    wedaGetItemV2: 'get',
    wedaGetRecordsV2: 'list',
};
/**
 * 获取swr的信息
 * @param swrOptions
 * @param methodName
 * @returns
 */
const getSwrInfo = (swrOptions) => {
    if (swrOptions && Object.keys(swrOptions).length) {
        return Object.assign({ swrMode: true }, swrOptions);
    }
    return undefined;
};
/**
 * 获取使用云开发环境信息初始化之后 的云开发Cloud对象
 *  在微信中为 wx.cloud 初始化后的对象
 *  在h5中则为 js-sdk 的 tcb.init 后返回的对象
 */
export async function getCloudInstance() {
    const initTcb = getConfig('initTcb');
    const { app } = await initTcb();
    return app;
}
/**
 * 发起数据源请求
 */
export async function callDataSource(originalParams) {
    var _a, _b;
    const parseBusinessInfo = typeof originalParams.parseBusinessInfo === 'boolean' ? originalParams.parseBusinessInfo : true;
    const params = Object.assign({}, originalParams);
    // 对外推荐使用 name, 内部依旧使用 dataSourceName
    const dataSourceName = params.name || params.dataSourceName;
    const { methodName } = params;
    const options = { params: params.params, methodName };
    // 默认对 SWR_METHOD_DEFAULT 中的方法都开启swr
    const swr = getSwrInfo((_a = params.params) === null || _a === void 0 ? void 0 : _a.swr);
    // @ts-ignore
    delete params.name;
    delete params.parseBusinessInfo;
    ((_b = params.params) === null || _b === void 0 ? void 0 : _b.swr) && delete params.params.swr;
    const requestData = Object.assign(params.extraParams || {}, {
        dataSourceName,
        methodName,
        defaultParams: getDefaultParams(dataSourceName, options),
        params: params.params,
    });
    try {
        // 若有自定义的调用数据源实现, 则使用自定义的实现
        const customCallDataSource = getConfig('customCallDataSource');
        if (customCallDataSource) {
            const customResp = await customCallDataSource(Object.assign({}, requestData, { parseBusinessInfo }));
            return customResp;
        }
        const beforeRequest = getConfig('beforeDSRequest');
        if (beforeRequest)
            beforeRequest(params);
        const resp = await callFunction({
            // 使用数据源名称
            name: getCommonCloudFnName(true),
            data: requestData,
        }, {
            unwrapResult: true,
            parseBusinessInfo,
            swr,
        });
        const afterRequest = getConfig('afterDSRequest');
        if (afterRequest)
            afterRequest(params, null, resp);
        return resp;
    }
    catch (error) {
        console.warn(`[weda-cloud-sdk] failed to invoke datasource ${dataSourceName}'s method ${methodName}`, error);
        if (parseBusinessInfo) {
            const formattedError = normalizeMessage(error, {
                FUNCTION_NOT_FOUND: `找不到数据源${dataSourceName}的云函数`,
                DS_METHOD_NOT_FOUND: `数据源${dataSourceName}中的方法${methodName}不存在或者未启用`,
                FUNCTIONS_EXECUTE_FAIL: `调用数据源${dataSourceName}方法${methodName}失败: 请检查该数据源所有自定义方法的代码中是否存在语法错误`,
                DEFAULT_ERROR: `调用数据源${dataSourceName}方法${methodName}失败: ${error.errMsg || error.message}`,
            });
            const afterRequest = getConfig('afterDSRequest');
            if (afterRequest)
                afterRequest(params, formattedError);
            throw formattedError;
        }
        return {
            code: error.errCode || -2,
            message: `调用数据源${dataSourceName}方法${methodName}失败: ${error.errMsg || error.message}`,
        };
    }
}
/**
 * 调用数据源 graphql
 */
export async function callGraphql(params) {
    try {
        const beforeRequest = getConfig('beforeDSRequest');
        // @ts-ignore
        if (beforeRequest)
            beforeRequest(params);
        const res = await callFunction({
            name: getCommonCloudFnName(true),
            data: {
                mode: 'graphql',
                params,
            },
        }, { unwrapResult: true });
        const afterRequest = getConfig('afterDSRequest');
        // @ts-ignore
        if (afterRequest)
            afterRequest(params, null, res);
        return res;
    }
    catch (error) {
        const afterRequest = getConfig('afterDSRequest');
        // @ts-ignore
        if (afterRequest)
            afterRequest(params, error);
        throw error;
    }
}
/**
 * 创建数据源API的 proxy 对象, 可通过 .[dsName].[methodName](params) 调用数据源方法
 * @param parseBusinessInfo 是否解析业务信息
 */
export function createDsApiProxy(parseBusinessInfo, customHandler) {
    return new Proxy({}, {
        get(t1, dsName) {
            if (customHandler) {
                const handler = customHandler(dsName);
                if (handler)
                    return handler;
            }
            return new Proxy({}, {
                get(t2, methodName) {
                    return (params, extraParams) => callDataSource({
                        name: dsName,
                        methodName,
                        extraParams,
                        params,
                        parseBusinessInfo,
                    });
                },
            });
        },
    });
}
async function getCallFunctionRes(params, extraOptions) {
    var _a, _b, _c, _d, _e, _f;
    const initTcb = getConfig('initTcb');
    const { methodName, dataSourceName } = params.data || {};
    // 优先使用参数中传递的 app 对象
    let app = extraOptions === null || extraOptions === void 0 ? void 0 : extraOptions.app;
    if (!app) {
        const resp = await initTcb();
        app = resp.app;
    }
    if (!isMatch()) {
        if (MODE_API_MAP[methodName || ''] && (app === null || app === void 0 ? void 0 : app.models)) {
            const method = MODE_API_MAP[methodName];
            const func = (_a = app.models[dataSourceName]) === null || _a === void 0 ? void 0 : _a[method];
            const params2Model = Object.assign(Object.assign({}, (_b = params.data) === null || _b === void 0 ? void 0 : _b.params), { envType: (_c = params.data) === null || _c === void 0 ? void 0 : _c.envType, 'x-cloud-sdk-version': (_d = params.data) === null || _d === void 0 ? void 0 : _d['x-cloud-sdk-version'] });
            let res = {};
            try {
                res = ((_e = extraOptions === null || extraOptions === void 0 ? void 0 : extraOptions.swr) === null || _e === void 0 ? void 0 : _e.swrMode)
                    ? await swr(params2Model, func.bind(app), extraOptions === null || extraOptions === void 0 ? void 0 : extraOptions.swr)
                    : await func(params2Model);
            }
            catch (error) {
                throw error;
            }
            if (extraOptions === null || extraOptions === void 0 ? void 0 : extraOptions.unwrapResult) {
                res = Object.assign(Object.assign({}, res), { result: res });
            }
            return res;
        }
    }
    return ((_f = extraOptions === null || extraOptions === void 0 ? void 0 : extraOptions.swr) === null || _f === void 0 ? void 0 : _f.swrMode)
        ? await swr(params, app.callFunction.bind(app), extraOptions === null || extraOptions === void 0 ? void 0 : extraOptions.swr)
        : await app.callFunction(params);
}
/**
 * 调用云开发云函数
 */
export async function callFunction(params, extraOptions) {
    var _a;
    let newParams = deepClone(params);
    // 在调用参数中注入当前环境类型, 方便服务器端调用时处理
    const isProd = getConfig('isProd');
    // 增加环境类型信息
    const extraParams = {
        /** 微搭应用ID */
        wedaAppId: getConfig('appID'),
        userAgent: cloudConfig.userAgent,
        referrer: getReferrer(),
        envType: isProd ? 'prod' : 'pre',
        wedaTarget: getConfig('wedaTarget'),
        /** cloud-sdk 版本号, 方便调试使用 */
        'x-cloud-sdk-version': VERSION,
    };
    // eslint-disable-next-line no-param-reassign
    newParams.data = Object.assign({}, newParams.data, extraParams);
    const beforeCallFunction = getConfig('beforeCallFunction');
    if (beforeCallFunction) {
        // @ts-ignore
        newParams = await beforeCallFunction(newParams);
    }
    let resp;
    const afterCallFunction = getConfig('afterCallFunction');
    try {
        newParams = getWhereData(newParams);
        judgeToClearCache(newParams);
        resp = await getCallFunctionRes(newParams, extraOptions);
        if (afterCallFunction) {
            afterCallFunction(newParams, null, JSON.parse(JSON.stringify(resp)));
        }
        if (((_a = extraOptions === null || extraOptions === void 0 ? void 0 : extraOptions.swr) === null || _a === void 0 ? void 0 : _a.swrMode) && (resp === null || resp === void 0 ? void 0 : resp.error)) {
            throw resp;
        }
    }
    catch (error) {
        if (afterCallFunction) {
            afterCallFunction(newParams, error);
        }
        throw error;
    }
    if (extraOptions === null || extraOptions === void 0 ? void 0 : extraOptions.unwrapResult) {
        const { result } = resp;
        if (!extraOptions.parseBusinessInfo)
            return result;
        if (result && !result.code)
            return result.data;
        // 将所有错误信息打印出来, 避免小白用户不懂看错误信息
        console.warn('[weda-cloud-sdk]failed to invoke backend, %c调用后端接口失败, 请仔细查看下述错误信息:', 'color: red;');
        console.warn(`\tcode: ${result === null || result === void 0 ? void 0 : result.code}\n\tmessage: ${result === null || result === void 0 ? void 0 : result.message}\n\treason: ${result === null || result === void 0 ? void 0 : result.reason}\n\trequestId: ${resp.requestId}\n\toriginal response: `, resp);
        throw new TCBError(result === null || result === void 0 ? void 0 : result.code, result === null || result === void 0 ? void 0 : result.message, resp);
    }
    return resp;
}
const getWhereData = (params) => {
    try {
        const { methodName, params: dataParams = {} } = (params === null || params === void 0 ? void 0 : params.data) || {};
        // v1版本筛选协议处理
        if (dataParams.hasOwnProperty('where') && V1_FILTER_METHOD.includes(methodName || '')) {
            dataParams.where = filterWhereList(dataParams.where);
        }
        // v2版本筛选协议处理
        if (dataParams.hasOwnProperty('filter') && V2_FILTER_METHOD.includes(methodName || '')) {
            dataParams.filter = filterWhereList(dataParams.filter);
        }
    }
    catch (error) {
        //
    }
    return params;
};
/**
 * 兼容v1、v2版本的筛选协议，过滤{}、undefined
 * https://iwiki.woa.com/pages/viewpage.action?pageId=4007752082
 * @param value
 * @returns
 */
const filterWhereList = (value) => {
    let res = undefined;
    if (Array.isArray(value)) {
        // 允许传递空数组
        res = res || [];
        value.forEach((v) => {
            const temp = filterWhereList(v);
            if (temp !== undefined) {
                res.push(temp);
            }
        });
        return res;
    }
    if (isObject(value)) {
        Object.keys(value).forEach((key) => {
            const temp = filterWhereList(value[key]);
            if (temp !== undefined) {
                res = res || {};
                res[key] = temp;
            }
        });
        return res;
    }
    // 普通量返回值本身
    return value;
};
