import { observable } from 'mobx';
import { getTcbInstance, getLoginState, getCustomWedaConfig } from './tcb';
import { callCommonService } from '../cloud-api';
// 缓存用户登录信息
const observedInfo = observable({ currentUser: null });
/**
 * 解析weda的accessToken
 * @param wedaAccessToken
 * @returns
 */
const parseWedaAccessToken = (wedaAccessToken) => {
    var _a, _b;
    try {
        const payload = atob((_b = (_a = wedaAccessToken.split('.')) === null || _a === void 0 ? void 0 : _a[1]) === null || _b === void 0 ? void 0 : _b.replace(/-/g, '+').replace(/_/g, '/'));
        return JSON.parse(payload) || {};
    }
    catch (error) {
        return {};
    }
};
/**
 * 该函数用于处理 signIn 和 getUserInfo 的缓存
 * 用户访问页面相关信息采用swr机制，进入页面优先使用缓存数据，后更新缓存，对于同一envId、clientId、userType、phone采用覆盖更新
 * @param param0
 * @returns
 */
const dealCache = async ({ key, value = '', type = 'get', }) => {
    var _a;
    if (!localStorage || !key)
        return undefined;
    try {
        const { app, auth } = await getTcbInstance();
        const { clientId = '', env = '' } = app.config;
        const { accessToken = '' } = (await auth.getAccessToken()) || {};
        const { user_id = '', sub = '', scope = '' } = parseWedaAccessToken(accessToken);
        // 缓存值为对象，用于区分不同的平台和环境的用户信息，{ [cacheKey]: { [userKey]: value } }
        const cacheKey = `${env}-${clientId}`;
        const userKey = `${scope}_${user_id || sub}`;
        const cache = JSON.parse(localStorage.getItem(key) || '{}');
        // 清空时直接清空
        if (type === 'remove') {
            delete cache[cacheKey];
            localStorage.setItem(key, JSON.stringify(cache));
            return;
        }
        // 如果缓存key不带有任何用户特征，则不处理
        if (userKey === '-') {
            return;
        }
        if (type === 'get') {
            return (_a = cache[cacheKey]) === null || _a === void 0 ? void 0 : _a[userKey];
        }
        if (type === 'set') {
            localStorage.setItem(key, JSON.stringify(Object.assign(Object.assign({}, cache), { [cacheKey]: { [userKey]: value } })));
            return;
        }
    }
    catch (error) {
        return undefined;
    }
};
/**
 * 清空已有缓存
 * @param param0
 * @returns
 */
const clearCache = () => {
    if (!localStorage)
        return;
    dealCache({
        key: 'SIGNIN_INFO',
        type: 'remove',
    });
    dealCache({
        key: 'USER_INFO',
        type: 'remove',
    });
};
/**
 * 获取并更新当前用户信息
 * @param param0
 */
const updateCurrentUser = async ({ app, params, methodName, }) => {
    var _a, _b;
    if (!methodName)
        return;
    observedInfo.currentUser = await callCommonService({
        methodName,
        params: params || {},
    }, app);
    // web端如果能查到注册时用户的小程序openid则返回
    if ((_a = observedInfo.currentUser) === null || _a === void 0 ? void 0 : _a.userExtend) {
        try {
            observedInfo.currentUser.wxOpenId =
                observedInfo.currentUser.wxOpenId || ((_b = JSON.parse(observedInfo.currentUser.userExtend)) === null || _b === void 0 ? void 0 : _b.open_id) || '';
        }
        catch (err) {
            //
        }
    }
    observedInfo.currentUser = Object.assign(Object.assign({}, params), observedInfo.currentUser);
    dealCache({
        key: { signIn: 'SIGNIN_INFO', getUserInfo: 'USER_INFO' }[methodName],
        value: observedInfo.currentUser,
        type: 'set',
    });
};
/** 注册用户 */
async function signIn(params) {
    const { app } = await getTcbInstance();
    const currentUser = await dealCache({
        key: 'SIGNIN_INFO',
        type: 'get',
    });
    if (currentUser) {
        observedInfo.currentUser = currentUser;
        // 延迟更新缓存
        setTimeout(() => {
            updateCurrentUser({ app, params, methodName: 'signIn' });
        }, 0);
    }
    else {
        await updateCurrentUser({ app, params, methodName: 'signIn' });
    }
    return observedInfo.currentUser;
}
/** 退出登录 */
async function signOut() {
    const loginState = await getLoginState();
    const { auth } = await getTcbInstance();
    observedInfo.currentUser = null;
    if (loginState.hasLogin) {
        auth.signOut();
        clearCache();
    }
    // 非匿名情况, 重新匿名登录
    if (!loginState.isAnonymous) {
        await anonymousLogin();
        await signIn({ userType: 'anonymousUser' });
    }
}
/** 获取用户信息, 若用户未注册, 则返回 null */
async function getUserInfo(force = false) {
    if (force || !observedInfo.currentUser) {
        const { app } = await getTcbInstance();
        const currentUser = await dealCache({ key: 'USER_INFO', type: 'get' });
        if (currentUser) {
            observedInfo.currentUser = Object.assign(Object.assign({}, observedInfo.currentUser), currentUser);
            // 延迟更新缓存
            setTimeout(() => {
                updateCurrentUser({ app, methodName: 'getUserInfo' });
            }, 0);
        }
        else {
            await updateCurrentUser({ app, methodName: 'getUserInfo' });
        }
    }
    return observedInfo.currentUser;
}
/** 将从 _WedaHostConfig 获取的wedaUser 信息转换为 sdk 中的currentUser的信息结构 */
function transformWedaHost2CurrentUser(wedaUser) {
    return Object.assign(Object.assign({}, wedaUser), { wedaId: wedaUser.userId || '', avatarUrl: wedaUser.avatar, nickName: wedaUser.nickName || wedaUser.name || '', gender: 0, wxOpenId: (() => {
            if (wedaUser.userExtend) {
                try {
                    const extendInfo = JSON.parse(wedaUser.userExtend);
                    return (extendInfo === null || extendInfo === void 0 ? void 0 : extendInfo.open_id) || '';
                }
                catch (err) {
                    return '';
                }
            }
            return '';
        })() });
}
/** 匿名登录 */
async function anonymousLogin() {
    const { auth } = await getTcbInstance();
    // 重新匿名登录
    // 兼容js-sdk 新旧版本用法
    if (auth.anonymousAuthProvider) {
        await auth.anonymousAuthProvider().signIn();
        // @ts-ignore
    }
    else if (auth.signInAnonymously) {
        await auth.signInAnonymously();
    }
    else {
        console.warn('[weda-cloud-sdk] failed to anonymous login, unsupported @cloudbase/js-sdk version');
    }
}
/**
 * 修改用户信息
 * @param param0.userName 用户名
 * @param param0.nickName 昵称
 * @param param0.avatarUrl 头像
 * @param param0.description 描述
 * @returns
 */
async function modifyCurrentUser({ nickName = '', userName = '', avatarUrl = '', description = '' } = {}) {
    const { userType, wedaId, nickName: nickNameOld, avatarUrl: avatarUrlOld, name: userNameOld, userDesc, } = observedInfo.currentUser;
    if (userType === 'anonymousUser' || !wedaId)
        return {};
    try {
        const { app, auth } = await getTcbInstance();
        await auth.updateUserBasicInfo({
            user_id: wedaId,
            nickname: nickName || nickNameOld || '',
            username: userName || userNameOld || '',
            description: description || userDesc || '',
            avatar_url: avatarUrl || avatarUrlOld || '',
        });
        await updateCurrentUser({ app, methodName: 'getUserInfo' });
        return observedInfo.currentUser;
    }
    catch (error) {
        console.log('=======> [modifyCurrentUser]: error ', error);
    }
    return {};
}
export default {
    signIn,
    getUserInfo,
    signOut,
    anonymousLogin,
    get currentUser() {
        if (observedInfo.currentUser)
            return Object.assign({}, observedInfo.currentUser);
        const customWedaConfig = getCustomWedaConfig();
        const wedaUserFromHost = customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.wedaUser;
        // @ts-ignore
        return wedaUserFromHost ? transformWedaHost2CurrentUser(wedaUserFromHost) : null;
    },
    setCurrentUserInfo(data = {}) {
        for (const key in data) {
            if (observedInfo.currentUser) {
                observedInfo.currentUser[key] = data[key];
            }
        }
    },
    // 兼容小程序
    async getUrlWithOpenidToken(src) {
        return src || '';
    },
    async openIdLoginInWxApp() {
        return false;
    },
    async unionIdLoginInWxApp() {
        return false;
    },
    modifyCurrentUser,
};
