/* eslint-disable @typescript-eslint/indent */
/**
 * h5 tcb     模块, 负责tcb的连接和认证相关处理
 * @cloudbase/js-sdk 为 peerDependencies, 仅 h5 入口需要, 小程序不需要
 */
import tcb from '@cloudbase/js-sdk';
import { getConfig, execOnce, OauthClientStorgeBase, generateOauthClientRequest, _generatePrivatelinkAdapter, } from '../common';
export function getCustomWedaConfig() {
    let config;
    try {
        config = getConfig('customConfig');
    }
    catch (e) { }
    return config || window._WedaHostConfig || {};
}
/** 内部获取tcb 实例方法 */
async function _getTcbInstance(envID) {
    const cloudbase = tcb;
    const env = getConfig();
    const customWedaConfig = getCustomWedaConfig();
    let app;
    const originMeta = env.isPrivate ? new URL(env.tcbApiOrigin || location.origin) : undefined;
    const requestHost = originMeta ? originMeta.host : '';
    const gatewayOriginMeta = env.isPrivate ? new URL(env.gatewayOrigin || location.origin) : undefined;
    const adapter = await _generatePrivatelinkAdapter(env, requestHost);
    // 有自定义云开发实例的, 使用云开发实例
    if (customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.tcbInstance) {
        app = customWedaConfig.tcbInstance;
    }
    else {
        if (adapter) {
            console.log('use privatelink adapter');
            cloudbase.useAdapters(adapter);
        }
        app = cloudbase.init({
            // 超时时间设置为 60s
            timeout: 60 * 1000,
            env: envID,
            // @ts-ignore
            clientId: env.tcbClientId,
            region: env.region,
        });
        // 必须放在init之后调用。在init内部，会根据region调用setRegionLevelEndpoint设置默认的tcb api请求地址，导致设置失效。
        if (originMeta) {
            const { host, protocol } = originMeta;
            cloudbase.registerEndPoint(`//${host}/web`, protocol);
        }
        if (gatewayOriginMeta) {
            const { host, protocol } = gatewayOriginMeta;
            cloudbase.registerEndPointWithKey({
                key: 'GATEWAY',
                url: `//${host}`,
                protocol: protocol,
            });
        }
    }
    let authOptions = {
        persistence: 'local',
    };
    if (adapter) {
        try {
            const { genOauthAdaper = () => ({}) } = adapter;
            const options = genOauthAdaper({
                generateOauthClientRequest,
                OauthClientStorgeBase,
            });
            authOptions = Object.assign(Object.assign({}, authOptions), options);
        }
        catch (e) {
            console.error('adapter generate fail:', e);
        }
    }
    const auth = app.auth(authOptions);
    return {
        app,
        auth,
    };
}
/**
 * 获取 tcb 实例, 不进行登录操作
 * @returns {Promise<{app: tcb.app.App, auth: tcb.auth.Auth}>}
 */
export function getTcbInstance() {
    return execOnce(_getTcbInstance, getConfig().envID);
}
/**
 * 获取登录状态, 兼容js-sdk 1.0 和 2.0 用法
 */
export async function getLoginState() {
    const { auth } = await getTcbInstance();
    // JS-SDK 2.0
    // @ts-ignore
    if (auth.loginScope) {
        const loginInfo = {
            notLogin: true,
            isAnonymous: false,
            hasLogin: false,
        };
        try {
            if (auth.hasLoginState()) {
                // 通过getAccessToken检查登录态，失效会报错，认为未登录
                // @ts-ignore
                await auth.getAccessToken();
                // @ts-ignore
                const loginScope = await auth.loginScope();
                try {
                    // @ts-ignore
                    loginInfo.groups = await auth.loginGroups();
                }
                catch (e) {
                    console.warn('[weda-cloud-sdk] loginGroups faile', e);
                }
                loginInfo.notLogin = false;
                loginInfo.isAnonymous = loginScope === 'anonymous';
                loginInfo.hasLogin = loginScope !== 'anonymous';
            }
        }
        catch (e) {
            console.warn('[weda-cloud-sdk] getLoginState faile', e);
        }
        return loginInfo;
    }
    // JS-SDK 1.0
    //  2.0 也有 hasLoginState 属性, 但是没有 loginType 属性, 故将1.0的判断放在2.0 之后
    if (auth.hasLoginState) {
        const loginStatus = auth.hasLoginState();
        return {
            notLogin: !loginStatus,
            isAnonymous: !!loginStatus && loginStatus.loginType === 'ANONYMOUS',
            hasLogin: !!loginStatus && loginStatus.loginType !== 'ANONYMOUS',
            version: '1.0',
        };
    }
    console.warn('[weda-cloud-sdk] unable to get loginState due to unsupported @cloudbase/js-sdk version, please update to latest version.');
    return {
        notLogin: false,
        isAnonymous: true,
        hasLogin: false,
        version: '1.0',
    };
}
