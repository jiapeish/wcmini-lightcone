import { setConfig, CLOUD_API } from '../index-cover';
import { execOnce, getConfig } from '../common';
import { getLoginState, getTcbInstance, getCustomWedaConfig } from './tcb';
import user from './user';
export const CLOUD_SDK = Object.assign(CLOUD_API, user);
// currentUser  为 getter  属性 , object.assign 会丢 getter 特性
// 在此 重新 设置上
Object.defineProperty(CLOUD_SDK, 'currentUser', {
    get() {
        return user.currentUser;
    },
});
export { getTcbInstance } from './tcb';
export * from '../index-cover';
/**
 * 初始化tcb并进行登录操作
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
async function _init(envID) {
    var _a, _b, _c, _d;
    const { app, auth } = await getTcbInstance();
    const customWedaConfig = getCustomWedaConfig();
    // 匿名登录/未登录均认为 未登录
    const loginState = await getLoginState();
    let isAnonymous = !loginState.hasLogin;
    /**
     * 1.在企业工作台中, 未具名登录
     * 2.编辑器实时预览超管登录,失败后走匿名
     */
    if ((customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.login) && (!loginState.hasLogin || (customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.forceLogin))) {
        try {
            await customWedaConfig.login({
                app,
                auth,
                loginState,
                async defaultLogin() {
                    await user.anonymousLogin();
                },
            });
            isAnonymous = false;
        }
        catch (e) {
            if (((_a = customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.loginConfig) === null || _a === void 0 ? void 0 : _a.failurePolicy) === 'anonymous_login') {
                await user.anonymousLogin();
                isAnonymous = true;
            }
            else {
                // 兼容旧异常逻辑处理
                throw e;
            }
        }
        // 未登录(非匿名也非具名登录)
    }
    else if (loginState.notLogin) {
        await user.anonymousLogin();
        isAnonymous = true;
    }
    // 处理后续事务: 注册用户(已注册的会跳过), 获取用户信息
    if (customWedaConfig && !((_b = customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.loginConfig) === null || _b === void 0 ? void 0 : _b.needSignIn)) {
        // 有用户角色信息则直接返回
        if (!((_c = customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.wedaUser) === null || _c === void 0 ? void 0 : _c.relatedRoles)) {
            await user.getUserInfo(customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.forceLogin);
        }
    }
    else {
        // 兼容jssdk1.0版本保持internalUser登录老逻辑，无internal标识都认为是外部用户
        const userType = isAnonymous
            ? 'anonymousUser'
            : loginState.version === '1.0' || ((_d = loginState.groups) === null || _d === void 0 ? void 0 : _d.includes('internal'))
                ? 'internalUser'
                : 'externalUser';
        try {
            await user.signIn({ userType });
        }
        catch (err) {
            console.warn('[weda-cloud-sdk] initial signIn failed', err);
        }
    }
    return {
        app,
        auth,
    };
}
export async function initTcb() {
    const { envID } = getConfig();
    return execOnce(_init, envID);
}
setConfig({ initTcb });
/**
 * 获取 tcb accessToken
 */
export async function getAccessToken() {
    const { auth } = await getTcbInstance();
    // @ts-ignore
    if (auth.getAccessToken) {
        // @ts-ignore
        return auth.getAccessToken();
    }
    if (auth.getAuthHeader) {
        const result = auth.getAuthHeader();
        if (!result)
            return result;
        return Object.assign({}, result, { accessToken: result['x-cloudbase-credentials'] });
    }
}
