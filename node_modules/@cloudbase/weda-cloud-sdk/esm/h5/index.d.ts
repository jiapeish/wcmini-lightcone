export declare const CLOUD_SDK: {
    dataSources: {};
    callDataSource: typeof import("../index-cover").callDataSource;
    callConnector: typeof import("../index-cover").callDataSource;
    callModel: typeof import("../index-cover").callDataSource;
    IS_WEDA_IDE: boolean;
    version: string | undefined;
    utils: {
        wrapperDatasourceMethod(options: import("../cloud-api/utils-api").IWrapperDatasourceOptions): (params: any) => Promise<any>;
    };
    getCloudInstance: typeof import("../cloud-api").getCloudInstance;
    callGraphql: typeof import("../cloud-api").callGraphql;
    callFunction: typeof import("../cloud-api").callFunction;
    callWorkflow: typeof import("../cloud-api/business-api").callWorkflow;
    callWedaApi: typeof import("../cloud-api/business-api").callWedaApi;
    callCommonService: typeof import("../cloud-api").callCommonService;
    getTempFileURL: typeof import("../cloud-api/temp-url-api").getTempFileURL;
    getDataSourceViewId: typeof import("../common").getDataSourceViewId;
    getDataSourceProfile: typeof import("../cloud-api/business-api").getDataSourceProfile;
    getDataSourceProfileAsync: typeof import("../cloud-api/business-api").getDataSourceProfileAsync;
    setConfig: typeof import("../cloud-api/config").setCloudConfig;
    checkAuth: typeof import("../cloud-api/business-api").checkAuth;
    setDataSourceDefaultParams: typeof import("../common").setDefaultParams;
} & {
    signIn: (params?: import("./user").ISignInParams | undefined) => Promise<import("../types").IUserInfo>;
    getUserInfo: (force?: boolean) => Promise<any>;
    signOut: () => Promise<void>;
    anonymousLogin: () => Promise<void>;
    readonly currentUser: import("../types").IUserInfo | null;
    setCurrentUserInfo(data?: Record<string, any>): void;
    getUrlWithOpenidToken(src: string): Promise<string>;
    openIdLoginInWxApp(): Promise<boolean>;
    unionIdLoginInWxApp(): Promise<boolean>;
    modifyCurrentUser: ({ nickName, userName, avatarUrl, description }?: {
        nickName?: string | undefined;
        userName?: string | undefined;
        avatarUrl?: string | undefined;
        description?: string | undefined;
    }) => Promise<any>;
};
export { getTcbInstance } from './tcb';
export * from '../index-cover';
export declare function initTcb(): Promise<{
    app: import("@cloudbase/js-sdk").default.app.App;
    auth: import("@cloudbase/js-sdk").default.auth.App;
}>;
/**
 * 获取 tcb accessToken
 */
export declare function getAccessToken(): Promise<any>;
