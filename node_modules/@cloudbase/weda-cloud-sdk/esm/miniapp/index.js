import { setConfig, CLOUD_API } from '../index-cover';
import { getTcbInstance, getLoginState, anonymousSignIn, getCustomWedaConfig } from './tcb';
import { execOnce, getConfig, useTcbApi } from '../common';
import user from './user';
import { getAccessToken } from './tcb-auth';
export { getAccessToken };
export const CLOUD_SDK = Object.assign(CLOUD_API, user);
// currentUser 为 getter 属性, object.assign 会丢 getter 特性
//    在此重新设置上
Object.defineProperty(CLOUD_SDK, 'currentUser', {
    get() {
        return user.currentUser;
    },
});
export { getTcbInstance } from './tcb';
// export { initTcb } from './tcb';
export * from '../index-cover';
// eslint-disable-next-line @typescript-eslint/naming-convention
async function _init() {
    var _a;
    const { app, auth } = await getTcbInstance();
    const loginState = await getLoginState();
    let userType = loginState.isAnonymous || loginState.notLogin ? 'anonymousUser' : 'externalUser';
    const { miniProgram } = wx.getAccountInfoSync();
    let providerId = miniProgram === null || miniProgram === void 0 ? void 0 : miniProgram.appId;
    let needSignIn = true;
    const customWedaConfig = getCustomWedaConfig();
    const defaultLogin = async () => {
        if (useTcbApi() && loginState.notLogin) {
            await anonymousSignIn();
        }
        else if (!useTcbApi()) {
            // 根据配置决定是否使用openId登录
            if (getConfig('__defaultLoginType__') === 'openId') {
                await user.openIdLoginInWxApp();
                // openIdLoginInWxApp 已经完成了singIn动作，不重复signIn
                needSignIn = false;
                userType = 'externalUser';
            }
        }
    };
    if (userType == 'anonymousUser') {
        if ((customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.login) && (!loginState.hasLogin || (customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.forceLogin))) {
            needSignIn = !!((_a = customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.loginConfig) === null || _a === void 0 ? void 0 : _a.needSignIn);
            await customWedaConfig.login({ app, auth, loginState, defaultLogin });
        }
        else {
            await defaultLogin();
        }
    }
    if (needSignIn) {
        const failedToSign = (err) => {
            console.warn('[weda-cloud-sdk] failed to sign-in/getUserInfo weda backend', err);
        };
        await user.signIn({ userType, force: true, providerId }).catch(failedToSign);
    }
    if (app.auth) {
        app._auth = app.auth;
    }
    app.auth = auth;
    return {
        app,
        auth,
    };
}
export async function initTcb() {
    return execOnce(_init);
}
setConfig({ initTcb });
