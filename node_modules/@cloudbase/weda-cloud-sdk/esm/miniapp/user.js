/**
 * 用户相关API
 */
import { observable } from 'mobx';
import { callCommonService, getCloudInstance } from '../cloud-api';
import { getTcbInstance, getLoginState, judgePasswordFreeLogin } from './tcb';
import { getConfig, useTcbApi } from '../common';
import { callWedaApi } from '../cloud-api/business-api';
const USER_INFO_CACHE_KEY = 'lcap-user-session';
const MAX_CACHE_DURATION = 3 * 24 * 60 * 60 * 1000;
// 缓存用户登录信息
const observedInfo = observable({ currentUser: null });
/**
 * 注册用户
 *  参数为 使用 wx.getUserInfo 获取到到用户信息
 *    如需手机号, 需额外提供 phoneCloudID(使用 wx.getUserProfile 获取)
 */
async function signIn(params) {
    // 避免重复调用登录接口
    if (observedInfo.currentUser && !params.force)
        return observedInfo.currentUser;
    const { app } = await getTcbInstance();
    const wedaInfo = await callCommonService({
        // @ts-ignore
        wx_phone: (params === null || params === void 0 ? void 0 : params.phoneCloudID) ? wx.cloud.CloudID(params.phoneCloudID) : undefined,
        methodName: 'signIn',
        params,
    }, app);
    const userInfo = Object.assign({}, wedaInfo, params, {
        lastUpdateTime: Date.now(),
    });
    delete userInfo.phoneCloudID;
    if (userInfo.userExtend) {
        try {
            const extendInfo = JSON.parse(userInfo.userExtend);
            userInfo.wxOpenId = userInfo.wxOpenId || (extendInfo === null || extendInfo === void 0 ? void 0 : extendInfo.open_id) || '';
        }
        catch (err) { }
    }
    if (!userInfo.wxOpenId) {
        try {
            const { Data: { Data }, } = await callCommonService({
                methodName: 'callWedaApi',
                params: {
                    action: 'InvokeComponentWxModule',
                    data: { Method: 'GetWxContext' },
                },
            }, app);
            const WXContext = typeof Data === 'string' ? JSON.parse(Data) : Data;
            userInfo.wxOpenId = (WXContext === null || WXContext === void 0 ? void 0 : WXContext.FROM_OPENID) || (WXContext === null || WXContext === void 0 ? void 0 : WXContext.OPENID);
        }
        catch (e) {
            console.error('get wxcontext fail:', e);
        }
    }
    observedInfo.currentUser = userInfo;
    // @ts-ignore
    wx.setStorageSync(USER_INFO_CACHE_KEY, userInfo);
    return userInfo;
}
/** 退出登录 */
async function signOut() {
    const loginState = await getLoginState();
    const { auth } = await getTcbInstance();
    observedInfo.currentUser = null;
    if (loginState.hasLogin) {
        auth.signOut();
    }
    // 非匿名情况, 重新 匿名登录
    if (!loginState.isAnonymous) {
        await signIn({ userType: 'anonymousUser' });
    }
}
/** 获取用户信息, 若用户未注册(或信息过期), 则返回 null */
async function getUserInfo(force = false) {
    if (!force && observedInfo.currentUser)
        return observedInfo.currentUser;
    // @ts-ignore
    const userInfo = wx.getStorageSync(USER_INFO_CACHE_KEY);
    if (!userInfo)
        return userInfo;
    // 缓存超过限制时间
    if (!userInfo.lastUpdateTime || Date.now() - userInfo.lastUpdateTime > MAX_CACHE_DURATION) {
        return null;
    }
    observedInfo.currentUser = Object.assign(Object.assign({}, observedInfo.currentUser), userInfo);
    return userInfo;
}
/**
 * h5跳转地址带上微信小程序openid生成的授权登录token，用于小程序openid授权登录
 * @param src h5跳转地址
 * @returns
 */
async function getUrlWithOpenidToken(src) {
    if (wx === undefined || typeof wx.login !== 'function' || !src)
        return '';
    const { auth } = await getCloudInstance();
    if (!auth)
        return '';
    // 生成带wx_access_token的url
    const generateUrl = (providerToken) => {
        // eslint-disable-next-line prefer-const
        let [origin = '', query = '', hash = ''] = src.split(/(?:\?|#)+/);
        // 如果url本身没有query, 并且解析出来的query是hash, 则重新赋值
        if (query.startsWith('/')) {
            hash = query;
            query = '';
        }
        return `${origin}?${query}${!!query ? '&' : ''}wx_access_token=${providerToken}${!!hash ? '#' : ''}${hash}`;
    };
    const { miniProgram } = wx.getAccountInfoSync();
    // 全托管模式
    if (useTcbApi()) {
        return new Promise((resolve) => {
            wx.login({
                success: async (res) => {
                    try {
                        const { provider_token: providerToken } = await auth.grantProviderToken({
                            provider_code: res.code,
                            provider_id: miniProgram === null || miniProgram === void 0 ? void 0 : miniProgram.appId,
                        });
                        const url = generateUrl(providerToken);
                        resolve(url);
                    }
                    catch (error) {
                        console.log('=======> [getUrlWithOpenidToken]: grantProviderToken error ', error);
                        resolve('');
                    }
                },
                fail: (res) => {
                    console.log('=======> [getUrlWithOpenidToken]: wx.login fail ', res);
                    resolve('');
                },
            });
        });
    }
    // 非全托管模式
    try {
        const tokenRes = await callWedaApi({
            action: 'GetMiniProgramUserTicket',
            data: {
                Type: 'externalUser',
                OnlyOpenId: true,
            },
        });
        const token = (tokenRes === null || tokenRes === void 0 ? void 0 : tokenRes.token) || tokenRes;
        if (!token) {
            return '';
        }
        const { provider_token: providerToken } = await auth.grantProviderToken({
            provider_id: miniProgram === null || miniProgram === void 0 ? void 0 : miniProgram.appId,
            provider_access_token: `${getConfig('envID')} ${token}`,
        });
        const url = generateUrl(providerToken);
        return url;
    }
    catch (error) {
        //
    }
    return '';
}
/**
 * 小程序openId静默登录
 */
async function openIdLoginInWxApp() {
    if (wx === undefined || typeof wx.login !== 'function')
        return false;
    const { auth } = await getTcbInstance();
    if (!auth)
        return false;
    let res = true;
    const { miniProgram } = wx.getAccountInfoSync();
    const providerId = miniProgram === null || miniProgram === void 0 ? void 0 : miniProgram.appId;
    const code = await new Promise((resolve, reject) => {
        wx.login({
            success: async (res) => {
                resolve(res.code);
            },
            fail: (res) => {
                console.log('=======> [openIdLoginInWxApp]: wx.login fail ', res);
                const error = new Error(res === null || res === void 0 ? void 0 : res.errMsg);
                error.code = res === null || res === void 0 ? void 0 : res.errno;
                reject(error);
            },
        });
    });
    try {
        const params = {
            provider_id: providerId,
            provider_params: {
                provider_code_type: 'open_id',
            },
        };
        if (code) {
            params['provider_code'] = code;
            params.provider_params['appid'] = miniProgram === null || miniProgram === void 0 ? void 0 : miniProgram.appId;
        }
        const { provider_token: providerToken } = await auth.grantProviderToken(params);
        const signInRes = await auth.signInWithProvider({
            provider_token: providerToken,
        });
        if (signInRes.code) {
            console.log('=======> [openIdLoginInWxApp]: signInWithProvider error ', signInRes);
            throw signInRes;
        }
        res = true;
    }
    catch (error) {
        console.log('=======> [openIdLoginInWxApp]: error ', error);
        throw error;
    }
    await signIn({ userType: 'externalUser', force: true, providerId });
    return res;
}
/**
 * 小程序unionId静默登录
 */
async function unionIdLoginInWxApp() {
    if (wx === undefined || typeof wx.login !== 'function')
        return false;
    const { auth } = await getCloudInstance();
    if (!auth) {
        const error = new Error('auth instance not found');
        return error;
    }
    return new Promise((resolve, reject) => {
        wx.login({
            success: async (res) => {
                const { miniProgram } = wx.getAccountInfoSync();
                const providerId = miniProgram === null || miniProgram === void 0 ? void 0 : miniProgram.appId;
                try {
                    const { provider_token: providerToken } = await auth.grantProviderToken({
                        provider_code: res.code,
                        provider_id: providerId,
                        provider_params: {
                            provider_code_type: 'union_id',
                            appid: miniProgram === null || miniProgram === void 0 ? void 0 : miniProgram.appId,
                        },
                    });
                    const signInRes = await auth.signInWithProvider({
                        provider_id: providerId,
                        provider_token: providerToken,
                    });
                    if (signInRes.code) {
                        console.log('=======> [unionIdLoginInWxApp]: signInWithProvider error ', signInRes);
                        reject(signInRes);
                        return;
                    }
                    await signIn({ userType: 'externalUser', force: true });
                    resolve(true);
                }
                catch (error) {
                    console.log('=======> [unionIdLoginInWxApp]: error ', error);
                    reject(error);
                }
            },
            fail: (res) => {
                console.log('=======> [unionIdLoginInWxApp]: wx.login fail ', res);
                const error = new Error(res === null || res === void 0 ? void 0 : res.errMsg);
                error.code = res === null || res === void 0 ? void 0 : res.errno;
                reject(error);
            },
        });
    });
}
/**
 * 修改用户信息
 * @param param0.userName 用户名
 * @param param0.nickName 昵称
 * @param param0.avatarUrl 头像
 * @param param0.description 描述
 * @returns
 */
async function modifyCurrentUser({ nickName = '', userName = '', avatarUrl = '', description = '' } = {}) {
    const { userType, wedaId, nickName: nickNameOld, avatarUrl: avatarUrlOld, userName: userNameOld, description: descriptionOld, } = observedInfo.currentUser;
    if (userType === 'anonymousUser' || !wedaId)
        return {};
    try {
        const { auth } = await getTcbInstance();
        await auth.updateUserBasicInfo({
            user_id: wedaId,
            nickname: nickName || nickNameOld || '',
            username: userName || userNameOld || '',
            description: description || descriptionOld || '',
            avatar_url: avatarUrl || avatarUrlOld || '',
        });
        return await signIn({ userType, force: true });
    }
    catch (error) {
        console.log('=======> [modifyCurrentUser]: error ', error);
    }
    return {};
}
export default {
    signIn,
    signOut,
    getUserInfo,
    setCurrentUserInfo(data = {}) {
        for (const key in data) {
            if (observedInfo.currentUser) {
                observedInfo.currentUser[key] = data[key];
            }
        }
    },
    get currentUser() {
        return observedInfo.currentUser ? Object.assign({}, observedInfo.currentUser) : null;
    },
    getUrlWithOpenidToken,
    openIdLoginInWxApp,
    unionIdLoginInWxApp,
    modifyCurrentUser,
    judgePasswordFreeLogin,
};
