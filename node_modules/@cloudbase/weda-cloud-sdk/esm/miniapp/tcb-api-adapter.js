/**
 * 小程序全托管链路适配，主要是upload file
 * copy from QBase/client-side-sdk/tcb-js-sdk-adapters/cloudbase-adapter-wx_mp.git
 */
import { AbstractSDKRequest, StorageType, formatUrl } from '@cloudbase/adapter-interface';
import { wxMpStorage, isMatch } from '../storage';
import { getConfig } from '../common';
function isPlugin() {
    return (typeof App === 'undefined' &&
        typeof getApp === 'undefined' &&
        !wx.onAppHide &&
        !wx.offAppHide &&
        !wx.onAppShow &&
        !wx.offAppShow);
}
const getExternalAdapter = async () => {
    const __asyncRequire__ = getConfig('__asyncRequire__');
    try {
        const wxAdapter = __asyncRequire__
            ? await __asyncRequire__('@cloudbase/adapter-wx_mp')
            : require('@cloudbase/adapter-wx_mp');
        return wxAdapter;
    }
    catch (error) {
        return null;
    }
};
const getBaseWxRequestClass = async () => {
    const externalAdapter = await getExternalAdapter();
    if (!(externalAdapter === null || externalAdapter === void 0 ? void 0 : externalAdapter.WxRequest))
        return AbstractSDKRequest;
    return externalAdapter.WxRequest;
};
export class WxMpWebSocket {
    constructor(url, options = {}) {
        const ws = wx.connectSocket(Object.assign({ url }, options));
        const socketTask = {
            set onopen(cb) {
                ws.onOpen(cb);
            },
            set onmessage(cb) {
                ws.onMessage(cb);
            },
            set onclose(cb) {
                ws.onClose(cb);
            },
            set onerror(cb) {
                ws.onError(cb);
            },
            send: (data) => ws.send({ data }),
            close: (code, reason) => ws.close({
                code,
                reason,
            }),
            get readyState() {
                return ws.readyState;
            },
            CONNECTING: 0,
            OPEN: 1,
            CLOSING: 2,
            CLOSED: 3,
        };
        return socketTask;
    }
}
async function genAdapterAsync() {
    const Base = await getBaseWxRequestClass();
    class WxRequest extends Base {
        constructor(config = {}) {
            super(config);
            const { timeout, timeoutMsg, restrictedMethods } = config;
            this._timeout = timeout || 0;
            this._timeoutMsg = timeoutMsg || '请求超时';
            this._restrictedMethods = restrictedMethods || ['get', 'post', 'upload', 'download'];
        }
        post(options) {
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const self = this;
            return new Promise((resolve, reject) => {
                const { url, data, headers } = options;
                const task = wx.request({
                    url: formatUrl('https:', url),
                    data,
                    timeout: self._timeout,
                    method: 'POST',
                    header: headers,
                    success(res) {
                        resolve(res);
                    },
                    fail(err) {
                        reject(err);
                    },
                    complete(err) {
                        if (!(err === null || err === void 0 ? void 0 : err.errMsg)) {
                            return;
                        }
                        if (!self._timeout || self._restrictedMethods.indexOf('post') === -1) {
                            return;
                        }
                        const { errMsg } = err;
                        if (errMsg === 'request:fail timeout') {
                            console.warn(self._timeoutMsg);
                            try {
                                task.abort();
                            }
                            catch (e) { }
                        }
                    },
                });
            });
        }
        upload(options) {
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const self = this;
            return new Promise((resolve) => {
                const { url, file, data, headers } = options;
                const fs = wx.getFileSystemManager(); // 读取文件 二进制内容
                const task = wx.request({
                    url,
                    method: options.method,
                    header: Object.assign({ 'content-type': ' ' }, headers),
                    data: fs.readFileSync(file),
                    timeout: this._timeout,
                    success(res) {
                        const result = {
                            statusCode: res.statusCode,
                            data: res.data || {},
                        };
                        if (res.statusCode === 200 && (data === null || data === void 0 ? void 0 : data.success_action_status)) {
                            result.statusCode = parseInt(data.success_action_status, 10);
                        }
                        resolve(result);
                    },
                    fail(err) {
                        resolve(err);
                    },
                    complete(err) {
                        if (!(err === null || err === void 0 ? void 0 : err.errMsg)) {
                            return;
                        }
                        if (!self._timeout || self._restrictedMethods.indexOf('upload') === -1) {
                            return;
                        }
                        const { errMsg } = err;
                        if (errMsg === 'request:fail timeout') {
                            console.warn(self._timeoutMsg);
                            try {
                                task.abort();
                            }
                            catch (e) { }
                        }
                    },
                });
            });
        }
        download(options) {
            // eslint-disable-next-line @typescript-eslint/no-this-alias
            const self = this;
            return new Promise((resolve, reject) => {
                const { url, headers } = options;
                const task = wx.downloadFile({
                    url: formatUrl('https:', url),
                    header: headers,
                    timeout: this._timeout,
                    success(res) {
                        if (res.statusCode === 200 && res.tempFilePath) {
                            // 由于涉及权限问题，只返回临时链接不保存到设备
                            resolve({
                                statusCode: 200,
                                tempFilePath: res.tempFilePath,
                            });
                        }
                        else {
                            resolve(res);
                        }
                    },
                    fail(err) {
                        reject(err);
                    },
                    complete(err) {
                        if (!(err === null || err === void 0 ? void 0 : err.errMsg)) {
                            return;
                        }
                        if (!self._timeout || self._restrictedMethods.indexOf('download') === -1) {
                            return;
                        }
                        const { errMsg } = err;
                        if (errMsg === 'request:fail timeout') {
                            console.warn(self._timeoutMsg);
                            try {
                                task.abort();
                            }
                            catch (e) { }
                        }
                    },
                });
            });
        }
    }
    // 小程序无sessionStorage
    const adapter = {
        root: {},
        // @ts-ignore
        reqClass: WxRequest,
        wsClass: WxMpWebSocket,
        localStorage: wxMpStorage,
        primaryStorage: StorageType.local,
        getAppSign() {
            const info = wx.getAccountInfoSync();
            if (isPlugin()) {
                // 插件环境返回插件appid
                return (info === null || info === void 0 ? void 0 : info.plugin) ? info.plugin.appId : '';
            }
            return (info === null || info === void 0 ? void 0 : info.miniProgram) ? info.miniProgram.appId : '';
        },
    };
    return adapter;
}
const adapter = {
    genAdapterAsync,
    genAdapter: undefined,
    isMatch,
    runtime: 'wx_mp',
};
export default adapter;
