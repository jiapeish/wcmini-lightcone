var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { generateAuthBaseConfig } from './config';
import { getConfig, execOnce, _generatePrivatelinkAdapter, generateOauthClientRequest, OauthClientStorgeBase, } from '../../common';
import { getTcbInstance } from '../tcb';
import mpAdapter from '../tcb-api-adapter';
async function _getTcbAuth(app) {
    var _a, _b;
    const asyncRequire = getConfig('__asyncRequire__');
    const adapter = await _generatePrivatelinkAdapter(getConfig(), (_b = (_a = getConfig('tcbApiOrigin')) === null || _a === void 0 ? void 0 : _a.replace) === null || _b === void 0 ? void 0 : _b.call(_a, /^https?:\/\//, ''));
    const { generateAuthInstance } = asyncRequire ? await asyncRequire('@cloudbase/auth') : require('@cloudbase/auth');
    const { authInstance } = generateAuthInstance(getAuthInitParams(app, adapter), {
        clientId: getConfig('tcbClientId'),
        env: getConfig('envID'),
        // "https://tcb-api.tencentcloudapi.com",
        apiOrigin: getConfig('tcbApiOrigin'),
        cache: null,
        platform: {
            runtime: (adapter === null || adapter === void 0 ? void 0 : adapter.runtime) || mpAdapter.runtime,
            adapter: (adapter === null || adapter === void 0 ? void 0 : adapter.genAdapter()) || (await mpAdapter.genAdapterAsync()),
        },
    });
    return authInstance;
}
export function getAuthInitParams(app, defaultParams, adapter) {
    let adapterOptions = {};
    if (adapter) {
        const { genOauthAdaper = () => ({}) } = adapter;
        adapterOptions = genOauthAdaper({ generateOauthClientRequest, OauthClientStorgeBase });
    }
    const { request: adapterRequest } = adapterOptions, restAdapterOptions = __rest(adapterOptions, ["request"]);
    const authBaseConfig = generateAuthBaseConfig(app);
    return Object.assign(Object.assign(Object.assign(Object.assign({ persistence: 'local', region: getConfig('region') || 'ap-shanghai' }, defaultParams), authBaseConfig), restAdapterOptions), { baseRequest: adapterRequest || authBaseConfig.baseRequest });
}
export function getTcbAuth(app) {
    return execOnce(_getTcbAuth, app);
}
export async function getAccessToken() {
    const { auth } = await getTcbInstance();
    return auth.getAccessToken();
}
