/* eslint-disable @typescript-eslint/no-misused-promises */
/**
 * 数据源变量相关处理
 */
import { observable } from 'mobx';
import { getConfig, DATASET_CONTEXT, setConfig, getDatasetProfiles } from './common';
import { CLOUD_API } from './cloud-api';
import { setState } from './extra-api';
import { commonLocalStorage } from './storage';
import { LRUCache } from './lru';
const DATASET_STATE_LOCALSTORAGE_KEY = 'dataset';
const STORAGE_VALUE_REG = /^(?:(\d*);)?(.*)$/;
function parseStorageValue(value) {
    const str = value || '';
    if (typeof str === 'string') {
        const matched = str.match(STORAGE_VALUE_REG);
        if (matched) {
            return {
                timestamp: Number(matched[1]) || 0,
                value: matched[2],
            };
        }
    }
}
class CommonLocalStorageCacheMap extends Map {
    constructor() {
        super();
    }
    get(key, options = {}) {
        const { refreshCache = true } = options;
        const node = super.get(key);
        let value = commonLocalStorage.getItemSync(key);
        if (node && value) {
            const res = parseStorageValue(value);
            if (res) {
                value = res.value;
                if (refreshCache) {
                    commonLocalStorage.setItem(key, `${Date.now()};${value}`);
                }
            }
            return { node, value };
        }
        return undefined;
    }
    set(key, value, options = {}) {
        const { refreshCache = true } = options || {};
        const res = super.set(key, value.node);
        if (refreshCache) {
            commonLocalStorage.setItemSync(key, `${Date.now()};${value.value}`);
        }
        return res;
    }
    delete(key) {
        const res = super.delete(key);
        commonLocalStorage.removeItemSync(key);
        return res;
    }
}
const DATASET_STATE_CACHE = new LRUCache({
    /**
     * 开辟 2m 空间用于存储 state
     */
    size: 2 * 1024 * 1000,
    sizeCalculation: (value, key) => `${String(value)}${String(key)}`.length,
    map: new CommonLocalStorageCacheMap(),
    onInit: (cache) => {
        const keys = commonLocalStorage.getKeysSync() || [];
        const list = keys
            .filter(key => key.startsWith(`${DATASET_STATE_LOCALSTORAGE_KEY}_`))
            .map((key) => {
            const str = commonLocalStorage.getItemSync(key);
            const { value, timestamp } = parseStorageValue(str) || {
                value: str || '',
                timestamp: 0,
            };
            return { key, value, timestamp };
        })
            .sort((a, b) => (a.timestamp - b.timestamp >= 0 ? 1 : -1));
        list.forEach(({ key, value }) => {
            cache.set(key, value, { refreshCache: false });
        });
    },
});
/**
 * 根据页面id生成对应页面数据源变量对象
 * @param pageID 页面id, 应用传 $global
 * @param useSample 参数变量是否使用示例值
 */
export function createDataset(pageID, useSample, options) {
    setConfig({ currentPageId: pageID });
    const datasetProfiles = getConfig('datasetProfiles') || {};
    const datasetProfile = datasetProfiles[pageID];
    const result = observable({
        state: {
            $status: {},
        },
        params: {},
    });
    DATASET_CONTEXT[pageID] = result;
    if (!datasetProfile) {
        return result;
    }
    const paramsVars = createParamsVar(datasetProfile.params, useSample);
    const staticVars = createStaticStateVar(datasetProfile.state, {
        appId: options === null || options === void 0 ? void 0 : options.appId,
        datasetProfileKey: pageID,
    });
    Object.assign(result.params, paramsVars);
    Object.assign(result.state, staticVars);
    return result;
}
/**
 * 创建参数变量
 * @param paramConfigMap 参数变量配置
 * @param useSample 是否使用示例值
 */
export function createParamsVar(paramConfigMap, useSample) {
    if (!paramConfigMap)
        return;
    const varNames = Object.keys(paramConfigMap);
    if (!varNames.length)
        return {};
    const result = {};
    return varNames.reduce((acc, name) => {
        const varCfg = paramConfigMap[name];
        acc[name] = varCfg.initialValue !== undefined
            ? varCfg.initialValue
            : varCfg.required
                ? ''
                : undefined;
        if (useSample) {
            acc[name] = varCfg.sampleValue || acc[name];
        }
        return acc;
    }, result);
}
/**
 * 创建静态状态变量
 * @param stateConfigMap 状态变量配置
 * @param context 变量所挂载的对象上下文
 */
export function createStaticStateVar(stateConfigMap, options) {
    if (!stateConfigMap)
        return {};
    const varNames = Object.keys(stateConfigMap);
    const result = {};
    const SYNC_LOCAL_KEY_MAP = {};
    const staticVars = varNames.reduce((acc, name) => {
        const config = stateConfigMap[name];
        // 非普通状态变量
        if (config.varType !== 'state')
            return acc;
        if (config.enableSyncLocal) {
            const cacheKey = generateDatasetStateCacheKey(options === null || options === void 0 ? void 0 : options.appId, options === null || options === void 0 ? void 0 : options.datasetProfileKey, name);
            if (cacheKey) {
                SYNC_LOCAL_KEY_MAP[cacheKey] = true;
            }
            try {
                const local = getLocalDatasetState(options === null || options === void 0 ? void 0 : options.appId, options === null || options === void 0 ? void 0 : options.datasetProfileKey, name, false);
                acc[name] = local;
            }
            catch (e) {
                console.error('get local state error:', e);
            }
        }
        if (acc[name] === undefined) {
            acc[name] = config.initialValue;
        }
        return acc;
    }, result);
    removeLocalDatasetState(options === null || options === void 0 ? void 0 : options.appId, options === null || options === void 0 ? void 0 : options.datasetProfileKey, SYNC_LOCAL_KEY_MAP);
    return staticVars;
}
/**
 * 创建数据源状态变量
 * @param pageID 页面ID(全局使用 $global)
 * @param stateConfigMap 状态变量配置
 * @param parseParams 解析数据源变量入参的函数
 */
export async function createStateDataSourceVar(pageID, parseParams) {
    var _a, _b;
    const stateContext = (_a = DATASET_CONTEXT[pageID]) === null || _a === void 0 ? void 0 : _a.state;
    const datasetProfiles = getConfig('datasetProfiles') || {};
    const stateConfigMap = (_b = datasetProfiles[pageID]) === null || _b === void 0 ? void 0 : _b.state;
    if (!stateContext || !stateConfigMap)
        return;
    const varNames = Object.keys(stateConfigMap);
    varNames.forEach(async (name) => {
        const config = stateConfigMap[name];
        if (config.varType !== 'datasource')
            return;
        // 变量无需初始化
        if (!config.initMethod || !config.initMethod.name) {
            stateContext[name] = {};
            // 此时变量状态为 idle, 只有相应表单提交时才会有其他状态
            stateContext.$status[name] = { status: 'idle' };
            return;
        }
        // 列表及单条记录类型变量, 则应立即调用相应方法进行加载
        try {
            stateContext.$status[config.name] = { status: 'loading' };
            const { initMethod } = config;
            const result = await CLOUD_API.callDataSource({
                name: config.dataSourceName,
                methodName: initMethod.name,
                params: parseParams(initMethod.params, initMethod),
                options: {
                    showLoading: true,
                },
            });
            setState(`${pageID}.${config.name}`, result);
        }
        catch (e) {
            console.error(`[weda-cloud-sdk] 初始化变量 ${pageID}.${config.name} 失败`, e);
            setState(`${pageID}.${config.name}`, e);
        }
    });
}
/**
 * 生成变量解析的函数
 * @param dynamicParams
 * @param context 动态值计算上下文
 * @param context.app 全局 dataset
 * @param context.$page 页面级 dataset
 */
export function generateParamsParser(context) {
    return (dynamicParams) => {
        if (!dynamicParams) {
            return dynamicParams;
        }
        const params = {};
        Object.keys(dynamicParams).forEach((key) => {
            params[key] = dynamicParams[key](context.app, context.$page, context.$w);
        });
        return params;
    };
}
function generateDatasetStateCacheKey(appId, datasetProfileKey, name) {
    const prefix = generateDatasetStateCacheKeyPrefix(appId, datasetProfileKey);
    if (prefix && name) {
        return `${prefix}${name}`;
    }
}
function generateDatasetStateCacheKeyPrefix(appId, datasetProfileKey) {
    if (appId && datasetProfileKey) {
        return `${DATASET_STATE_LOCALSTORAGE_KEY}_${appId}_${datasetProfileKey}_`;
    }
}
/**
 * 读取变量本地存储
 */
function getLocalDatasetState(appId, datasetProfileKey, name, heatCache = true) {
    const cacheKey = generateDatasetStateCacheKey(appId, datasetProfileKey, name);
    if (cacheKey) {
        const local = DATASET_STATE_CACHE.get(cacheKey, { local: !!heatCache });
        if (typeof local === 'string') {
            return JSON.parse(local);
        }
    }
    return undefined;
}
function removeLocalDatasetState(appId, datasetProfileKey, whiteMap = {}) {
    const prefix = generateDatasetStateCacheKeyPrefix(appId, datasetProfileKey);
    if (prefix) {
        const keys = commonLocalStorage.getKeysSync() || [];
        keys.forEach((key) => {
            if (!whiteMap[key] && key.startsWith(prefix)) {
                // 异步清理已经不存在的存储key
                Promise.resolve().then(() => {
                    DATASET_STATE_CACHE.delete(key);
                });
            }
        });
    }
}
export function setLocalDatasetState(appId, datasetProfileKey, name, value) {
    var _a, _b;
    const cacheKey = generateDatasetStateCacheKey(appId, datasetProfileKey, name);
    if (cacheKey) {
        const stateProfile = ((_a = getDatasetProfiles(datasetProfileKey)) === null || _a === void 0 ? void 0 : _a.state) || {};
        if (value === undefined) {
            DATASET_STATE_CACHE.delete(cacheKey);
        }
        else {
            const valueString = JSON.stringify(value);
            let initialValueString;
            try {
                initialValueString = JSON.stringify((_b = stateProfile === null || stateProfile === void 0 ? void 0 : stateProfile[name]) === null || _b === void 0 ? void 0 : _b.initialValue);
            }
            catch (e) { }
            if (valueString === initialValueString) {
                DATASET_STATE_CACHE.delete(cacheKey);
            }
            else {
                try {
                    DATASET_STATE_CACHE.set(cacheKey, valueString);
                }
                catch (e) {
                    if (/exceed storage max size/.test(e === null || e === void 0 ? void 0 : e.message)
                        || e.name === 'QuotaExceededError'
                        || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                        const keys = commonLocalStorage.getKeysSync() || [];
                        keys.forEach((key) => {
                            /**
                             * 清除当前应用外
                             * 其余所有缓存key
                             * TODO: 更新 LRU 淘汰方式
                             */
                            if (key.startsWith(`${DATASET_STATE_LOCALSTORAGE_KEY}_`)
                                && !key.startsWith(`${DATASET_STATE_LOCALSTORAGE_KEY}_${appId}`)) {
                                Promise.resolve().then(() => {
                                    DATASET_STATE_CACHE.delete(cacheKey);
                                });
                            }
                        });
                    }
                    else {
                        DATASET_STATE_CACHE.delete(cacheKey);
                    }
                    throw e;
                }
            }
        }
    }
}
