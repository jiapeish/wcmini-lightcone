/**
 * 处理事件
 */
const events = {};
/** 广播事件 */
const broadcastEvents = {};
const once = {};
export const EVENT_BUS = {
    /**
     * 监听事件
     * @param eventName 事件名称
     * @param callback 回调函数
     */
    on(eventName, callback) {
        if (events[eventName]) {
            console.warn(`event ${eventName} has been registered`);
        }
        events[eventName] = callback;
    },
    once(eventName, callback) {
        if (once[eventName]) {
            return once[eventName].push(callback);
        }
        once[eventName] = [callback];
    },
    /**
     * 触发事件
     * @param eventName 事件名称
     * @param payload 事件参数
     * @return 返回事件回调的结果, 需使用 promise 方式获取
     */
    async emit(eventName, ...params) {
        if (events[eventName]) {
            events[eventName](...params);
        }
        if (once[eventName]) {
            once[eventName].forEach((handler) => handler(...params));
            once[eventName] = [];
        }
    },
    /**
     * 移除事件, 支持批量移除
     * @param eventName 事件名称
     **/
    off(eventName) {
        Array.isArray(eventName) ? eventName.forEach((name) => delete events[name]) : delete events[eventName];
    },
    /**
     * 监听广播事件
     * @param eventName 事件名称
     * @param callback 回调函数
     */
    listen(eventName, callback) {
        if (!broadcastEvents[eventName]) {
            broadcastEvents[eventName] = [];
        }
        if (broadcastEvents[eventName].includes(callback))
            return;
        broadcastEvents[eventName].push(callback);
    },
    /**
     * 广播事件
     */
    broadcast(eventName, ...args) {
        const cbs = broadcastEvents[eventName];
        if (!cbs || cbs.length === 0)
            return;
        cbs.forEach((cb) => {
            try {
                cb(...args);
            }
            catch (error) { }
        });
    },
    /**
     * 不再监听广播事件
     * @param eventName 事件名称
     * @param callback 回调函数
     */
    quit(eventName, callback) {
        const cbs = broadcastEvents[eventName];
        if (!cbs || cbs.length === 0)
            return;
        const index = cbs.indexOf(callback);
        if (index > -1) {
            cbs.splice(index, 1);
        }
    },
};
