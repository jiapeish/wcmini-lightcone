"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getUrlWithOpenidTokenWxCloud = exports.getUrlWithOpenidToken = void 0;
const wx_1 = require("./wx");
/**
 * h5跳转地址带上微信小程序openid生成的授权登录token，用于小程序openid授权登录
 * @param src h5跳转地址
 * @returns
 */
async function getUrlWithOpenidToken(src, envId, useWxCloud) {
    if (typeof wx.login !== 'function' || !src || !envId)
        return '';
    if (useWxCloud)
        return await getUrlWithOpenidTokenWxCloud(src, envId);
    return new Promise((resolve) => {
        wx.login({
            success: async (res) => {
                const { miniProgram } = wx.getAccountInfoSync();
                try {
                    const { provider_token: providerToken } = await (0, wx_1.WxRequest)('/auth/v1/provider/token', {
                        body: {
                            provider_code: res.code,
                            provider_id: miniProgram === null || miniProgram === void 0 ? void 0 : miniProgram.appId,
                            provider_params: {
                                provider_code_type: 'open_id',
                            },
                        },
                        envId,
                    });
                    // eslint-disable-next-line prefer-const
                    let [origin = '', query = '', hash = ''] = src.split(/(?:\?|#)+/);
                    // 如果url本身没有query, 并且解析出来的query是hash, 则重新赋值
                    if (query.startsWith('/')) {
                        hash = query;
                        query = '';
                    }
                    const url = `${origin}?${query}${!!query ? '&' : ''}wx_access_token=${providerToken}${!!hash ? '#' : ''}${hash}`;
                    // console.log('=======> [getUrlWithOpenidToken]: wx.login success ', url);
                    resolve(url);
                }
                catch (error) {
                    console.log('=======> [getUrlWithOpenidToken]: grantProviderToken error ', error);
                    resolve('');
                }
            },
            fail: (res) => {
                console.log('=======> [getUrlWithOpenidToken]: wx.login fail ', res);
                resolve('');
            },
        });
    });
}
exports.getUrlWithOpenidToken = getUrlWithOpenidToken;
/**
 * 使用云开发时
 * h5跳转地址带上微信小程序openid生成的授权登录token，用于小程序openid授权登录
 * @param src h5跳转地址
 * @param envId 环境id
 * @returns
 */
async function getUrlWithOpenidTokenWxCloud(src, envId) {
    var _a, _b, _c, _d, _e, _f;
    const app = wx.cloud;
    app.init({ env: envId });
    let token = '';
    try {
        const tokenRes = await app.callFunction({
            name: 'lowcode-datasource',
            data: {
                mode: 'c',
                methodName: 'callWedaApi',
                params: {
                    action: 'GetMiniProgramUserTicket',
                    data: {
                        Type: 'externalUser',
                        OnlyOpenId: true,
                    },
                },
            },
        });
        token = ((_b = (_a = tokenRes === null || tokenRes === void 0 ? void 0 : tokenRes.result) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.Data) || '';
        if (!token) {
            return '';
        }
    }
    catch (error) {
        console.log('=======> [getUrlWithOpenidTokenWxCloud]: GetMiniProgramUserTicket error ', error);
        return '';
    }
    try {
        const { miniProgram } = wx.getAccountInfoSync();
        const { url, method, headers, body } = await (0, wx_1.processBaseRequestOptions)({
            path: '/auth/v1/provider/token',
            method: 'POST',
            body: {
                provider_access_token: `${envId} ${token}`,
                provider_id: miniProgram === null || miniProgram === void 0 ? void 0 : miniProgram.appId,
                provider_params: {
                    provider_code_type: 'open_id',
                },
            },
            envId,
        });
        const res = await app.callFunction({
            name: 'httpOverCallFunction',
            data: {
                url,
                method,
                headers: Object.assign({ origin: 'https://servicewechat.com' }, headers),
                body,
            },
        });
        if ((_d = (_c = res === null || res === void 0 ? void 0 : res.result) === null || _c === void 0 ? void 0 : _c.body) === null || _d === void 0 ? void 0 : _d.error_code) {
            console.log('=======> [getUrlWithOpenidTokenWxCloud]: grantProviderToken error ', (_e = res === null || res === void 0 ? void 0 : res.result) === null || _e === void 0 ? void 0 : _e.body);
            return '';
        }
        const { provider_token: providerToken } = ((_f = res === null || res === void 0 ? void 0 : res.result) === null || _f === void 0 ? void 0 : _f.body) || {};
        // eslint-disable-next-line prefer-const
        let [origin = '', query = '', hash = ''] = src.split(/(?:\?|#)+/);
        // 如果url本身没有query, 并且解析出来的query是hash, 则重新赋值
        if (query.startsWith('/')) {
            hash = query;
            query = '';
        }
        return `${origin}?${query}${!!query ? '&' : ''}wx_access_token=${providerToken}${!!hash ? '#' : ''}${hash}`;
    }
    catch (error) {
        console.log('=======> [getUrlWithOpenidTokenWxCloud]: grantProviderToken error ', error);
    }
    return '';
}
exports.getUrlWithOpenidTokenWxCloud = getUrlWithOpenidTokenWxCloud;
