"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.processBaseRequestOptions = exports.WxRequest = void 0;
const uuid_1 = __importDefault(require("./uuid"));
const WxRequest = async (path, options) => {
    var _a;
    const copyOptions = Object.assign(Object.assign({}, options), { method: options.method || 'POST', body: typeof options.body === 'string'
            ? options.body
            : JSON.stringify(options.body, (key, value) => {
                if (value && value !== '') {
                    return value;
                }
            }), headers: Object.assign(Object.assign({}, options.headers), { 'x-request-id': ((_a = options.headers) === null || _a === void 0 ? void 0 : _a['x-request-id']) || uuid_1.default.uuid(), host: `${options.envId}.ap-shanghai.tcb-api.tencentcloudapi.com` }) });
    const { ['x-request-id']: requestId, host } = copyOptions.headers;
    const processUrl = `https://${host}${path}`;
    return new Promise((resolve, reject) => {
        wx.request({
            url: processUrl,
            data: copyOptions.body,
            method: copyOptions.method,
            header: copyOptions.headers,
            success(res) {
                let resp;
                if (typeof res.data === 'object') {
                    resp = res.data;
                    if (resp.code) {
                        // 兼容idaas服务和上游服务异常格式不一致
                        resp = {
                            error: resp.code,
                            error_description: resp.message || resp.code,
                            request_id: resp.requestId || requestId,
                            error_path: path,
                        };
                    }
                }
                else {
                    resp = {
                        error: 'unreachable',
                        error_description: `resp data error for - ${res.data}`,
                        request_id: requestId,
                        error_path: path,
                    };
                }
                if (resp.error) {
                    resp.error_path = path;
                    reject(resp);
                }
                else {
                    resolve(resp);
                }
            },
            fail(res) {
                const resp = {
                    error: 'unreachable',
                    error_description: res.errMsg,
                    error_path: path,
                    request_id: requestId,
                };
                reject(resp);
            },
        });
    });
};
exports.WxRequest = WxRequest;
async function processBaseRequestOptions(options) {
    // Objects must be copied to prevent modification of data such as body.
    const { path, envId } = options, copyOptions = __rest(options, ["path", "envId"]);
    if (!copyOptions.headers) {
        copyOptions.headers = {};
    }
    if (copyOptions.method === 'PATCH') {
        copyOptions.headers['X-HTTP-Method-Override'] = 'PATCH';
        copyOptions.method = 'POST';
    }
    if (copyOptions.body && typeof copyOptions.body !== 'string') {
        copyOptions.body = JSON.stringify(copyOptions.body, (key, value) => {
            if (value && value !== '') {
                return value;
            }
        });
    }
    const host = `${envId}.ap-shanghai.tcb-api.tencentcloudapi.com`;
    copyOptions.headers['x-host'] = host;
    try {
        copyOptions.headers['User-Agent'] = await wx.getRendererUserAgent();
    }
    catch (error) { }
    const processUrl = `https://${host}${path}${path.indexOf('?') != -1 ? `&env=${envId}` : `?env=${envId}`}`;
    return {
        url: processUrl,
        body: copyOptions.body,
        method: copyOptions.method,
        headers: copyOptions.headers,
    };
}
exports.processBaseRequestOptions = processBaseRequestOptions;
