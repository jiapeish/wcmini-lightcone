"use strict";
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getAccessToken = exports.getTcbAuth = exports.getAuthInitParams = void 0;
const config_1 = require("./config");
const common_1 = require("../../common");
const tcb_1 = require("../tcb");
const tcb_api_adapter_1 = __importDefault(require("../tcb-api-adapter"));
async function _getTcbAuth(app) {
    var _a, _b;
    const asyncRequire = (0, common_1.getConfig)('__asyncRequire__');
    const adapter = await (0, common_1._generatePrivatelinkAdapter)((0, common_1.getConfig)(), (_b = (_a = (0, common_1.getConfig)('tcbApiOrigin')) === null || _a === void 0 ? void 0 : _a.replace) === null || _b === void 0 ? void 0 : _b.call(_a, /^https?:\/\//, ''));
    const { generateAuthInstance } = asyncRequire ? await asyncRequire('@cloudbase/auth') : require('@cloudbase/auth');
    const { authInstance } = generateAuthInstance(getAuthInitParams(app, adapter), {
        clientId: (0, common_1.getConfig)('tcbClientId'),
        env: (0, common_1.getConfig)('envID'),
        // "https://tcb-api.tencentcloudapi.com",
        apiOrigin: (0, common_1.getConfig)('tcbApiOrigin'),
        cache: null,
        platform: {
            runtime: (adapter === null || adapter === void 0 ? void 0 : adapter.runtime) || tcb_api_adapter_1.default.runtime,
            adapter: (adapter === null || adapter === void 0 ? void 0 : adapter.genAdapter()) || (await tcb_api_adapter_1.default.genAdapterAsync()),
        },
    });
    return authInstance;
}
function getAuthInitParams(app, defaultParams, adapter) {
    let adapterOptions = {};
    if (adapter) {
        const { genOauthAdaper = () => ({}) } = adapter;
        adapterOptions = genOauthAdaper({ generateOauthClientRequest: common_1.generateOauthClientRequest, OauthClientStorgeBase: common_1.OauthClientStorgeBase });
    }
    const { request: adapterRequest } = adapterOptions, restAdapterOptions = __rest(adapterOptions, ["request"]);
    const authBaseConfig = (0, config_1.generateAuthBaseConfig)(app);
    return Object.assign(Object.assign(Object.assign(Object.assign({ persistence: 'local', region: (0, common_1.getConfig)('region') || 'ap-shanghai' }, defaultParams), authBaseConfig), restAdapterOptions), { baseRequest: adapterRequest || authBaseConfig.baseRequest });
}
exports.getAuthInitParams = getAuthInitParams;
function getTcbAuth(app) {
    return (0, common_1.execOnce)(_getTcbAuth, app);
}
exports.getTcbAuth = getTcbAuth;
async function getAccessToken() {
    const { auth } = await (0, tcb_1.getTcbInstance)();
    return auth.getAccessToken();
}
exports.getAccessToken = getAccessToken;
