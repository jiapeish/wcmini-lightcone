"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getCustomWedaConfig = exports.judgePasswordFreeLogin = exports.anonymousSignIn = exports.getLoginState = exports.getTcbInstance = void 0;
/**
 * miniapp tcb 模块, 负责tcb的连接和认证相关处理
 */
const tcb_api_adapter_1 = __importDefault(require("./tcb-api-adapter"));
const tcb_auth_1 = require("./tcb-auth");
const common_1 = require("../common");
let isPwdFree = undefined; // 免密登录标志，避免重复请求
const ai = async () => {
    const env = (0, common_1.getConfig)('envID');
    const gatewayOrigin = (0, common_1.getConfig)('gatewayOrigin');
    const asyncRequire = (0, common_1.getConfig)('__asyncRequire__');
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const { reqClass: ReqClass } = await tcb_api_adapter_1.default.genAdapterAsync();
    const req = new ReqClass();
    const { createAi } = asyncRequire ? await asyncRequire('@cloudbase/ai') : require('@cloudbase/ai');
    return createAi({
        env,
        req,
        getAccessToken: tcb_auth_1.getAccessToken,
        baseUrl: gatewayOrigin, // 如果 `gatewayOrigin` 为空，函数内会用环境拼地址
    });
};
/** 内部获取tcb 实例方法 */
async function _getTcbInstance() {
    const env = (0, common_1.getConfig)();
    const requesthost = env.tcbApiOrigin ? env.tcbApiOrigin.replace(/^https?:\/\//, '') : '';
    const adapter = await (0, common_1._generatePrivatelinkAdapter)(env, requesthost);
    let app;
    if ((0, common_1.useTcbApi)()) {
        const asyncRequire = env.__asyncRequire__;
        const [jsSdkModule, { registerFunctions }, { registerStorage }, { registerAuth }, { registerAi }] = await Promise.all([
            asyncRequire ? asyncRequire('@cloudbase/js-sdk/app') : require('@cloudbase/js-sdk/app'),
            asyncRequire ? asyncRequire('@cloudbase/js-sdk/functions') : require('@cloudbase/js-sdk/functions'),
            asyncRequire ? asyncRequire('@cloudbase/js-sdk/storage') : require('@cloudbase/js-sdk/storage'),
            asyncRequire ? asyncRequire('@cloudbase/auth') : require('@cloudbase/auth'),
            asyncRequire ? asyncRequire('@cloudbase/ai') : require('@cloudbase/ai'),
        ]);
        let cloudbase = jsSdkModule.default || module;
        // eslint-disable-next-line @typescript-eslint/no-require-imports
        registerAuth(cloudbase);
        registerFunctions(cloudbase);
        registerStorage(cloudbase);
        registerAi(cloudbase);
        if (!adapter) {
            const mpAdapter = await tcb_api_adapter_1.default.genAdapterAsync();
            tcb_api_adapter_1.default.genAdapter = () => mpAdapter;
        }
        cloudbase.useAdapters(adapter || tcb_api_adapter_1.default);
        app = cloudbase.init({
            // 超时时间设置为 60s
            timeout: 60 * 1000,
            env: env.envID,
            // @ts-ignore
            clientId: env.tcbClientId || env.envID,
            region: env.region,
        });
        env.tcbApiOrigin && cloudbase.registerEndPoint(`//${requesthost}/web`);
        const authInstance = app.auth((0, tcb_auth_1.getAuthInitParams)(app, { anonymousSignInFunc: anonymousSignIn }, adapter));
        return {
            app,
            auth: authInstance,
        };
    }
    else {
        if (env.resourceAppid) {
            // @ts-ignore
            app = wx.cloud.Cloud({
                resourceAppid: env.resourceAppid,
                resourceEnv: env.envID,
            });
            await app.init();
        }
        else {
            // @ts-ignore
            app = wx.cloud;
            app.init({
                env: env.envID,
            });
        }
        if (app.ai) {
            app._ai = app.ai;
        }
        app.ai = ai;
        return {
            app,
            auth: await (0, tcb_auth_1.getTcbAuth)(app),
        };
    }
}
/**
 * 获取 tcb 实例, 不进行登录操作
 * @returns {Promise<{app: tcb.app.App}>}
 */
function getTcbInstance() {
    return (0, common_1.execOnce)(_getTcbInstance);
}
exports.getTcbInstance = getTcbInstance;
async function getLoginState() {
    const { auth } = await getTcbInstance();
    // @ts-ignore
    let loginState;
    try {
        await auth.getAccessToken();
        loginState = true;
    }
    catch (e) { }
    let loginScope;
    try {
        loginScope = await auth.loginScope();
    }
    catch (e) { }
    return {
        notLogin: !loginState,
        // isAnonymous: !loginState && loginScope === 'anonymous', // 小程序未登录 匿名 都是 匿名
        isAnonymous: !loginState || loginScope === 'anonymous',
        hasLogin: !!loginState && loginScope !== 'anonymous',
    };
}
exports.getLoginState = getLoginState;
async function anonymousSignIn() {
    const { auth } = await getTcbInstance();
    // @ts-ignore
    const { code } = await wx.login();
    // @ts-ignore
    const { appId } = wx.getAccountInfoSync().miniProgram;
    // eslint-disable-next-line @typescript-eslint/naming-convention
    const { provider_token } = await auth.grantProviderToken({
        provider_id: appId,
        provider_code: code,
    });
    await auth.signInAnonymously({ provider_token });
}
exports.anonymousSignIn = anonymousSignIn;
/**
 * @deprecated
 * 此处技术方案已废弃，不再基于 subprovider_type 判断免密登录
 * 判断是否是免密登录
 */
async function judgePasswordFreeLogin() {
    if (isPwdFree !== undefined)
        return isPwdFree;
    try {
        const { auth } = await getTcbInstance();
        const { appId } = wx.getAccountInfoSync().miniProgram;
        const res = await auth.getProviderSubType({
            provider_id: appId,
        });
        isPwdFree = (res === null || res === void 0 ? void 0 : res.provider_sub_type) === 'NO_AUTH_LOGIN';
        return isPwdFree;
    }
    catch (error) {
        console.log('========> judgePasswordFreeLogin error', error);
        return false;
    }
}
exports.judgePasswordFreeLogin = judgePasswordFreeLogin;
function getCustomWedaConfig() {
    const customConfig = (0, common_1.getConfig)('customConfig') || {};
    return customConfig;
}
exports.getCustomWedaConfig = getCustomWedaConfig;
