"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __exportStar = (this && this.__exportStar) || function(m, exports) {
    for (var p in m) if (p !== "default" && !Object.prototype.hasOwnProperty.call(exports, p)) __createBinding(exports, m, p);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.initTcb = exports.getTcbInstance = exports.CLOUD_SDK = exports.getAccessToken = void 0;
const index_cover_1 = require("../index-cover");
const tcb_1 = require("./tcb");
const common_1 = require("../common");
const user_1 = __importDefault(require("./user"));
const tcb_auth_1 = require("./tcb-auth");
Object.defineProperty(exports, "getAccessToken", { enumerable: true, get: function () { return tcb_auth_1.getAccessToken; } });
exports.CLOUD_SDK = Object.assign(index_cover_1.CLOUD_API, user_1.default);
// currentUser 为 getter 属性, object.assign 会丢 getter 特性
//    在此重新设置上
Object.defineProperty(exports.CLOUD_SDK, 'currentUser', {
    get() {
        return user_1.default.currentUser;
    },
});
var tcb_2 = require("./tcb");
Object.defineProperty(exports, "getTcbInstance", { enumerable: true, get: function () { return tcb_2.getTcbInstance; } });
// export { initTcb } from './tcb';
__exportStar(require("../index-cover"), exports);
// eslint-disable-next-line @typescript-eslint/naming-convention
async function _init() {
    var _a;
    const { app, auth } = await (0, tcb_1.getTcbInstance)();
    const loginState = await (0, tcb_1.getLoginState)();
    let userType = loginState.isAnonymous || loginState.notLogin ? 'anonymousUser' : 'externalUser';
    const { miniProgram } = wx.getAccountInfoSync();
    let providerId = miniProgram === null || miniProgram === void 0 ? void 0 : miniProgram.appId;
    let needSignIn = true;
    const customWedaConfig = (0, tcb_1.getCustomWedaConfig)();
    const defaultLogin = async () => {
        if ((0, common_1.useTcbApi)() && loginState.notLogin) {
            await (0, tcb_1.anonymousSignIn)();
        }
        else if (!(0, common_1.useTcbApi)()) {
            // 根据配置决定是否使用openId登录
            if ((0, common_1.getConfig)('__defaultLoginType__') === 'openId') {
                await user_1.default.openIdLoginInWxApp();
                // openIdLoginInWxApp 已经完成了singIn动作，不重复signIn
                needSignIn = false;
                userType = 'externalUser';
            }
        }
    };
    if (userType == 'anonymousUser') {
        if ((customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.login) && (!loginState.hasLogin || (customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.forceLogin))) {
            needSignIn = !!((_a = customWedaConfig === null || customWedaConfig === void 0 ? void 0 : customWedaConfig.loginConfig) === null || _a === void 0 ? void 0 : _a.needSignIn);
            await customWedaConfig.login({ app, auth, loginState, defaultLogin });
        }
        else {
            await defaultLogin();
        }
    }
    if (needSignIn) {
        const failedToSign = (err) => {
            console.warn('[weda-cloud-sdk] failed to sign-in/getUserInfo weda backend', err);
        };
        await user_1.default.signIn({ userType, force: true, providerId }).catch(failedToSign);
    }
    if (app.auth) {
        app._auth = app.auth;
    }
    app.auth = auth;
    return {
        app,
        auth,
    };
}
async function initTcb() {
    return (0, common_1.execOnce)(_init);
}
exports.initTcb = initTcb;
(0, index_cover_1.setConfig)({ initTcb });
