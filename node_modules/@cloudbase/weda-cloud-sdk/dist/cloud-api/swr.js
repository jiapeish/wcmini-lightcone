"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.judgeToClearCache = exports.CACHE_FILTER_METHOD = exports.CACHE_METHOD = exports.DEFAULT_CACHE_TIME = void 0;
let cache = new Map(); // 缓存数据
exports.DEFAULT_CACHE_TIME = 20000; // 默认缓存20s
exports.CACHE_METHOD = [
    'wedaGetItem',
    'wedaGetRecords',
    'wedaGetItemV2',
    'wedaGetRecordsV2',
    'getApiKey',
];
exports.CACHE_FILTER_METHOD = [
    'callWedaApi',
];
const judgeToClearCache = (params) => {
    const { methodName } = (params === null || params === void 0 ? void 0 : params.data) || {};
    if (!exports.CACHE_METHOD.includes(methodName) && !exports.CACHE_FILTER_METHOD.includes(methodName)) {
        cache = new Map();
    }
};
exports.judgeToClearCache = judgeToClearCache;
const swr = async (params, fetcher, options = {}, swrKey) => {
    // let swrState = 'match';
    const { cacheTime } = options || {};
    const { methodName, dataSourceName, action } = params.data || {};
    const time = cacheTime || exports.DEFAULT_CACHE_TIME;
    const category = swrKey || `${methodName}_${dataSourceName || action}`;
    const cacheKey = JSON.stringify(params);
    const categoryMap = cache.get(category) || new Map();
    if (options.forceClear) {
        categoryMap.delete(cacheKey);
    }
    // 首先从缓存中获取
    const data = categoryMap.get(cacheKey) || {
        value: null,
        time: 0,
        promise: null,
    };
    // 写入缓存
    categoryMap.set(cacheKey, data);
    cache.set(category, categoryMap);
    // 是否过期
    const isStaled = Date.now() - data.time > time;
    // 已经过期了，且也没有在请求中，需要发送请求
    if (isStaled && !data.promise) {
        // swrState = 'miss';
        data.promise = fetcher(params)
            .then((val) => {
            data.value = val;
            data.time = Date.now(); // 保存获取到数据的时间
            data.promise = null;
        })
            .catch((err) => {
            data.value = err;
            data.time = Date.now() - time; // 失败则自动过期
            data.promise = null;
        });
    }
    else if (data.promise) {
        // swrState = 'reuse';
    }
    else if (!data.value) {
        // swrState = 'pending';
    }
    // 没有数据，但正在请求中，复用保存的 promise
    if (data.promise && !data.value) {
        await data.promise;
    }
    // 返回数据
    return data.value;
};
exports.default = swr;
