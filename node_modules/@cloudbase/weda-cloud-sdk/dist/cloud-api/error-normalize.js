"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.normalizeMessage = void 0;
/**
 * 错误信息标准化
 */
const common_1 = require("../common");
/**
 * 标准化错误信息, 将错误信息变为可读性的信息
 */
function normalizeMessage(e, messageMap) {
    // TCB 错误
    // 云函数有语法错误时, 云开发 js-sdk 拿到的错误对象结构错误, code message 均在 e.message 中
    //  在此做兼容处理
    if (e.code === 'OPERATION_FAIL' || /OPERATION_FAIL/.test(e.message)) {
        if (/FUNCTION_NOT_FOUND/.test(e.message)) {
            const message = (messageMap === null || messageMap === void 0 ? void 0 : messageMap.FUNCTION_NOT_FOUND) || '找不到数据源的云函数';
            return new common_1.TCBError('FUNCTION_NOT_FOUND', message, e);
        }
        if (/FUNCTIONS_EXECUTE_FAIL/.test(e.message)) {
            const message = (messageMap === null || messageMap === void 0 ? void 0 : messageMap.FUNCTIONS_EXECUTE_FAIL) || '云函数执行失败';
            return new common_1.TCBError('FUNCTIONS_EXECUTE_FAIL', message, e);
        }
    }
    if (/network request error/.test(e.message)) {
        return new common_1.TCBError('NETWORK_ERROR', '网络故障, 请检查本地网络连接是否正常', e);
    }
    if (/method .* not found in datasource/i.test(e.message)) {
        const message = (messageMap === null || messageMap === void 0 ? void 0 : messageMap.DS_METHOD_NOT_FOUND) || '找不到数据源的方法';
        return new common_1.TCBError('DS_METHOD_NOT_FOUND', message, e);
    }
    if (messageMap === null || messageMap === void 0 ? void 0 : messageMap.DEFAULT_ERROR) {
        return new common_1.TCBError(e.code || 'DEFAULT_ERROR', messageMap.DEFAULT_ERROR, e);
    }
    return e;
}
exports.normalizeMessage = normalizeMessage;
