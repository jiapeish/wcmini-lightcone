"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.standardizeDs = exports.getDataSourceProfileAsync = exports.getDataSourceProfile = exports.callWedaApi = exports.checkAuth = exports.callWorkflow = exports.callCommonService = void 0;
const basic_api_1 = require("./basic-api");
const error_normalize_1 = require("./error-normalize");
const common_1 = require("../common");
/**
 * 获取swr的信息
 * @param swrOptions
 * @param methodName
 * @returns
 */
const getSwrInfo = (swrOptions) => {
    if (swrOptions && Object.keys(swrOptions).length) {
        return Object.assign({ swrMode: true }, swrOptions);
    }
    return undefined;
};
/**
 * 调用数据源公共云函数(lcap-common-service)中提供的方法
 */
async function callCommonService(params, app) {
    const paramsTemp = (0, common_1.deepClone)(params);
    const swr = (0, common_1.deepClone)(paramsTemp.swr || {});
    delete paramsTemp.swr;
    return (0, basic_api_1.callFunction)({
        name: (0, common_1.getCommonCloudFnName)(),
        data: Object.assign(Object.assign({}, paramsTemp), { mode: 'c' }),
    }, {
        app,
        unwrapResult: true,
        parseBusinessInfo: true,
        swr,
    }).catch((e) => {
        throw (0, error_normalize_1.normalizeMessage)(e, {
            FUNCTION_NOT_FOUND: '微搭环境异常: 未找到数据源公共云函数',
            FUNCTIONS_EXECUTE_FAIL: '微搭环境异常: 数据源公共云函数调用失败',
        });
    });
}
exports.callCommonService = callCommonService;
/**
 * 调用流程
 */
async function callWorkflow(params) {
    return callWedaApi(params);
}
exports.callWorkflow = callWorkflow;
/**
 * 检查权限
 */
function checkAuth(params) {
    return callWedaApi({
        action: 'DescribeWedaAccessResourcesByType',
        data: params,
    });
}
exports.checkAuth = checkAuth;
/**
 * 调用微搭API
 */
async function callWedaApi(params) {
    const paramsTemp = (0, common_1.deepClone)(params);
    if (params) {
        delete paramsTemp.swr;
    }
    return callCommonService({
        methodName: 'callWedaApi',
        params: paramsTemp,
        // 默认对 SWR_ACTION_DEFAULT 中的方法都开启swr
        swr: getSwrInfo(params === null || params === void 0 ? void 0 : params.swr),
    }).then((res) => res.Data);
}
exports.callWedaApi = callWedaApi;
/**
 * 根据数据源名称查询数据源信息(同步, 已废弃)
 * @deprecated use `getDataSourceProfileAsync` instead
 */
function getDataSourceProfile(options) {
    const dataSourceProfiles = (0, common_1.getConfig)('dataSourceProfiles');
    if (!dataSourceProfiles || !dataSourceProfiles.length) {
        console.warn('[weda-cloud-sdk]datasource profile is empty');
        return;
    }
    const newOptions = typeof options === 'string' ? { val: options, key: 'name' } : options;
    const filter = typeof newOptions === 'function' ? newOptions : (item) => item && item[newOptions.key] === newOptions.val;
    return dataSourceProfiles.find(filter);
}
exports.getDataSourceProfile = getDataSourceProfile;
/**
 * 缓存查询结果
 *  key 为查询条件, value 为结果
 *  key 为 _ 的则存储结果的数组, 方便单独查询 dsName 时从中查询使用
 */
const CACHED_DS_PROFILE = {
    _: [],
};
/**
 * 根据数据源名称查询数据源信息(异步)
 */
async function getDataSourceProfileAsync(dsName) {
    const isDsName = typeof dsName === 'string';
    const query = isDsName ? { Name: dsName } : dsName;
    const cachedKey = JSON.stringify(query);
    if (CACHED_DS_PROFILE[cachedKey])
        return simpleClone(CACHED_DS_PROFILE[cachedKey]);
    if (isDsName) {
        const dsProfile = CACHED_DS_PROFILE._.find((item) => item.name === dsName);
        if (dsProfile)
            return simpleClone(dsProfile);
    }
    const dataSourceProfiles = (0, common_1.getConfig)('dataSourceProfiles');
    if ((dataSourceProfiles === null || dataSourceProfiles === void 0 ? void 0 : dataSourceProfiles.length) && isDsName) {
        const dsProfile = dataSourceProfiles.find((item) => item.name === dsName);
        if (dsProfile)
            return simpleClone(dsProfile);
    }
    const { swrMode } = query;
    delete query.swrMode;
    const res = await callWedaApi({
        action: 'RuntimeDescribeDataSource',
        // @ts-ignore
        data: query,
        swr: { swrMode },
    });
    const result = standardizeDs(res);
    CACHED_DS_PROFILE[cachedKey] = result;
    CACHED_DS_PROFILE._.push(result);
    return simpleClone(result);
}
exports.getDataSourceProfileAsync = getDataSourceProfileAsync;
function simpleClone(obj) {
    return JSON.parse(JSON.stringify(obj));
}
function standardizeDs(ds) {
    const result = {};
    Object.keys(ds).reduce((acc, key) => {
        const camelCase = key.charAt(0).toLowerCase() + key.slice(1);
        acc[camelCase] = ds[key];
        return acc;
    }, result);
    const keysNeedParse = {
        schema: {},
        methods: [],
    };
    Object.keys(keysNeedParse).forEach((k) => {
        try {
            result[k] = JSON.parse(result[k]);
        }
        catch (error) {
            // @ts-ignore
            result[k] = keysNeedParse[k];
        }
    });
    return result;
}
exports.standardizeDs = standardizeDs;
