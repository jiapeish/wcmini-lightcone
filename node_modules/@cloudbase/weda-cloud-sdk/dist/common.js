"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepMerge = exports._generatePrivatelinkAdapter = exports.getUrlPath = exports.generateOauthClientRequest = exports.OauthClientStorgeBase = exports.getDatasetProfiles = exports.setDatasetProfiles = exports.deepClone = exports.isObject = exports.isString = exports.PromiseAllSettled = exports.useTcbApi = exports.createSetDefaultParams = exports.getDefaultParams = exports.setDefaultParams = exports.pick = exports.execOnce = exports.isSameArray = exports.getCommonCloudFnName = exports.getDatasourceCloudFnName = exports.setConfig = exports.getDataSourceViewId = exports.getConfig = exports.DATASET_CONTEXT = exports.hasOwn = exports.TCBError = void 0;
/**
 * 横跨多包的公共 工具文件
 */
/** 预置的错误对象, 可用该对象抛出自定义错误代码及错误信息 */
class TCBError extends Error {
    constructor(code, message, original) {
        super(message);
        this.code = code;
        this.name = 'TCBError';
        this.original = original;
    }
}
exports.TCBError = TCBError;
/**
 * 对象 obj 是否拥有 key
 */
function hasOwn(obj, key) {
    if (!obj)
        return false;
    return Object.prototype.hasOwnProperty.call(obj, key);
}
exports.hasOwn = hasOwn;
/**
 * 应用所有变量的管理对象
 *  key 为页面id(全局为$global)
 */
exports.DATASET_CONTEXT = {};
let appConfig;
function getConfig(k) {
    if (!appConfig)
        throw new Error('app config not inited');
    return k ? appConfig[k] : appConfig;
}
exports.getConfig = getConfig;
/**
 * 根据数据源名称查询数据源对应的viewId
 */
function getDataSourceViewId() {
    return;
}
exports.getDataSourceViewId = getDataSourceViewId;
/**
 * 更新配置 内部使用
 *  对外暴露的 setConfig 在 ./index-cover 中
 * @param config
 */
// eslint-disable-next-line @typescript-eslint/naming-convention
function setConfig(config) {
    appConfig = Object.assign(appConfig || {}, config);
}
exports.setConfig = setConfig;
/**
 * 获取数据源云函数名称
 * @param dataSourceName 数据源名称, 如果为数据源的云函数, 则该值必填, 以避免不同数据源云函数间重名
 */
function getDatasourceCloudFnName(dsKeyInfo) {
    if (appConfig.useLegacyDatasource) {
        return `lcap-${dsKeyInfo.id}-${dsKeyInfo.name}${appConfig.isProd ? '' : '-preview'}`;
    }
    return `lowcode-datasource${appConfig.isProd ? '' : '-preview'}`;
}
exports.getDatasourceCloudFnName = getDatasourceCloudFnName;
/**
 * 获取数据源公共云函数名称
 * @param needNewFeature 是否为新特性, 新特性只能使用合并后的云函数
 */
function getCommonCloudFnName(needNewFeature) {
    if (!needNewFeature && appConfig.useLegacyDatasource) {
        return 'lcap-common-service';
    }
    return `lowcode-datasource${appConfig.isProd ? '' : '-preview'}`;
}
exports.getCommonCloudFnName = getCommonCloudFnName;
/**
 * 浅比较两个数组是否相等
 */
function isSameArray(arr1, arr2) {
    if (arr1.length !== arr2.length)
        return false;
    return arr1.every((val, idx) => val === arr2[idx]);
}
exports.isSameArray = isSameArray;
const tasks = [];
/**
 * 同一个函数、同样的参数只执行一次
 */
function execOnce(fn, ...args) {
    const task = tasks.find((task) => task[0] === fn && isSameArray(task[1], args));
    if (task)
        return task[2];
    const p = fn(...args);
    tasks.push([fn, args, p]);
    return p;
}
exports.execOnce = execOnce;
/**
 * 从对象 value 取出 key 在 keys 中的项, 返回新对象
 * @param obj 值
 * @param keys 字段名称数组
 */
function pick(obj, keys) {
    if (!obj)
        return obj;
    const result = {};
    return keys.reduce((acc, key) => {
        if (hasOwn(obj, key)) {
            acc[key] = obj[key];
        }
        return acc;
    }, result);
}
exports.pick = pick;
/** 数据源默认参数 */
const DS_DEFAULT_PARAMS = {};
/** 设置默认参数 */
function setDefaultParams(dsName, params) {
    DS_DEFAULT_PARAMS[dsName] = params;
}
exports.setDefaultParams = setDefaultParams;
/**
 * 获取默认参数
 * @param dsName 数据源名称
 * @param options 数据源方法的参数 {methodName, params}, 当默认参数为函数时可接用于修改参数
 * @returns
 */
function getDefaultParams(dsName, options) {
    const val = DS_DEFAULT_PARAMS[dsName];
    if (!val || typeof val !== 'function')
        return val;
    return val(options);
}
exports.getDefaultParams = getDefaultParams;
/**
 * 生成单个数据源的设置默认参数方法
 * @param dsName 数据源名称
 * @returns
 */
function createSetDefaultParams(dsName) {
    return (params) => {
        setDefaultParams(dsName, params);
    };
}
exports.createSetDefaultParams = createSetDefaultParams;
/**
 * 后端链路是否采用tcb api, 小程序需要使用js-sdk
 * tcb-api 强制走tcb api链路，目前用于小程序全托管模式（非小程序私密链路）
 */
function useTcbApi() {
    return getConfig('endpointType') === 'tcb-api';
}
exports.useTcbApi = useTcbApi;
/**
 * 替代Promise.allSettled，主要考虑兼容性
 * @param promises
 * @returns
 */
function PromiseAllSettled(promises) {
    const resolveHandler = (value) => ({
        status: 'fulfilled',
        value,
    });
    const rejectHandler = (reason) => ({
        status: 'rejected',
        reason,
    });
    return Promise.all(promises.map((promise) => Promise.resolve(promise).then(resolveHandler, rejectHandler)));
}
exports.PromiseAllSettled = PromiseAllSettled;
function isString(val) {
    return typeof val === 'string';
}
exports.isString = isString;
function isObject(val) {
    return Object.prototype.toString.call(val) === '[object Object]';
}
exports.isObject = isObject;
/**
 * 深拷贝
 * @param {*} value 需要拷贝的值
 * @returns {*} 深拷贝后的值
 * @example
 * const obj = { a: 1, b: { c: 2 } };
 * const newObj = deepClone(obj);
 */
const deepClone = (value) => {
    const clone = (copiedValue) => {
        for (const key in value) {
            // eslint-disable-next-line no-prototype-builtins
            if (value.hasOwnProperty(key)) {
                copiedValue[key] = (0, exports.deepClone)(value[key]);
            }
        }
        return copiedValue;
    };
    const type = value === null || value === undefined ? 'NullOrUndefined' : Object.prototype.toString.call(value).slice(8, -1);
    if ([
        'Int8Array',
        'Uint8Array',
        'Uint8ClampedArray',
        'Int16Array',
        'Uint16Array',
        'Int32Array',
        'Uint32Array',
        'Float32Array',
        'Float64Array',
        'BigInt64Array',
        'BigUint64Array',
    ].includes(type)) {
        return value.slice();
    }
    switch (type) {
        case 'Object':
            return clone(Object.create(Object.getPrototypeOf(value)));
        case 'Array':
            return clone([]);
        case 'Date':
            return new Date(value.valueOf());
        case 'RegExp':
            return new RegExp(value.source, `${value.global ? 'g' : ''}${value.ignoreCase ? 'i' : ''}${value.multiline ? 'm' : ''}${value.sticky ? 'y' : ''}${value.unicode ? 'u' : ''}`);
        default:
            return value;
    }
};
exports.deepClone = deepClone;
function setDatasetProfiles(obj) {
    setConfig({
        datasetProfiles: Object.assign(getConfig('datasetProfiles') || {}, obj),
    });
}
exports.setDatasetProfiles = setDatasetProfiles;
function getDatasetProfiles(key) {
    const datasetProfiles = getConfig('datasetProfiles');
    return key ? datasetProfiles[key] : datasetProfiles;
}
exports.getDatasetProfiles = getDatasetProfiles;
/**
 * 此处为了打包引用方便
 * copy from https://git.woa.com/QBase/client-side-sdk/tcb-js-sdk-adapters/cloudbase-adapter-privatelink.git/src/oauth
 * 同步修改
 */
class OauthClientStorgeBase {
    constructor(config) {
        this.localStorage = (config === null || config === void 0 ? void 0 : config.localStorage) || globalThis.localStorage;
    }
    /**
     * Get Item
     * @param {string} key
     * @return {Promise<string | null>}
     */
    async getItem(key) {
        return this.localStorage.getItem(key);
    }
    /**
     * Remove Item.
     * @param {string} key
     * @return {Promise<void>}
     */
    async removeItem(key) {
        this.localStorage.removeItem(key);
    }
    /**
     * Set Item.
     * @param {string} key
     * @param {string} value
     * @return {Promise<void>}
     */
    async setItem(key, value) {
        this.localStorage.setItem(key, value);
    }
    getItemSync(key) {
        return this.localStorage.getItem(key);
    }
    setItemSync(key, value) {
        this.localStorage.setItem(key, value);
    }
    removeItemSync(key) {
        this.localStorage.removeItem(key);
    }
}
exports.OauthClientStorgeBase = OauthClientStorgeBase;
/**
 * 此处为了打包引用方便
 * copy from https://git.woa.com/QBase/client-side-sdk/tcb-js-sdk-adapters/cloudbase-adapter-privatelink.git/src/oauth
 * 同步修改
 */
const URL_REG = /^[^:]+:\/\/[^/]+(\/[^?#]+)/;
function generateOauthClientRequest(request) {
    if (!request) {
        return undefined;
    }
    return async function (url, options) {
        var _a;
        let resp;
        const requestId = (_a = options === null || options === void 0 ? void 0 : options.headers) === null || _a === void 0 ? void 0 : _a['x-request-id'];
        try {
            // Objects must be copied to prevent modification of data such as body.
            const copyOptions = Object.assign({}, options);
            if (copyOptions.body && typeof copyOptions.body !== 'string') {
                copyOptions.body = JSON.stringify(copyOptions.body);
            }
            resp = await request(Object.assign(Object.assign({}, copyOptions), { url, method: copyOptions.method || 'GET' }));
            if (resp.code) {
                resp = {
                    error: resp.code,
                    error_description: resp.message || resp.code,
                    request_id: resp.requestId,
                };
            }
        }
        catch (error) {
            resp = {
                error: 'unreachable',
                error_description: error.message,
            };
        }
        if (!resp.request_id) {
            resp.request_id = requestId;
        }
        if (resp.error) {
            resp.error_uri = getUrlPath(url);
            throw resp;
        }
        return resp;
    };
}
exports.generateOauthClientRequest = generateOauthClientRequest;
/**
 * Get url path.
 * @param {string} url
 * @return {string}
 */
function getUrlPath(url) {
    // return path if matched, or original url
    return URL_REG.test(url) ? RegExp.$1 : url;
}
exports.getUrlPath = getUrlPath;
async function _generatePrivatelinkAdapter(env, host) {
    if (env.privatelink) {
        let privatelinkAdapter = undefined;
        if (env.getPrivatelinkAdapter) {
            const res = await env.getPrivatelinkAdapter();
            if (res) {
                privatelinkAdapter = res;
            }
        }
        else {
            try {
                privatelinkAdapter = typeof window !== 'undefined' ? window.tcbAdapterPrivatelink : undefined;
            }
            catch (e) { }
        }
        const adapter = (privatelinkAdapter === null || privatelinkAdapter === void 0 ? void 0 : privatelinkAdapter.generateAdapterWithConfig)
            ? privatelinkAdapter.generateAdapterWithConfig({
                __privatelink_config__: Object.assign({ pathname: '/tcb_private_link' }, env.privatelink),
                __tcbAPIEdnpointReg__: host ? new RegExp(host.replace(/[.*+?^${}()|[\]\\]/g, '\\$&')) : undefined,
            })
            : undefined;
        return adapter;
    }
    return undefined;
}
exports._generatePrivatelinkAdapter = _generatePrivatelinkAdapter;
function deepMerge(obj1, obj2) {
    const result = Object.assign({}, obj1);
    Object.keys(obj2).forEach((key) => {
        // eslint-disable-next-line no-prototype-builtins
        if (obj2.hasOwnProperty(key)) {
            if (typeof obj2[key] === 'object' && !Array.isArray(obj2[key]) && typeof result[key] === 'object') {
                result[key] = deepMerge(result[key], obj2[key]);
            }
            else {
                result[key] = obj2[key];
            }
        }
    });
    return result;
}
exports.deepMerge = deepMerge;
