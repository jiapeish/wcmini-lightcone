"use strict";
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LRUCache_instances, _LRUCache_maxSize, _LRUCache_map, _LRUCache_head, _LRUCache_tail, _LRUCache_sizeCalculation, _LRUCache_moveToHead, _LRUCache_delteFromTail, _LRUCache_get;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LRUCache = void 0;
class LRUCache {
    constructor({ map = new Map(), size, sizeCalculation = () => 1, onInit, }) {
        _LRUCache_instances.add(this);
        _LRUCache_maxSize.set(this, 0);
        _LRUCache_map.set(this, void 0);
        _LRUCache_head.set(this, void 0);
        _LRUCache_tail.set(this, void 0);
        _LRUCache_sizeCalculation.set(this, void 0);
        this.calculatedSize = 0;
        __classPrivateFieldSet(this, _LRUCache_maxSize, size || 0, "f");
        __classPrivateFieldSet(this, _LRUCache_map, map, "f");
        __classPrivateFieldSet(this, _LRUCache_sizeCalculation, sizeCalculation, "f");
        this.calculatedSize = 0;
        __classPrivateFieldSet(this, _LRUCache_head, null, "f");
        __classPrivateFieldSet(this, _LRUCache_tail, null, "f");
        if (onInit) {
            onInit(this);
        }
        return this;
    }
    list() {
        var _a;
        let p = __classPrivateFieldGet(this, _LRUCache_head, "f");
        const list = [];
        while (p === null || p === void 0 ? void 0 : p.data) {
            list.push({ key: p.data.key, value: (_a = __classPrivateFieldGet(this, _LRUCache_instances, "m", _LRUCache_get).call(this, p.data.key)) === null || _a === void 0 ? void 0 : _a.value });
            p = p.next;
        }
        // p = this.#tail;
        // let index = 0;
        // while (p?.data) {
        //   if (p.data.key !== list[list.length - 1 - index]?.key) {
        //     console.log(p.data.key, index, list);
        //     throw new Error('invali list');
        //   }
        //   index += 1;
        //   p = p.pre;
        // }
        return list;
    }
    get(key, options) {
        const meta = __classPrivateFieldGet(this, _LRUCache_instances, "m", _LRUCache_get).call(this, key, options);
        return meta === null || meta === void 0 ? void 0 : meta.value;
    }
    set(key, value, options) {
        var _a;
        const size = __classPrivateFieldGet(this, _LRUCache_sizeCalculation, "f").call(this, value, key);
        if (size > __classPrivateFieldGet(this, _LRUCache_maxSize, "f")) {
            __classPrivateFieldGet(this, _LRUCache_map, "f").delete(key);
            this.calculatedSize -= size;
            return;
        }
        // @ts-ignore
        const oldMeta = __classPrivateFieldGet(this, _LRUCache_instances, "m", _LRUCache_get).call(this, key, options);
        const oldNode = oldMeta === null || oldMeta === void 0 ? void 0 : oldMeta.node;
        const delta = size - (((_a = oldNode === null || oldNode === void 0 ? void 0 : oldNode.data) === null || _a === void 0 ? void 0 : _a.size) || 0);
        if (!oldNode) {
            const node = new Node(key, __classPrivateFieldGet(this, _LRUCache_sizeCalculation, "f").call(this, value, key));
            if (__classPrivateFieldGet(this, _LRUCache_head, "f") == null && __classPrivateFieldGet(this, _LRUCache_tail, "f") === null) {
                __classPrivateFieldSet(this, _LRUCache_tail, node, "f");
            }
            node.next = __classPrivateFieldGet(this, _LRUCache_head, "f");
            if (__classPrivateFieldGet(this, _LRUCache_head, "f")) {
                __classPrivateFieldGet(this, _LRUCache_head, "f").pre = node;
            }
            __classPrivateFieldSet(this, _LRUCache_head, node, "f");
            // @ts-ignore
            __classPrivateFieldGet(this, _LRUCache_map, "f").set(key, { node, value }, options);
        }
        else {
            oldNode.data.size = size;
            // @ts-ignore
            __classPrivateFieldGet(this, _LRUCache_map, "f").set(key, { node: oldNode, value }, options);
        }
        __classPrivateFieldGet(this, _LRUCache_instances, "m", _LRUCache_delteFromTail).call(this, this.calculatedSize + delta - __classPrivateFieldGet(this, _LRUCache_maxSize, "f"));
        this.calculatedSize = this.calculatedSize + delta;
    }
    delete(key) {
        const res = __classPrivateFieldGet(this, _LRUCache_map, "f").get(key);
        if (res) {
            if (__classPrivateFieldGet(this, _LRUCache_head, "f") === res.node) {
                __classPrivateFieldSet(this, _LRUCache_head, res.node.next, "f");
            }
            if (__classPrivateFieldGet(this, _LRUCache_tail, "f") === res.node) {
                __classPrivateFieldSet(this, _LRUCache_tail, res.node.pre, "f");
            }
            if (res.node.pre) {
                res.node.pre.next = res.node.next;
            }
            if (res.node.next) {
                res.node.next.pre = res.node.pre;
            }
            res.node.pre = null;
            res.node.next = null;
            this.calculatedSize = this.calculatedSize - res.node.data.size;
            __classPrivateFieldGet(this, _LRUCache_map, "f").delete(key);
        }
    }
}
exports.LRUCache = LRUCache;
_LRUCache_maxSize = new WeakMap(), _LRUCache_map = new WeakMap(), _LRUCache_head = new WeakMap(), _LRUCache_tail = new WeakMap(), _LRUCache_sizeCalculation = new WeakMap(), _LRUCache_instances = new WeakSet(), _LRUCache_moveToHead = function _LRUCache_moveToHead(node) {
    if (__classPrivateFieldGet(this, _LRUCache_tail, "f") === node) {
        if (node.next) {
            __classPrivateFieldSet(this, _LRUCache_tail, node.next, "f");
        }
        else if (node.pre) {
            __classPrivateFieldSet(this, _LRUCache_tail, node.pre, "f");
        }
    }
    if (node !== __classPrivateFieldGet(this, _LRUCache_head, "f")) {
        if (node.pre) {
            node.pre.next = node.next;
        }
        if (node.next) {
            node.next.pre = node.pre;
        }
        node.next = __classPrivateFieldGet(this, _LRUCache_head, "f");
        node.pre = null;
        if (__classPrivateFieldGet(this, _LRUCache_head, "f")) {
            __classPrivateFieldGet(this, _LRUCache_head, "f").pre = node;
        }
        __classPrivateFieldSet(this, _LRUCache_head, node, "f");
    }
}, _LRUCache_delteFromTail = function _LRUCache_delteFromTail(delta) {
    while (delta > 0 && __classPrivateFieldGet(this, _LRUCache_tail, "f")) {
        const { size } = __classPrivateFieldGet(this, _LRUCache_tail, "f").data;
        __classPrivateFieldGet(this, _LRUCache_map, "f").delete(__classPrivateFieldGet(this, _LRUCache_tail, "f").data.key);
        if (__classPrivateFieldGet(this, _LRUCache_tail, "f").pre) {
            __classPrivateFieldGet(this, _LRUCache_tail, "f").pre.next = null;
            __classPrivateFieldSet(this, _LRUCache_tail, __classPrivateFieldGet(this, _LRUCache_tail, "f").pre, "f");
        }
        else {
            __classPrivateFieldSet(this, _LRUCache_tail, null, "f");
        }
        delta -= size;
        this.calculatedSize -= size;
    }
}, _LRUCache_get = function _LRUCache_get(key, options) {
    // @ts-ignore
    const res = __classPrivateFieldGet(this, _LRUCache_map, "f").get(key, options);
    if (res === null || res === void 0 ? void 0 : res.node) {
        __classPrivateFieldGet(this, _LRUCache_instances, "m", _LRUCache_moveToHead).call(this, res === null || res === void 0 ? void 0 : res.node);
    }
    return res;
};
class Node {
    constructor(key, size) {
        this.data = { key, size };
        this.pre = null;
        this.next = null;
    }
}
