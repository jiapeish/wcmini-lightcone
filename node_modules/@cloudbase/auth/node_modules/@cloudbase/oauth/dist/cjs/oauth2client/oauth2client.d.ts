import { ErrorType } from './consts';
import { AuthClient, SimpleStorage } from './interface';
import { Credentials, ResponseError, RequestFunction, OAuth2ClientOptions, AuthClientRequestOptions } from './models';
export interface ToResponseErrorOptions {
    error?: ErrorType;
    error_description?: string | null;
    error_uri?: string | null;
    details?: any | null;
}
export declare const defaultRequest: RequestFunction;
export declare const toResponseError: (error: ResponseError | Error, options?: ToResponseErrorOptions) => ResponseError;
export declare function generateRequestId(): string;
declare class DefaultStorage implements SimpleStorage {
    getItem(key: string): Promise<string | null>;
    removeItem(key: string): Promise<void>;
    setItem(key: string, value: string): Promise<void>;
    getItemSync(key: string): string | null;
    removeItemSync(key: string): void;
    setItemSync(key: string, value: string): void;
}
export declare const defaultStorage: DefaultStorage;
interface LocalCredentialsOptions {
    tokenSectionName: string;
    storage: SimpleStorage;
}
export declare class LocalCredentials {
    private tokenSectionName;
    private storage;
    private credentials;
    private singlePromise;
    constructor(options: LocalCredentialsOptions);
    getStorageCredentialsSync(): Credentials | null;
    setCredentials(credentials?: Credentials): Promise<void>;
    getCredentials(): Promise<Credentials | null>;
    private getStorageCredentials;
}
export declare class OAuth2Client implements AuthClient {
    private static defaultRetry;
    private static minRetry;
    private static maxRetry;
    private static retryInterval;
    private apiOrigin;
    private clientId;
    private retry;
    private clientSecret?;
    private baseRequest;
    private localCredentials;
    private storage;
    private deviceID?;
    private tokenInURL?;
    private refreshTokenFunc;
    private headers?;
    private singlePromise;
    private anonymousSignInFunc;
    constructor(options: OAuth2ClientOptions);
    setCredentials(credentials?: Credentials): Promise<void>;
    getAccessToken(): Promise<string>;
    request<T>(url: string, options?: AuthClientRequestOptions): Promise<T>;
    getCredentials(): Promise<Credentials | null>;
    getCredentialsSync(): Credentials | null;
    getCredentialsAsync(): Promise<Credentials | null>;
    getScope(): Promise<string>;
    getGroups(): Promise<string[]>;
    private checkRetry;
    private formatRetry;
    private sleep;
    private refreshToken;
    private anonymousSignIn;
    private defaultRefreshTokenFunc;
    private getDeviceId;
    private unAuthenticatedError;
}
export {};
