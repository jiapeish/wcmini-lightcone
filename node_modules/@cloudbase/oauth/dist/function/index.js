"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Function = exports.getFunction = void 0;
const oauthclient_1 = require("../oauthclient");
const uuid_1 = require("../utils/uuid");
const internal_1 = require("../app/internal");
/**
 * Returns the existing `Auth` instance that is associated with the app
 */
function getFunction(app) {
    return (0, internal_1._getComponent)(app, "function", () => {
        const credentialsClient = (0, oauthclient_1.getOAuthClient)(app);
        return new Function({
            credentialsClient: credentialsClient,
            env: app.options.clientId
        });
    });
}
exports.getFunction = getFunction;
class Function {
    /**
     * constructor
     * @param {AuthOptions} opts
     */
    constructor(opts) {
        this._config = {
            credentialsClient: opts.credentialsClient,
            env: opts.env,
        };
    }
    /**
     * callFunction call function
     * @param {SignInRequest} params A SignInRequest Object.
     * @return {Promise<Credentials>} A Promise<Credentials> object.
     */
    async callFunction(params) {
        let accessToken;
        try {
            accessToken = await this._config.credentialsClient.getAccessToken();
        }
        catch (e) {
            if (e.error === oauthclient_1.ErrorType.UNAUTHENTICATED) {
                accessToken = "";
            }
            else {
                return Promise.reject(e);
            }
        }
        const requestId = (0, uuid_1.uuidv4)();
        var reqBody = {
            "action": "functions.invokeFunction",
            "dataVersion": "2020-01-10",
            "env": this._config.env,
            "function_name": params.name,
            "request_data": JSON.stringify(params.data),
            "seqId": requestId,
            "access_token": accessToken
        };
        const url = "/web?env=" + this._config.env;
        const resp = await this._config.credentialsClient.request(url, {
            method: 'POST',
            body: reqBody,
            headers: {
                'content-type': 'application/json'
            }
        });
        if (resp.code) {
            return Promise.reject({
                error: resp.code,
                error_description: resp.message
            });
        }
        return {
            requestId: resp.requestId,
            result: resp.data.response_data,
        };
    }
}
exports.Function = Function;
