import { UserProfile, SignInRequest, SignUpRequest, VerifyRequest, VerifyResponse, GenProviderRedirectUriRequest, GenProviderRedirectUriResponse, GrantProviderTokenRequest, GrantProviderTokenResponse, PatchProviderTokenRequest, PatchProviderTokenResponse, SignInWithProviderRequest, BindWithProviderRequest, TransByProviderRequest, GrantTokenRequest, UnbindProviderRequest, CheckPasswordRequest, SetPasswordRequest, ChangeBoundProviderRequest, ChangeBoundProviderResponse, QueryUserProfileRequest, UpdatePasswordRequest, SudoRequest, SudoResponse, QueryUserProfileResponse, EditContactRequest, CheckIfUserExistResponse, CheckIfUserExistRequest, SendVerificationCodeRequest, SendVerificationCodeResponse, ResetPasswordRequest, AuthorizeRequest, AuthorizeResponse, AuthorizeInfoRequest, AuthorizeInfoResponse, RevokeDeviceRequest, WithSudoRequest, AuthorizeDeviceRequest, DeviceAuthorizeRequest, DeviceAuthorizeResponse, ProvidersResponse, SignoutRequest, SignoutReponse, ProviderSubType, GetMiniProgramQrCodeRequest, GetMiniProgramQrCodeResponse, GetMiniProgramQrCodeStatusRequest, GetMiniProgramQrCodeStatusResponse } from './models';
import { Credentials, AuthClient } from '../oauthclient';
import { Captcha } from '../captcha';
import { App, RequestFn as appRequestFn } from '../app';
export { ErrorType, VerificationUsages, DeviceAuthorizeState } from './consts';
export { ResponseError } from '../oauthclient';
export interface AuthOptions {
    credentialsClient: AuthClient;
    captcha: Captcha;
}
/**
 * Returns the existing `Auth` instance that is associated with the app
 */
export declare function getAuth(app: App, initOptions?: any): Auth;
export type GetCustomSignTicketFn = () => Promise<string>;
/**
 * Auth
 */
export declare class Auth {
    readonly request: appRequestFn;
    readonly credentialsClient: AuthClient;
    private _getCustomSignTicketFn?;
    /**
     * constructor
     * @param {AuthOptions} opts
     */
    constructor(opts: AuthOptions);
    /**
     * Sign in.
     * @param {SignInRequest} params A SignInRequest Object.
     * @return {Promise<Credentials>} A Promise<Credentials> object.
     */
    signIn(params: SignInRequest): Promise<Credentials>;
    /**
     * Sign in Anonymously
     * @return {Promise<Credentials>} A Promise<Credentials> object.
     */
    signInAnonymously(): Promise<Credentials>;
    /**
     * sign in with wechat idendify
     * 需要结合 http overcallFunction 使用
     */
    signInWithWechat(params?: any): Promise<Credentials>;
    /**
     * Sign up.
     * @param {SignUpRequest} params A SignUpRequest Object.
     * @return {Promise<Credentials>} A Promise<Credentials> object.
     */
    signUp(params: SignUpRequest): Promise<Credentials>;
    /**
     * Sign out.
     * @param {SignoutRequest} params A SignoutRequest Object.
     * @return {SignoutReponse} A Promise<SignoutReponse> object.
     */
    signOut(params?: SignoutRequest): Promise<SignoutReponse>;
    /**
     * Revoke All Devices
     * @return {Object} A Promise<void> object.
     */
    revokeAllDevices(): Promise<void>;
    /**
     * Revoke Device
     * @return {Object} A Promise<void> object.
     */
    revokeDevice(params: RevokeDeviceRequest): Promise<void>;
    /**
     * Send the VerificationCode.
     * @param {SendVerificationCodeRequest} params A GetVerificationRequest Object.
     * @return {Promise<SendVerificationCodeResponse>} A Promise<GetVerificationResponse> object.
     */
    sendVerificationCode(params: SendVerificationCodeRequest): Promise<SendVerificationCodeResponse>;
    getVerification(params: SendVerificationCodeRequest): Promise<SendVerificationCodeResponse>;
    /**
     *  Verify the code
     * @param {VerifyRequest} params A VerifyRequest Object.
     * @return {Promise<VerifyResponse>} A Promise<VerifyResponse> object.
     */
    verify(params: VerifyRequest): Promise<VerifyResponse>;
    /**
     * Reset Password
     * @param params A ResetPasswordRequest Object
     */
    resetPassword(params: ResetPasswordRequest): Promise<void>;
    /**
     * Gen provider redirect uri.
     * @param {GenProviderRedirectUriRequest} params A GenProviderRedirectUriRequest object.
     * @return {Promise<GenProviderRedirectUriResponse>} A Promise<GenProviderRedirectUriResponse> object.
     */
    genProviderRedirectUri(params: GenProviderRedirectUriRequest): Promise<GenProviderRedirectUriResponse>;
    /**
     * Grant provider token.
     * @param {GrantProviderTokenRequest} params A GrantProviderTokenRequest object.
     * @return {Promise<GrantProviderTokenResponse>} A Promise<GrantProviderTokenResponse> object.
     */
    grantProviderToken(params: GrantProviderTokenRequest): Promise<GrantProviderTokenResponse>;
    /**
     * Grant provider token.
     * @param {PatchProviderTokenRequest} params A PatchProviderTokenRequest object.
     * @return {Promise<PatchProviderTokenResponse>} A Promise<PatchProviderTokenResponse> object.
     */
    patchProviderToken(params: PatchProviderTokenRequest): Promise<PatchProviderTokenResponse>;
    /**
     * Signin with provider request.
     * @param {SignInWithProviderRequest} params A SignInWithProviderRequest object.
     * @return {Promise<Credentials>} A Promise<Credentials> object.
     */
    signInWithProvider(params: SignInWithProviderRequest): Promise<Credentials>;
    /**
     * Bind with provider
     * @param {BindWithProviderRequest} params A BindWithProviderRequest object.
     * @return {Promise<void>} A Promise<void> object.
     */
    bindWithProvider(params: BindWithProviderRequest): Promise<void>;
    /**
     * Get the user profile.
     * @return {Promise<UserProfile>} A Promise<UserProfile> object.
     */
    getUserProfile(): Promise<UserProfile>;
    /**
     * Get the user profile.
     * @return {Promise<UserProfile>} A Promise<UserProfile> object.
     */
    updateUserProfile(params: UserProfile): Promise<UserProfile>;
    /**
     * Update user basic info
     * @return {Promise<void>}
     */
    updateUserBasicInfo(params: {
        user_id: string;
        nickname: string;
        username: string;
        description: string;
        avatar_url: string;
    }): Promise<unknown>;
    /**
     * hasLoginState check if has login state
     * @return {Promise<boolean>} A Promise<boolean> object.
     */
    hasLoginState(): Promise<boolean>;
    /**
     * loginScope return scope of current token
     * @return {Promise<string>} A Promise<string> object.
     */
    loginScope(): Promise<string>;
    /**
     * Trans by provider.
     * @param {TransByProviderRequest} params A TransByProviderRequest object.
     * @return {Promise<Credentials>} A Promise<Credentials> object.
     */
    transByProvider(params: TransByProviderRequest): Promise<Credentials>;
    /**
     * Grant token.
     * @param {GrantTokenRequest} params A GrantTokenRequest object.
     * @return {Promise<Credentials>} A Promise<Credentials> object.
     */
    grantToken(params: GrantTokenRequest): Promise<Credentials>;
    /**
     * Get the provide list.
     * @return {Promise<ProvidersResponse>} A Promise<UserProfileProviderList> object.
     */
    getProviders(): Promise<ProvidersResponse>;
    /**
     * check if username is exist
     * @param params CheckIfUserExistRequest
     */
    checkIfUserExist(params: CheckIfUserExistRequest): Promise<CheckIfUserExistResponse>;
    /**
     * unbind provider.
     * @param {UnbindProviderRequest} params
     * @return {Promise<void>}
     */
    unbindProvider(params: UnbindProviderRequest): Promise<void>;
    /**
     * check Password.
     * @param {CheckPasswordRequest} params
     * @return {Promise<void>}
     */
    checkPassword(params: CheckPasswordRequest): Promise<void>;
    /**
     * Edit Contact 修改 手机号 或 邮箱
     * @param {EditContactRequest} params
     * @return {Promise<void>}
     */
    editContact(params: EditContactRequest): Promise<void>;
    /**
     * Set Password.
     * @param {SetPasswordRequest} params
     * @return {Promise<void>}
     */
    setPassword(params: SetPasswordRequest): Promise<void>;
    /**
     * updatePasswordByOld 使用旧密码修改密码，如果已经绑定手机号，请先：sudo，再修改密码
     * @param {UpdatePasswordRequest} params
     * @return {Promise<void>}
     */
    updatePasswordByOld(params: UpdatePasswordRequest): Promise<void>;
    /**
     * sudo
     * @param {sudo} params
     * @return {Promise<SudoResponse>}
     */
    sudo(params: SudoRequest): Promise<SudoResponse>;
    /**
     * Get the current user verification.
     * @param {SendVerificationCodeRequest} params A SendVerificationCodeToCurrentUser Object.
     * @return {Promise<SendVerificationCodeResponse>} A Promise<SendVerificationCodeResponse> object.
     */
    SendVerificationCodeToCurrentUser(params: SendVerificationCodeRequest): Promise<SendVerificationCodeResponse>;
    /**
     * change Bound provider.
     * @param {ChangeBoundProviderRequest} params A GetVerificationRequest Object.
     * @return {Promise<ChangeBoundProviderResponse>} A Promise<GetVerificationResponse> object.
     */
    changeBoundProvider(params: ChangeBoundProviderRequest): Promise<ChangeBoundProviderResponse>;
    /**
     * set the user profile.
     * @param {UserProfile} params A UserProfile Object.
     * @return {Promise<UserProfile>} A Promise<UserProfile> object.
     */
    setUserProfile(params: UserProfile): Promise<UserProfile>;
    /**
     * Delete me
     * @param params
     */
    deleteMe(params: WithSudoRequest): Promise<UserProfile>;
    /**
     * setCustomSignFunc set the get ticket function
     * @param getTickFn
     */
    setCustomSignFunc(getTickFn: GetCustomSignTicketFn): void;
    /**
     * SignInWithCustomTicket custom signIn
     * @constructor
     */
    SignInWithCustomTicket(): Promise<Credentials>;
    /**
     * queryUserProfile query user profile
     * @param params queryUserProfile query user profile
     */
    queryUserProfile(params: QueryUserProfileRequest): Promise<QueryUserProfileResponse>;
    /**
     * Authorize oauth Authorize
     * @param params
     * @constructor
     */
    authorize(params: AuthorizeRequest): Promise<AuthorizeResponse>;
    /**
     * authorize device
     * @param params
     */
    authorizeDevice(params: AuthorizeDeviceRequest): Promise<void>;
    deviceAuthorize(params: DeviceAuthorizeRequest): Promise<DeviceAuthorizeResponse>;
    /**
     * OAuth get authorize info
     * @param params
     * @constructor
     */
    authorizeInfo(params: AuthorizeInfoRequest): Promise<AuthorizeInfoResponse>;
    /**
     * get provider sub type
     * @returns
     */
    getProviderSubType(): Promise<ProviderSubType>;
    createCaptchaData(params: {
        state: string;
        redirect_uri?: string;
    }): Promise<{
        captcha_token: string;
        expires_in: number;
    }>;
    /**
     * 验证输入验证码
     * @param params.token 图形验证码token
     * @param params.key 用户输入值
     */
    verifyCaptchaData(params: {
        token: string;
        key: string;
    }): Promise<{
        captcha_token: string;
        expires_in: number;
    }>;
    /**
     * 获取小程序扫码资源
     * @param {GetMiniProgramCodeRequest}params
     * @param {Promise<GetMiniProgramCodeResponse>}
     */
    getMiniProgramQrCode(params: GetMiniProgramQrCodeRequest): Promise<GetMiniProgramQrCodeResponse>;
    /**
     * mini-program scan code status
     * @returns
     */
    getMiniProgramQrCodeStatus(params: GetMiniProgramQrCodeStatusRequest): Promise<GetMiniProgramQrCodeStatusResponse>;
    private static parseParamsToSearch;
}
