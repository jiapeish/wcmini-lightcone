import { ErrorType } from './consts';
import { AuthClient } from './interface';
import { Storage } from "../app";
import { Credentials, ResponseError, OAuth2ClientOptions, AuthClientRequestOptions } from './models';
export interface ToResponseErrorOptions {
    error?: ErrorType;
    error_description?: string;
    error_uri?: string;
    details?: any;
}
export declare const toResponseError: (error: ResponseError | Error, options?: ToResponseErrorOptions) => ResponseError;
/**
 * Generate request id.
 * @return {string}
 */
export declare function generateRequestId(): string;
interface LocalCredentialsOptions {
    tokenSectionName: string;
    storage: Storage;
}
/**
 * Local credentials.
 * Local credentials, with memory cache and storage cache.
 * If the memory cache expires, the storage cache is automatically loaded.
 */
export declare class LocalCredentials {
    private _tokenSectionName;
    private _storage;
    private _credentials;
    private _promiseOnce;
    /**
     * constructor
     * @param {LocalCredentialsOptions} options
     */
    constructor(options: LocalCredentialsOptions);
    /**
     * setCredentials Provides an alternative fetch api request implementation with auth credentials
     * @param {Credentials} credentials
     */
    setCredentials(credentials?: Credentials): Promise<void>;
    /**
     * Get credentials.
     * @return {Promise<Credentials>}
     */
    getCredentials(): Promise<Credentials>;
    /**
     * Get storage credentials.
     */
    private _getStorageCredentials;
}
/**
 * OAuth2Client
 */
export declare class OAuth2Client implements AuthClient {
    private static _defaultRetry;
    private static _minRetry;
    private static _maxRetry;
    private static _retryInterval;
    private _retry;
    private _baseRequest;
    private _basicAuth?;
    private _localCredentials;
    private _storage;
    private _deviceID?;
    private _tokenInURL?;
    private _refreshTokenFunc;
    private _headers?;
    private _promiseOnce;
    /**
     * constructor
     * @param {OAuth2ClientOptions} options
     */
    constructor(options: OAuth2ClientOptions);
    /**
     * setCredentials Provides an alternative fetch api request implementation with auth credentials
     * @param {Credentials} credentials
     * @return {Promise<void>}
     */
    setCredentials(credentials?: Credentials): Promise<void>;
    /**
     * getAccessToken return a validate access token
     */
    getAccessToken(): Promise<string>;
    /**
     * getScope return a validate access token
     */
    getScope(): Promise<string>;
    /**
     * request http like simple fetch api, exp:request('/v1/user/me', {withCredentials:true})
     * @param {string} url
     * @param {AuthClientRequestOptions} options
     */
    request<T>(url: string, options?: AuthClientRequestOptions): Promise<T>;
    /**
     * Check retry value.
     * @param {number} retry
     * @return {number}
     */
    private _checkRetry;
    /**
     * Format retry value.
     * @param {number} retry
     * @param {number} defaultVale
     * @return {number}
     */
    private _formatRetry;
    /**
     * Sleep.
     * @param {number} ms
     * @return {Promise<void>}
     */
    private _sleep;
    /**
     * Refresh expired token.
     * @param {Credentials} credentials
     * @return {Promise<Credentials>}
     */
    private _refreshToken;
    /**
     * anonymous signIn
     * @param {Credentials} credentials
     * @return {Promise<Credentials>}
     */
    private _anonymousSignIn;
    /**
     * Default refresh token function.
     * @param {string} refreshToken
     * @return {Promise<Credentials>}
     */
    private _defaultRefreshTokenFunc;
    /**
     * Get credentials.
     */
    private _getCredentials;
    /**
     * Get deviceId
     */
    private _getDeviceId;
    /**
     * Generate unAuthenticated error.
     * @param {string} err
     * @return {Promise<T>}
     */
    private _unAuthenticatedError;
}
export {};
