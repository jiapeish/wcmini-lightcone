"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.deepClone = void 0;
var deepClone = function (value) {
    var clone = function (copiedValue) {
        for (var key in value) {
            if (value.hasOwnProperty(key)) {
                copiedValue[key] = (0, exports.deepClone)(value[key]);
            }
        }
        return copiedValue;
    };
    var type = value === null || value === undefined
        ? 'NullOrUndefined'
        : Object.prototype.toString.call(value).slice(8, -1);
    if ([
        'Int8Array',
        'Uint8Array',
        'Uint8ClampedArray',
        'Int16Array',
        'Uint16Array',
        'Int32Array',
        'Uint32Array',
        'Float32Array',
        'Float64Array',
        'BigInt64Array',
        'BigUint64Array',
    ].includes(type)) {
        return value.slice();
    }
    switch (type) {
        case 'Object':
            return clone(Object.create(Object.getPrototypeOf(value)));
        case 'Array':
            return clone([]);
        case 'Date':
            return new Date(value.valueOf());
        case 'RegExp':
            return new RegExp(value.source, (value.global ? 'g' : '')
                + (value.ignoreCase ? 'i' : '')
                + (value.multiline ? 'm' : '')
                + (value.sticky ? 'y' : '')
                + (value.unicode ? 'u' : ''));
        default:
            return value;
    }
};
exports.deepClone = deepClone;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBUU8sSUFBTSxTQUFTLEdBQUcsVUFBQyxLQUFVO0lBQ2xDLElBQU0sS0FBSyxHQUFHLFVBQUMsV0FBZ0I7UUFDN0IsS0FBSyxJQUFNLEdBQUcsSUFBSSxLQUFLLEVBQUU7WUFFdkIsSUFBSSxLQUFLLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO2dCQUM3QixXQUFXLENBQUMsR0FBRyxDQUFDLEdBQUcsSUFBQSxpQkFBUyxFQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFBO2FBQ3pDO1NBQ0Y7UUFDRCxPQUFPLFdBQVcsQ0FBQTtJQUNwQixDQUFDLENBQUE7SUFFRCxJQUFNLElBQUksR0FBRyxLQUFLLEtBQUssSUFBSSxJQUFJLEtBQUssS0FBSyxTQUFTO1FBQ2hELENBQUMsQ0FBQyxpQkFBaUI7UUFDbkIsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFFdEQsSUFDRTtRQUNFLFdBQVc7UUFDWCxZQUFZO1FBQ1osbUJBQW1CO1FBQ25CLFlBQVk7UUFDWixhQUFhO1FBQ2IsWUFBWTtRQUNaLGFBQWE7UUFDYixjQUFjO1FBQ2QsY0FBYztRQUNkLGVBQWU7UUFDZixnQkFBZ0I7S0FDakIsQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQ2hCO1FBQ0EsT0FBTyxLQUFLLENBQUMsS0FBSyxFQUFFLENBQUE7S0FDckI7SUFFRCxRQUFRLElBQUksRUFBRTtRQUNaLEtBQUssUUFBUTtZQUNYLE9BQU8sS0FBSyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLGNBQWMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7UUFDM0QsS0FBSyxPQUFPO1lBQ1YsT0FBTyxLQUFLLENBQUMsRUFBRSxDQUFDLENBQUE7UUFDbEIsS0FBSyxNQUFNO1lBQ1QsT0FBTyxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsT0FBTyxFQUFFLENBQUMsQ0FBQTtRQUNsQyxLQUFLLFFBQVE7WUFDWCxPQUFPLElBQUksTUFBTSxDQUNmLEtBQUssQ0FBQyxNQUFNLEVBQ1osQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztrQkFDckIsQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztrQkFDN0IsQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztrQkFDNUIsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQztrQkFDekIsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxDQUMvQixDQUFBO1FBQ0g7WUFDRSxPQUFPLEtBQUssQ0FBQTtLQUNmO0FBQ0gsQ0FBQyxDQUFBO0FBcERZLFFBQUEsU0FBUyxhQW9EckIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIOa3seaLt+i0nVxuICogQHBhcmFtIHsqfSB2YWx1ZSDpnIDopoHmi7fotJ3nmoTlgLxcbiAqIEByZXR1cm5zIHsqfSDmt7Hmi7fotJ3lkI7nmoTlgLxcbiAqIEBleGFtcGxlXG4gKiBjb25zdCBvYmogPSB7IGE6IDEsIGI6IHsgYzogMiB9IH07XG4gKiBjb25zdCBuZXdPYmogPSBkZWVwQ2xvbmUob2JqKTtcbiAqL1xuZXhwb3J0IGNvbnN0IGRlZXBDbG9uZSA9ICh2YWx1ZTogYW55KSA9PiB7XG4gIGNvbnN0IGNsb25lID0gKGNvcGllZFZhbHVlOiBhbnkpID0+IHtcbiAgICBmb3IgKGNvbnN0IGtleSBpbiB2YWx1ZSkge1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXByb3RvdHlwZS1idWlsdGluc1xuICAgICAgaWYgKHZhbHVlLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgY29waWVkVmFsdWVba2V5XSA9IGRlZXBDbG9uZSh2YWx1ZVtrZXldKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gY29waWVkVmFsdWVcbiAgfVxuXG4gIGNvbnN0IHR5cGUgPSB2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdW5kZWZpbmVkXG4gICAgPyAnTnVsbE9yVW5kZWZpbmVkJ1xuICAgIDogT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5zbGljZSg4LCAtMSlcblxuICBpZiAoXG4gICAgW1xuICAgICAgJ0ludDhBcnJheScsXG4gICAgICAnVWludDhBcnJheScsXG4gICAgICAnVWludDhDbGFtcGVkQXJyYXknLFxuICAgICAgJ0ludDE2QXJyYXknLFxuICAgICAgJ1VpbnQxNkFycmF5JyxcbiAgICAgICdJbnQzMkFycmF5JyxcbiAgICAgICdVaW50MzJBcnJheScsXG4gICAgICAnRmxvYXQzMkFycmF5JyxcbiAgICAgICdGbG9hdDY0QXJyYXknLFxuICAgICAgJ0JpZ0ludDY0QXJyYXknLFxuICAgICAgJ0JpZ1VpbnQ2NEFycmF5JyxcbiAgICBdLmluY2x1ZGVzKHR5cGUpXG4gICkge1xuICAgIHJldHVybiB2YWx1ZS5zbGljZSgpXG4gIH1cblxuICBzd2l0Y2ggKHR5cGUpIHtcbiAgICBjYXNlICdPYmplY3QnOlxuICAgICAgcmV0dXJuIGNsb25lKE9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHZhbHVlKSkpXG4gICAgY2FzZSAnQXJyYXknOlxuICAgICAgcmV0dXJuIGNsb25lKFtdKVxuICAgIGNhc2UgJ0RhdGUnOlxuICAgICAgcmV0dXJuIG5ldyBEYXRlKHZhbHVlLnZhbHVlT2YoKSlcbiAgICBjYXNlICdSZWdFeHAnOlxuICAgICAgcmV0dXJuIG5ldyBSZWdFeHAoXG4gICAgICAgIHZhbHVlLnNvdXJjZSxcbiAgICAgICAgKHZhbHVlLmdsb2JhbCA/ICdnJyA6ICcnKVxuICAgICAgICAgICsgKHZhbHVlLmlnbm9yZUNhc2UgPyAnaScgOiAnJylcbiAgICAgICAgICArICh2YWx1ZS5tdWx0aWxpbmUgPyAnbScgOiAnJylcbiAgICAgICAgICArICh2YWx1ZS5zdGlja3kgPyAneScgOiAnJylcbiAgICAgICAgICArICh2YWx1ZS51bmljb2RlID8gJ3UnIDogJycpLFxuICAgICAgKVxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gdmFsdWVcbiAgfVxufVxuIl19