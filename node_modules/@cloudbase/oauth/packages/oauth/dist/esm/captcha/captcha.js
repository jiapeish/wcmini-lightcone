var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { ApiUrls, ErrorType } from '../auth/consts';
import { defaultStorage } from '../oauth2client/oauth2client';
import { isInMpWebView, isMp } from '../utils/mp';
var Captcha = (function () {
    function Captcha(opts) {
        if (!opts.openURIWithCallback) {
            opts.openURIWithCallback = this.getDefaultOpenURIWithCallback();
        }
        if (!opts.storage) {
            opts.storage = defaultStorage;
        }
        this.config = opts;
        this.tokenSectionName = "captcha_".concat(opts.clientId);
    }
    Captcha.prototype.request = function (url, options) {
        return __awaiter(this, void 0, void 0, function () {
            var state, reqURL, resp, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!options) {
                            options = {};
                        }
                        if (!options.method) {
                            options.method = 'GET';
                        }
                        state = "".concat(options.method, ":").concat(url);
                        reqURL = url;
                        if (!options.withCaptcha) return [3, 2];
                        return [4, this.appendCaptchaTokenToURL(url, state, false)];
                    case 1:
                        reqURL = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 7]);
                        return [4, this.config.request(reqURL, options)];
                    case 3:
                        resp = _a.sent();
                        return [3, 7];
                    case 4:
                        err_1 = _a.sent();
                        if (!(err_1.error === ErrorType.CAPTCHA_REQUIRED || err_1.error === ErrorType.CAPTCHA_INVALID)) return [3, 6];
                        return [4, this.appendCaptchaTokenToURL(url, state, err_1.error === ErrorType.CAPTCHA_INVALID)];
                    case 5:
                        url = _a.sent();
                        return [2, this.config.request(url, options)];
                    case 6: return [2, Promise.reject(err_1)];
                    case 7: return [2, resp];
                }
            });
        });
    };
    Captcha.prototype.getDefaultOpenURIWithCallback = function () {
        if (!isMp() && !isInMpWebView()) {
            if (window.location.search.indexOf('__captcha') > 0) {
                document.body.style.display = 'none';
            }
            if (document.getElementById('captcha_panel_wrap') === null) {
                var elementDiv_1 = document.createElement('div');
                elementDiv_1.style.cssText = 'background-color: rgba(0, 0, 0, 0.7);position: fixed;left: 0px;right: 0px;top: 0px;bottom: 0px;padding: 9vw 0 0 0;display: none;z-index:100;';
                elementDiv_1.setAttribute('id', 'captcha_panel_wrap');
                setTimeout(function () {
                    document.body.appendChild(elementDiv_1);
                }, 0);
            }
        }
        return this.defaultOpenURIWithCallback;
    };
    Captcha.prototype.defaultOpenURIWithCallback = function (url, opts) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, _b, width, _c, height, matched, target, iframe;
            return __generator(this, function (_d) {
                _a = opts || {}, _b = _a.width, width = _b === void 0 ? '355px' : _b, _c = _a.height, height = _c === void 0 ? '355px' : _c;
                matched = url.match(/^(data:.*)$/);
                if (matched) {
                    return [2, Promise.reject({
                            error: ErrorType.UNIMPLEMENTED,
                            error_description: 'need to impl captcha data',
                        })];
                }
                target = document.getElementById('captcha_panel_wrap');
                iframe = document.createElement('iframe');
                target.innerHTML = '';
                iframe.setAttribute('src', url);
                iframe.setAttribute('id', 'review-panel-iframe');
                iframe.style.cssText = "min-width:".concat(width, ";display:block;height:").concat(height, ";margin:0 auto;background-color: rgb(255, 255, 255);border: none;");
                target.appendChild(iframe);
                target.style.display = 'block';
                return [2, new Promise(function (resolve, reject) {
                        iframe.onload = function () {
                            try {
                                var windowLocation = window.location;
                                var iframeLocation = iframe.contentWindow.location;
                                if (iframeLocation.host + iframeLocation.pathname === windowLocation.host + windowLocation.pathname) {
                                    target.style.display = 'none';
                                    var iframeUrlParams = new URLSearchParams(iframeLocation.search);
                                    var captchToken = iframeUrlParams.get('captcha_token');
                                    if (captchToken) {
                                        return resolve({
                                            captcha_token: captchToken,
                                            expires_in: Number(iframeUrlParams.get('expires_in')),
                                        });
                                    }
                                    return reject({
                                        error: iframeUrlParams.get('error'),
                                        error_description: iframeUrlParams.get('error_description'),
                                    });
                                }
                                target.style.display = 'block';
                            }
                            catch (error) {
                                target.style.display = 'block';
                            }
                        };
                    })];
            });
        });
    };
    Captcha.prototype.getCaptchaToken = function (forceNewToken, state) {
        return __awaiter(this, void 0, void 0, function () {
            var captchaToken_1, captchaTokenResp, redirect_uri, captchaToken_2, captchaDataResp, captchaToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!forceNewToken) return [3, 2];
                        return [4, this.findCaptchaToken()];
                    case 1:
                        captchaToken_1 = _a.sent();
                        if (captchaToken_1) {
                            return [2, captchaToken_1];
                        }
                        _a.label = 2;
                    case 2:
                        if (!(!isMp() && !isInMpWebView())) return [3, 4];
                        redirect_uri = "".concat(window.location.origin + window.location.pathname, "?__captcha=on");
                        return [4, this.config.request(ApiUrls.GET_CAPTCHA_URL, {
                                method: 'POST',
                                body: {
                                    client_id: this.config.clientId,
                                    redirect_uri: redirect_uri,
                                    state: state,
                                },
                                withCredentials: false,
                            })];
                    case 3:
                        captchaTokenResp = _a.sent();
                        if (captchaTokenResp.captcha_token) {
                            captchaToken_2 = {
                                captcha_token: captchaTokenResp.captcha_token,
                                expires_in: captchaTokenResp.expires_in,
                            };
                            this.saveCaptchaToken(captchaToken_2);
                            return [2, captchaTokenResp.captcha_token];
                        }
                        return [3, 6];
                    case 4: return [4, this.config.request(ApiUrls.CAPTCHA_DATA_URL, {
                            method: 'POST',
                            body: {
                                state: state,
                                redirect_uri: '',
                            },
                            withCredentials: false,
                        })];
                    case 5:
                        captchaDataResp = _a.sent();
                        captchaTokenResp = {
                            url: "".concat(captchaDataResp.data, "?state=").concat(encodeURIComponent(state), "&token=").concat(encodeURIComponent(captchaDataResp.token)),
                        };
                        _a.label = 6;
                    case 6: return [4, this.config.openURIWithCallback(captchaTokenResp.url)];
                    case 7:
                        captchaToken = _a.sent();
                        this.saveCaptchaToken(captchaToken);
                        return [2, captchaToken.captcha_token];
                }
            });
        });
    };
    Captcha.prototype.appendCaptchaTokenToURL = function (url, state, forceNewToken) {
        return __awaiter(this, void 0, void 0, function () {
            var captchaToken;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getCaptchaToken(forceNewToken, state)];
                    case 1:
                        captchaToken = _a.sent();
                        if (url.indexOf('?') > 0) {
                            url += "&captcha_token=".concat(captchaToken);
                        }
                        else {
                            url += "?captcha_token=".concat(captchaToken);
                        }
                        return [2, url];
                }
            });
        });
    };
    Captcha.prototype.saveCaptchaToken = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenStr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        token.expires_at = new Date(Date.now() + (token.expires_in - 10) * 1000);
                        tokenStr = JSON.stringify(token);
                        return [4, this.config.storage.setItem(this.tokenSectionName, tokenStr)];
                    case 1:
                        _a.sent();
                        return [2];
                }
            });
        });
    };
    Captcha.prototype.findCaptchaToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var tokenStr, captchaToken, isExpired, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.config.storage.getItem(this.tokenSectionName)];
                    case 1:
                        tokenStr = _a.sent();
                        if (!(tokenStr !== undefined && tokenStr !== null)) return [3, 5];
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 3, , 5]);
                        captchaToken = JSON.parse(tokenStr);
                        if (captchaToken === null || captchaToken === void 0 ? void 0 : captchaToken.expires_at) {
                            captchaToken.expires_at = new Date(captchaToken.expires_at);
                        }
                        isExpired = captchaToken.expires_at < new Date();
                        if (isExpired) {
                            return [2, null];
                        }
                        return [2, captchaToken.captcha_token];
                    case 3:
                        error_1 = _a.sent();
                        return [4, this.config.storage.removeItem(this.tokenSectionName)];
                    case 4:
                        _a.sent();
                        return [2, null];
                    case 5: return [2, null];
                }
            });
        });
    };
    return Captcha;
}());
export { Captcha };
//# sourceMappingURL=data:application/json;base64,