var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { ErrorType } from './consts';
import { ApiUrls, ApiUrlsV2 } from '../auth/consts';
import { uuidv4 } from '../utils/uuid';
import { SinglePromise } from '../utils/function/single-promise';
var RequestIdHeaderName = 'x-request-id';
var DeviceIdHeaderName = 'x-device-id';
var DeviceIdSectionName = 'device_id';
export var defaultRequest = function (url, options) {
    return __awaiter(this, void 0, void 0, function () {
        var result, responseError, copyOptions, responseResult, jsonResponse, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    result = null;
                    responseError = null;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, , 5]);
                    copyOptions = Object.assign({}, options);
                    if (!copyOptions.method) {
                        copyOptions.method = 'GET';
                    }
                    if (copyOptions.body && typeof copyOptions.body !== 'string') {
                        copyOptions.body = JSON.stringify(copyOptions.body);
                    }
                    return [4, fetch(url, copyOptions)];
                case 2:
                    responseResult = _a.sent();
                    return [4, responseResult.json()];
                case 3:
                    jsonResponse = _a.sent();
                    if (jsonResponse === null || jsonResponse === void 0 ? void 0 : jsonResponse.error) {
                        responseError = jsonResponse;
                        responseError.error_uri = new URL(url).pathname;
                    }
                    else {
                        result = jsonResponse;
                    }
                    return [3, 5];
                case 4:
                    error_1 = _a.sent();
                    responseError = {
                        error: ErrorType.UNREACHABLE,
                        error_description: error_1.message,
                        error_uri: new URL(url).pathname,
                    };
                    return [3, 5];
                case 5:
                    if (responseError) {
                        throw responseError;
                    }
                    else {
                        return [2, result];
                    }
                    return [2];
            }
        });
    });
};
export var toResponseError = function (error, options) {
    var responseError;
    var formatOptions = options || {};
    if (error instanceof Error) {
        responseError = {
            error: formatOptions.error || ErrorType.LOCAL,
            error_description: formatOptions.error_description || error.message,
            error_uri: formatOptions.error_uri,
            details: formatOptions.details || error.stack,
        };
    }
    else {
        var formatError = error || {};
        responseError = {
            error: formatOptions.error || formatError.error || ErrorType.LOCAL,
            error_description: formatOptions.error_description || formatError.error_description,
            error_uri: formatOptions.error_uri || formatError.error_uri,
            details: formatOptions.details || formatError.details,
        };
    }
    return responseError;
};
export function generateRequestId() {
    return uuidv4();
}
var DefaultStorage = (function () {
    function DefaultStorage() {
    }
    DefaultStorage.prototype.getItem = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, window.localStorage.getItem(key)];
            });
        });
    };
    DefaultStorage.prototype.removeItem = function (key) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                window.localStorage.removeItem(key);
                return [2];
            });
        });
    };
    DefaultStorage.prototype.setItem = function (key, value) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                window.localStorage.setItem(key, value);
                return [2];
            });
        });
    };
    DefaultStorage.prototype.getItemSync = function (key) {
        return window.localStorage.getItem(key);
    };
    DefaultStorage.prototype.removeItemSync = function (key) {
        window.localStorage.removeItem(key);
    };
    DefaultStorage.prototype.setItemSync = function (key, value) {
        window.localStorage.setItem(key, value);
    };
    return DefaultStorage;
}());
export var defaultStorage = new DefaultStorage();
function isCredentialsExpired(credentials) {
    var isExpired = true;
    if ((credentials === null || credentials === void 0 ? void 0 : credentials.expires_at) && (credentials === null || credentials === void 0 ? void 0 : credentials.access_token)) {
        isExpired = credentials.expires_at < new Date();
    }
    return isExpired;
}
var LocalCredentials = (function () {
    function LocalCredentials(options) {
        this.credentials = null;
        this.singlePromise = new SinglePromise();
        this.tokenSectionName = options.tokenSectionName;
        this.storage = options.storage;
    }
    LocalCredentials.prototype.getStorageCredentialsSync = function () {
        var credentials = null;
        var tokenStr = this.storage.getItemSync(this.tokenSectionName);
        if (tokenStr !== undefined && tokenStr !== null) {
            try {
                credentials = JSON.parse(tokenStr);
                if (credentials === null || credentials === void 0 ? void 0 : credentials.expires_at) {
                    credentials.expires_at = new Date(credentials.expires_at);
                }
            }
            catch (error) {
                this.storage.removeItem(this.tokenSectionName);
                credentials = null;
            }
        }
        return credentials;
    };
    LocalCredentials.prototype.setCredentials = function (credentials) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenStr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(credentials === null || credentials === void 0 ? void 0 : credentials.expires_in)) return [3, 3];
                        credentials.expires_at = new Date(Date.now() + (credentials.expires_in - 30) * 1000);
                        if (!this.storage) return [3, 2];
                        tokenStr = JSON.stringify(credentials);
                        return [4, this.storage.setItem(this.tokenSectionName, tokenStr)];
                    case 1:
                        _a.sent();
                        _a.label = 2;
                    case 2:
                        this.credentials = credentials;
                        return [3, 6];
                    case 3:
                        if (!this.storage) return [3, 5];
                        return [4, this.storage.removeItem(this.tokenSectionName)];
                    case 4:
                        _a.sent();
                        _a.label = 5;
                    case 5:
                        this.credentials = null;
                        _a.label = 6;
                    case 6: return [2];
                }
            });
        });
    };
    LocalCredentials.prototype.getCredentials = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, this.singlePromise.run('getCredentials', function () { return __awaiter(_this, void 0, void 0, function () {
                        var _a;
                        return __generator(this, function (_b) {
                            switch (_b.label) {
                                case 0:
                                    if (!isCredentialsExpired(this.credentials)) return [3, 2];
                                    _a = this;
                                    return [4, this.getStorageCredentials()];
                                case 1:
                                    _a.credentials = _b.sent();
                                    _b.label = 2;
                                case 2: return [2, this.credentials];
                            }
                        });
                    }); })];
            });
        });
    };
    LocalCredentials.prototype.getStorageCredentials = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, this.singlePromise.run('_getStorageCredentials', function () { return __awaiter(_this, void 0, void 0, function () {
                        var credentials, tokenStr, error_2;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    credentials = null;
                                    return [4, this.storage.getItem(this.tokenSectionName)];
                                case 1:
                                    tokenStr = _a.sent();
                                    if (!(tokenStr !== undefined && tokenStr !== null)) return [3, 5];
                                    _a.label = 2;
                                case 2:
                                    _a.trys.push([2, 3, , 5]);
                                    credentials = JSON.parse(tokenStr);
                                    if (credentials === null || credentials === void 0 ? void 0 : credentials.expires_at) {
                                        credentials.expires_at = new Date(credentials.expires_at);
                                    }
                                    return [3, 5];
                                case 3:
                                    error_2 = _a.sent();
                                    return [4, this.storage.removeItem(this.tokenSectionName)];
                                case 4:
                                    _a.sent();
                                    credentials = null;
                                    return [3, 5];
                                case 5: return [2, credentials];
                            }
                        });
                    }); })];
            });
        });
    };
    return LocalCredentials;
}());
export var OAuth2Client = (function () {
    function OAuth2Client(options) {
        this.singlePromise = new SinglePromise();
        this.apiOrigin = options.apiOrigin;
        this.clientId = options.clientId;
        this.retry = this.formatRetry(options.retry, OAuth2Client.defaultRetry);
        if (options.baseRequest) {
            this.baseRequest = options.baseRequest;
        }
        else {
            this.baseRequest = defaultRequest;
        }
        this.tokenInURL = options.tokenInURL;
        this.headers = options.headers;
        this.storage = options.storage || defaultStorage;
        this.localCredentials = new LocalCredentials({
            tokenSectionName: "credentials_".concat(options.clientId),
            storage: this.storage,
        });
        this.clientSecret = options.clientSecret;
        this.refreshTokenFunc = options.refreshTokenFunc || this.defaultRefreshTokenFunc;
        this.anonymousSignInFunc = options.anonymousSignInFunc;
    }
    OAuth2Client.prototype.setCredentials = function (credentials) {
        return this.localCredentials.setCredentials(credentials);
    };
    OAuth2Client.prototype.getAccessToken = function () {
        return __awaiter(this, void 0, void 0, function () {
            var credentials, respErr;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.getCredentials()];
                    case 1:
                        credentials = _a.sent();
                        if (credentials === null || credentials === void 0 ? void 0 : credentials.access_token) {
                            return [2, Promise.resolve(credentials.access_token)];
                        }
                        respErr = { error: ErrorType.UNAUTHENTICATED };
                        return [2, Promise.reject(respErr)];
                }
            });
        });
    };
    OAuth2Client.prototype.request = function (url, options) {
        return __awaiter(this, void 0, void 0, function () {
            var retry, deviceId, credentials, response, maxRequestTimes, requestTime, responseError_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!options) {
                            options = {};
                        }
                        retry = this.formatRetry(options.retry, this.retry);
                        options.headers = options.headers || {};
                        if (this.headers) {
                            options.headers = __assign(__assign({}, this.headers), options.headers);
                        }
                        if (!options.headers[RequestIdHeaderName]) {
                            options.headers[RequestIdHeaderName] = generateRequestId();
                        }
                        if (!!options.headers[DeviceIdHeaderName]) return [3, 2];
                        return [4, this.getDeviceId()];
                    case 1:
                        deviceId = _a.sent();
                        options.headers[DeviceIdHeaderName] = deviceId;
                        _a.label = 2;
                    case 2:
                        if (!(options === null || options === void 0 ? void 0 : options.withCredentials)) return [3, 4];
                        return [4, this.getCredentials()];
                    case 3:
                        credentials = _a.sent();
                        if (credentials) {
                            if (this.tokenInURL) {
                                if (url.indexOf('?') < 0) {
                                    url += '?';
                                }
                                url += "access_token=".concat(credentials.access_token);
                            }
                            else {
                                options.headers.Authorization = "".concat(credentials.token_type, " ").concat(credentials.access_token);
                            }
                        }
                        return [3, 5];
                    case 4:
                        if (this.clientId && url.indexOf('client_id') < 0) {
                            url += url.indexOf('?') < 0 ? '?' : '&';
                            url += "client_id=".concat(this.clientId);
                        }
                        _a.label = 5;
                    case 5:
                        if (url.startsWith('/')) {
                            url = this.apiOrigin + url;
                        }
                        response = null;
                        maxRequestTimes = retry + 1;
                        requestTime = 0;
                        _a.label = 6;
                    case 6:
                        if (!(requestTime < maxRequestTimes)) return [3, 15];
                        _a.label = 7;
                    case 7:
                        _a.trys.push([7, 9, , 12]);
                        return [4, this.baseRequest(url, options)];
                    case 8:
                        response = _a.sent();
                        return [3, 15];
                    case 9:
                        responseError_1 = _a.sent();
                        if (!(options.withCredentials && responseError_1 && responseError_1.error === ErrorType.UNAUTHENTICATED)) return [3, 11];
                        return [4, this.setCredentials(null)];
                    case 10:
                        _a.sent();
                        return [2, Promise.reject(responseError_1)];
                    case 11:
                        if (requestTime === retry
                            || !responseError_1
                            || responseError_1.error !== 'unreachable') {
                            return [2, Promise.reject(responseError_1)];
                        }
                        return [3, 12];
                    case 12: return [4, this.sleep(OAuth2Client.retryInterval)];
                    case 13:
                        _a.sent();
                        _a.label = 14;
                    case 14:
                        requestTime++;
                        return [3, 6];
                    case 15: return [2, response];
                }
            });
        });
    };
    OAuth2Client.prototype.getCredentials = function () {
        return __awaiter(this, void 0, void 0, function () {
            var credentials, c, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4, this.localCredentials.getCredentials()];
                    case 1:
                        credentials = _b.sent();
                        if (!isCredentialsExpired(credentials)) return [3, 10];
                        if (!(credentials && credentials.scope === 'anonymous')) return [3, 8];
                        if (!this.anonymousSignInFunc) return [3, 5];
                        return [4, this.anonymousSignInFunc(credentials)];
                    case 2:
                        c = _b.sent();
                        _a = c;
                        if (_a) return [3, 4];
                        return [4, this.localCredentials.getCredentials()];
                    case 3:
                        _a = (_b.sent());
                        _b.label = 4;
                    case 4:
                        credentials = _a;
                        return [3, 7];
                    case 5: return [4, this.anonymousSignIn(credentials)];
                    case 6:
                        credentials = _b.sent();
                        _b.label = 7;
                    case 7: return [3, 10];
                    case 8: return [4, this.refreshToken(credentials)];
                    case 9:
                        credentials = _b.sent();
                        _b.label = 10;
                    case 10: return [2, credentials];
                }
            });
        });
    };
    OAuth2Client.prototype.getCredentialsSync = function () {
        var credentials = this.localCredentials.getStorageCredentialsSync();
        return credentials;
    };
    OAuth2Client.prototype.getCredentialsAsync = function () {
        return this.getCredentials();
    };
    OAuth2Client.prototype.getScope = function () {
        return __awaiter(this, void 0, void 0, function () {
            var credentials;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.localCredentials.getCredentials()];
                    case 1:
                        credentials = _a.sent();
                        if (!credentials) {
                            return [2, this.unAuthenticatedError('credentials not found')];
                        }
                        return [2, credentials.scope];
                }
            });
        });
    };
    OAuth2Client.prototype.getGroups = function () {
        return __awaiter(this, void 0, void 0, function () {
            var credentials;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.localCredentials.getCredentials()];
                    case 1:
                        credentials = _a.sent();
                        if (!credentials) {
                            return [2, this.unAuthenticatedError('credentials not found')];
                        }
                        return [2, credentials.groups];
                }
            });
        });
    };
    OAuth2Client.prototype.refreshToken = function (credentials) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, this.singlePromise.run('_refreshToken', function () { return __awaiter(_this, void 0, void 0, function () {
                        var newCredentials, error_3;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!credentials || !credentials.refresh_token) {
                                        return [2, this.unAuthenticatedError('no refresh token found in credentials')];
                                    }
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 4, , 7]);
                                    return [4, this.refreshTokenFunc(credentials.refresh_token, credentials)];
                                case 2:
                                    newCredentials = _a.sent();
                                    return [4, this.localCredentials.setCredentials(newCredentials)];
                                case 3:
                                    _a.sent();
                                    return [2, newCredentials];
                                case 4:
                                    error_3 = _a.sent();
                                    if (!(error_3.error === ErrorType.INVALID_GRANT)) return [3, 6];
                                    return [4, this.localCredentials.setCredentials(null)];
                                case 5:
                                    _a.sent();
                                    return [2, this.unAuthenticatedError(error_3.error_description)];
                                case 6: return [2, Promise.reject(error_3)];
                                case 7: return [2];
                            }
                        });
                    }); })];
            });
        });
    };
    OAuth2Client.prototype.checkRetry = function (retry) {
        var responseError = null;
        if (typeof retry !== 'number'
            || retry < OAuth2Client.minRetry
            || retry > OAuth2Client.maxRetry) {
            responseError = {
                error: ErrorType.UNREACHABLE,
                error_description: 'wrong options param: retry',
            };
        }
        if (responseError) {
            throw responseError;
        }
        return retry;
    };
    OAuth2Client.prototype.formatRetry = function (retry, defaultVale) {
        if (typeof retry === 'undefined') {
            return defaultVale;
        }
        return this.checkRetry(retry);
    };
    OAuth2Client.prototype.sleep = function (ms) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2, new Promise(function (resolve) {
                        setTimeout(function () {
                            resolve();
                        }, ms);
                    })];
            });
        });
    };
    OAuth2Client.prototype.anonymousSignIn = function (credentials) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2, this.singlePromise.run('_anonymous', function () { return __awaiter(_this, void 0, void 0, function () {
                        var newCredentials, error_4;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!credentials || credentials.scope !== 'anonymous') {
                                        return [2, this.unAuthenticatedError('no anonymous in credentials')];
                                    }
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, 4, , 7]);
                                    return [4, this.request('/auth/v1/signin/anonymously', {
                                            method: 'POST',
                                            body: {
                                                client_id: this.clientId,
                                                client_secret: this.clientSecret,
                                            },
                                        })];
                                case 2:
                                    newCredentials = _a.sent();
                                    return [4, this.localCredentials.setCredentials(newCredentials)];
                                case 3:
                                    _a.sent();
                                    return [2, newCredentials];
                                case 4:
                                    error_4 = _a.sent();
                                    if (!(error_4.error === ErrorType.INVALID_GRANT)) return [3, 6];
                                    return [4, this.localCredentials.setCredentials(null)];
                                case 5:
                                    _a.sent();
                                    return [2, this.unAuthenticatedError(error_4.error_description)];
                                case 6: return [2, Promise.reject(error_4)];
                                case 7: return [2];
                            }
                        });
                    }); })];
            });
        });
    };
    OAuth2Client.prototype.defaultRefreshTokenFunc = function (refreshToken, credentials) {
        return __awaiter(this, void 0, void 0, function () {
            var url, newCredentials;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (refreshToken === undefined || refreshToken === '') {
                            return [2, this.unAuthenticatedError('refresh token not found')];
                        }
                        url = ApiUrls.AUTH_TOKEN_URL;
                        if ((credentials === null || credentials === void 0 ? void 0 : credentials.version) === 'v2') {
                            url = ApiUrlsV2.AUTH_TOKEN_URL;
                        }
                        return [4, this.request(url, {
                                method: 'POST',
                                body: {
                                    client_id: this.clientId,
                                    client_secret: this.clientSecret,
                                    grant_type: 'refresh_token',
                                    refresh_token: refreshToken,
                                },
                            })];
                    case 1:
                        newCredentials = _a.sent();
                        return [2, __assign(__assign({}, newCredentials), { version: (credentials === null || credentials === void 0 ? void 0 : credentials.version) || 'v1' })];
                }
            });
        });
    };
    OAuth2Client.prototype.getDeviceId = function () {
        return __awaiter(this, void 0, void 0, function () {
            var deviceId;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this.deviceID) {
                            return [2, this.deviceID];
                        }
                        return [4, this.storage.getItem(DeviceIdSectionName)];
                    case 1:
                        deviceId = _a.sent();
                        if (!!(typeof deviceId === 'string'
                            && deviceId.length >= 16
                            && deviceId.length <= 48)) return [3, 3];
                        deviceId = uuidv4();
                        return [4, this.storage.setItem(DeviceIdSectionName, deviceId)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3:
                        this.deviceID = deviceId;
                        return [2, deviceId];
                }
            });
        });
    };
    OAuth2Client.prototype.unAuthenticatedError = function (err) {
        var respErr = {
            error: ErrorType.UNAUTHENTICATED,
            error_description: err,
        };
        return Promise.reject(respErr);
    };
    OAuth2Client.defaultRetry = 2;
    OAuth2Client.minRetry = 0;
    OAuth2Client.maxRetry = 5;
    OAuth2Client.retryInterval = 1000;
    return OAuth2Client;
}());
//# sourceMappingURL=data:application/json;base64,