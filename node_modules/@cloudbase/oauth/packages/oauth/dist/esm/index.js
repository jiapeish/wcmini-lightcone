var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { OAuth2Client } from './oauth2client/oauth2client';
import { Auth } from './auth/apis';
import * as authModels from './auth/models';
export { Syntax, ErrorType } from './oauth2client/consts';
export { defaultStorage, defaultRequest, toResponseError, generateRequestId, OAuth2Client, } from './oauth2client/oauth2client';
export { AuthClient } from './oauth2client/interface';
export { Auth } from './auth/apis';
export { authModels };
var CloudbaseOAuth = (function () {
    function CloudbaseOAuth(authOptions) {
        var apiOrigin = authOptions.apiOrigin, clientId = authOptions.clientId, storage = authOptions.storage, request = authOptions.request, baseRequest = authOptions.baseRequest, anonymousSignInFunc = authOptions.anonymousSignInFunc;
        this.oauth2client = new OAuth2Client({
            apiOrigin: apiOrigin,
            clientId: clientId,
            storage: storage,
            baseRequest: baseRequest || request,
            anonymousSignInFunc: anonymousSignInFunc,
        });
        this.authApi = new Auth(__assign(__assign({ credentialsClient: this.oauth2client }, authOptions), { request: request ? this.oauth2client.request.bind(this.oauth2client) : undefined }));
    }
    return CloudbaseOAuth;
}());
export { CloudbaseOAuth };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQSxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0sNkJBQTZCLENBQUE7QUFFMUQsT0FBTyxFQUFlLElBQUksRUFBRSxNQUFNLGFBQWEsQ0FBQTtBQUUvQyxPQUFPLEtBQUssVUFBVSxNQUFNLGVBQWUsQ0FBQTtBQUUzQyxPQUFPLEVBQUUsTUFBTSxFQUFFLFNBQVMsRUFBRSxNQUFNLHVCQUF1QixDQUFBO0FBRXpELE9BQU8sRUFDTCxjQUFjLEVBQ2QsY0FBYyxFQUVkLGVBQWUsRUFDZixpQkFBaUIsRUFDakIsWUFBWSxHQUNiLE1BQU0sNkJBQTZCLENBQUE7QUFFcEMsT0FBTyxFQUFFLFVBQVUsRUFBaUIsTUFBTSwwQkFBMEIsQ0FBQTtBQVNwRSxPQUFPLEVBQWUsSUFBSSxFQUFFLE1BQU0sYUFBYSxDQUFBO0FBQy9DLE9BQU8sRUFBRSxVQUFVLEVBQUUsQ0FBQTtBQUdyQjtJQUlFLHdCQUFZLFdBQXdCO1FBQzFCLElBQUEsU0FBUyxHQUFtRSxXQUFXLFVBQTlFLEVBQUUsUUFBUSxHQUF5RCxXQUFXLFNBQXBFLEVBQUUsT0FBTyxHQUFnRCxXQUFXLFFBQTNELEVBQUUsT0FBTyxHQUF1QyxXQUFXLFFBQWxELEVBQUUsV0FBVyxHQUEwQixXQUFXLFlBQXJDLEVBQUUsbUJBQW1CLEdBQUssV0FBVyxvQkFBaEIsQ0FBZ0I7UUFDL0YsSUFBSSxDQUFDLFlBQVksR0FBRyxJQUFJLFlBQVksQ0FBQztZQUNuQyxTQUFTLFdBQUE7WUFDVCxRQUFRLFVBQUE7WUFDUixPQUFPLFNBQUE7WUFDUCxXQUFXLEVBQUUsV0FBVyxJQUFJLE9BQU87WUFDbkMsbUJBQW1CLHFCQUFBO1NBQ3BCLENBQUMsQ0FBQTtRQUVGLElBQUksQ0FBQyxPQUFPLEdBQUcsSUFBSSxJQUFJLHFCQUNyQixpQkFBaUIsRUFBRSxJQUFJLENBQUMsWUFBWSxJQUNqQyxXQUFXLEtBRWQsT0FBTyxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFlBQVksQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxJQUNoRixDQUFBO0lBQ0osQ0FBQztJQUNILHFCQUFDO0FBQUQsQ0FBQyxBQXJCRCxJQXFCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE9BdXRoMkNsaWVudCB9IGZyb20gJy4vb2F1dGgyY2xpZW50L29hdXRoMmNsaWVudCdcblxuaW1wb3J0IHsgQXV0aE9wdGlvbnMsIEF1dGggfSBmcm9tICcuL2F1dGgvYXBpcydcblxuaW1wb3J0ICogYXMgYXV0aE1vZGVscyBmcm9tICcuL2F1dGgvbW9kZWxzJ1xuXG5leHBvcnQgeyBTeW50YXgsIEVycm9yVHlwZSB9IGZyb20gJy4vb2F1dGgyY2xpZW50L2NvbnN0cydcblxuZXhwb3J0IHtcbiAgZGVmYXVsdFN0b3JhZ2UsXG4gIGRlZmF1bHRSZXF1ZXN0LFxuICBUb1Jlc3BvbnNlRXJyb3JPcHRpb25zLFxuICB0b1Jlc3BvbnNlRXJyb3IsXG4gIGdlbmVyYXRlUmVxdWVzdElkLFxuICBPQXV0aDJDbGllbnQsXG59IGZyb20gJy4vb2F1dGgyY2xpZW50L29hdXRoMmNsaWVudCdcblxuZXhwb3J0IHsgQXV0aENsaWVudCwgU2ltcGxlU3RvcmFnZSB9IGZyb20gJy4vb2F1dGgyY2xpZW50L2ludGVyZmFjZSdcblxuZXhwb3J0IHtcbiAgQ3JlZGVudGlhbHMsXG4gIFJlc3BvbnNlRXJyb3IsXG4gIE9BdXRoMkNsaWVudE9wdGlvbnMsXG4gIEF1dGhDbGllbnRSZXF1ZXN0T3B0aW9ucyxcbn0gZnJvbSAnLi9vYXV0aDJjbGllbnQvbW9kZWxzJ1xuXG5leHBvcnQgeyBBdXRoT3B0aW9ucywgQXV0aCB9IGZyb20gJy4vYXV0aC9hcGlzJ1xuZXhwb3J0IHsgYXV0aE1vZGVscyB9XG5cblxuZXhwb3J0IGNsYXNzIENsb3VkYmFzZU9BdXRoIHtcbiAgcHVibGljIG9hdXRoMmNsaWVudDogT0F1dGgyQ2xpZW50XG4gIHB1YmxpYyBhdXRoQXBpOiBBdXRoXG5cbiAgY29uc3RydWN0b3IoYXV0aE9wdGlvbnM6IEF1dGhPcHRpb25zKSB7XG4gICAgY29uc3QgeyBhcGlPcmlnaW4sIGNsaWVudElkLCBzdG9yYWdlLCByZXF1ZXN0LCBiYXNlUmVxdWVzdCwgYW5vbnltb3VzU2lnbkluRnVuYyB9ID0gYXV0aE9wdGlvbnNcbiAgICB0aGlzLm9hdXRoMmNsaWVudCA9IG5ldyBPQXV0aDJDbGllbnQoe1xuICAgICAgYXBpT3JpZ2luLFxuICAgICAgY2xpZW50SWQsXG4gICAgICBzdG9yYWdlLFxuICAgICAgYmFzZVJlcXVlc3Q6IGJhc2VSZXF1ZXN0IHx8IHJlcXVlc3QsXG4gICAgICBhbm9ueW1vdXNTaWduSW5GdW5jLFxuICAgIH0pXG5cbiAgICB0aGlzLmF1dGhBcGkgPSBuZXcgQXV0aCh7XG4gICAgICBjcmVkZW50aWFsc0NsaWVudDogdGhpcy5vYXV0aDJjbGllbnQsXG4gICAgICAuLi5hdXRoT3B0aW9ucyxcbiAgICAgIC8vIOWFvOWuueiAgemAu+i+ke+8jOacieWAvOS8oOWFpeWImeS4jei1sEF1dGjlhoXnmoTpqozor4HnoIHor7fmsYLpgLvovpFcbiAgICAgIHJlcXVlc3Q6IHJlcXVlc3QgPyB0aGlzLm9hdXRoMmNsaWVudC5yZXF1ZXN0LmJpbmQodGhpcy5vYXV0aDJjbGllbnQpIDogdW5kZWZpbmVkLFxuICAgIH0pXG4gIH1cbn1cblxuIl19