export var deepClone = function (value) {
    var clone = function (copiedValue) {
        for (var key in value) {
            if (value.hasOwnProperty(key)) {
                copiedValue[key] = deepClone(value[key]);
            }
        }
        return copiedValue;
    };
    var type = value === null || value === undefined
        ? 'NullOrUndefined'
        : Object.prototype.toString.call(value).slice(8, -1);
    if ([
        'Int8Array',
        'Uint8Array',
        'Uint8ClampedArray',
        'Int16Array',
        'Uint16Array',
        'Int32Array',
        'Uint32Array',
        'Float32Array',
        'Float64Array',
        'BigInt64Array',
        'BigUint64Array',
    ].includes(type)) {
        return value.slice();
    }
    switch (type) {
        case 'Object':
            return clone(Object.create(Object.getPrototypeOf(value)));
        case 'Array':
            return clone([]);
        case 'Date':
            return new Date(value.valueOf());
        case 'RegExp':
            return new RegExp(value.source, (value.global ? 'g' : '')
                + (value.ignoreCase ? 'i' : '')
                + (value.multiline ? 'm' : '')
                + (value.sticky ? 'y' : '')
                + (value.unicode ? 'u' : ''));
        default:
            return value;
    }
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsTUFBTSxDQUFDLElBQU0sU0FBUyxHQUFHLFVBQUMsS0FBVTtJQUNsQyxJQUFNLEtBQUssR0FBRyxVQUFDLFdBQWdCO1FBQzdCLEtBQUssSUFBTSxHQUFHLElBQUksS0FBSyxFQUFFO1lBRXZCLElBQUksS0FBSyxDQUFDLGNBQWMsQ0FBQyxHQUFHLENBQUMsRUFBRTtnQkFDN0IsV0FBVyxDQUFDLEdBQUcsQ0FBQyxHQUFHLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQTthQUN6QztTQUNGO1FBQ0QsT0FBTyxXQUFXLENBQUE7SUFDcEIsQ0FBQyxDQUFBO0lBRUQsSUFBTSxJQUFJLEdBQUcsS0FBSyxLQUFLLElBQUksSUFBSSxLQUFLLEtBQUssU0FBUztRQUNoRCxDQUFDLENBQUMsaUJBQWlCO1FBQ25CLENBQUMsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBRXRELElBQ0U7UUFDRSxXQUFXO1FBQ1gsWUFBWTtRQUNaLG1CQUFtQjtRQUNuQixZQUFZO1FBQ1osYUFBYTtRQUNiLFlBQVk7UUFDWixhQUFhO1FBQ2IsY0FBYztRQUNkLGNBQWM7UUFDZCxlQUFlO1FBQ2YsZ0JBQWdCO0tBQ2pCLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxFQUNoQjtRQUNBLE9BQU8sS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFBO0tBQ3JCO0lBRUQsUUFBUSxJQUFJLEVBQUU7UUFDWixLQUFLLFFBQVE7WUFDWCxPQUFPLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQzNELEtBQUssT0FBTztZQUNWLE9BQU8sS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFBO1FBQ2xCLEtBQUssTUFBTTtZQUNULE9BQU8sSUFBSSxJQUFJLENBQUMsS0FBSyxDQUFDLE9BQU8sRUFBRSxDQUFDLENBQUE7UUFDbEMsS0FBSyxRQUFRO1lBQ1gsT0FBTyxJQUFJLE1BQU0sQ0FDZixLQUFLLENBQUMsTUFBTSxFQUNaLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7a0JBQ3JCLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7a0JBQzdCLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7a0JBQzVCLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUM7a0JBQ3pCLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FDL0IsQ0FBQTtRQUNIO1lBQ0UsT0FBTyxLQUFLLENBQUE7S0FDZjtBQUNILENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICog5rex5ou36LSdXG4gKiBAcGFyYW0geyp9IHZhbHVlIOmcgOimgeaLt+i0neeahOWAvFxuICogQHJldHVybnMgeyp9IOa3seaLt+i0neWQjueahOWAvFxuICogQGV4YW1wbGVcbiAqIGNvbnN0IG9iaiA9IHsgYTogMSwgYjogeyBjOiAyIH0gfTtcbiAqIGNvbnN0IG5ld09iaiA9IGRlZXBDbG9uZShvYmopO1xuICovXG5leHBvcnQgY29uc3QgZGVlcENsb25lID0gKHZhbHVlOiBhbnkpID0+IHtcbiAgY29uc3QgY2xvbmUgPSAoY29waWVkVmFsdWU6IGFueSkgPT4ge1xuICAgIGZvciAoY29uc3Qga2V5IGluIHZhbHVlKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gICAgICBpZiAodmFsdWUuaGFzT3duUHJvcGVydHkoa2V5KSkge1xuICAgICAgICBjb3BpZWRWYWx1ZVtrZXldID0gZGVlcENsb25lKHZhbHVlW2tleV0pXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBjb3BpZWRWYWx1ZVxuICB9XG5cbiAgY29uc3QgdHlwZSA9IHZhbHVlID09PSBudWxsIHx8IHZhbHVlID09PSB1bmRlZmluZWRcbiAgICA/ICdOdWxsT3JVbmRlZmluZWQnXG4gICAgOiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKVxuXG4gIGlmIChcbiAgICBbXG4gICAgICAnSW50OEFycmF5JyxcbiAgICAgICdVaW50OEFycmF5JyxcbiAgICAgICdVaW50OENsYW1wZWRBcnJheScsXG4gICAgICAnSW50MTZBcnJheScsXG4gICAgICAnVWludDE2QXJyYXknLFxuICAgICAgJ0ludDMyQXJyYXknLFxuICAgICAgJ1VpbnQzMkFycmF5JyxcbiAgICAgICdGbG9hdDMyQXJyYXknLFxuICAgICAgJ0Zsb2F0NjRBcnJheScsXG4gICAgICAnQmlnSW50NjRBcnJheScsXG4gICAgICAnQmlnVWludDY0QXJyYXknLFxuICAgIF0uaW5jbHVkZXModHlwZSlcbiAgKSB7XG4gICAgcmV0dXJuIHZhbHVlLnNsaWNlKClcbiAgfVxuXG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ09iamVjdCc6XG4gICAgICByZXR1cm4gY2xvbmUoT2JqZWN0LmNyZWF0ZShPYmplY3QuZ2V0UHJvdG90eXBlT2YodmFsdWUpKSlcbiAgICBjYXNlICdBcnJheSc6XG4gICAgICByZXR1cm4gY2xvbmUoW10pXG4gICAgY2FzZSAnRGF0ZSc6XG4gICAgICByZXR1cm4gbmV3IERhdGUodmFsdWUudmFsdWVPZigpKVxuICAgIGNhc2UgJ1JlZ0V4cCc6XG4gICAgICByZXR1cm4gbmV3IFJlZ0V4cChcbiAgICAgICAgdmFsdWUuc291cmNlLFxuICAgICAgICAodmFsdWUuZ2xvYmFsID8gJ2cnIDogJycpXG4gICAgICAgICAgKyAodmFsdWUuaWdub3JlQ2FzZSA/ICdpJyA6ICcnKVxuICAgICAgICAgICsgKHZhbHVlLm11bHRpbGluZSA/ICdtJyA6ICcnKVxuICAgICAgICAgICsgKHZhbHVlLnN0aWNreSA/ICd5JyA6ICcnKVxuICAgICAgICAgICsgKHZhbHVlLnVuaWNvZGUgPyAndScgOiAnJyksXG4gICAgICApXG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiB2YWx1ZVxuICB9XG59XG4iXX0=