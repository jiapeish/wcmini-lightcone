import JSEncrypt from './encryptlong';
import { deepClone } from '.';
export var getEncryptInfo = function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.publicKey, publicKey = _c === void 0 ? '' : _c, _d = _b.payload, payload = _d === void 0 ? {} : _d;
    if (!publicKey)
        return '';
    try {
        var params = deepClone(payload);
        var rsaInstance = new JSEncrypt();
        rsaInstance.setPublicKey(publicKey);
        var encrypted = rsaInstance.encryptLong(JSON.stringify(params));
        return encrypted;
    }
    catch (error) {
    }
    return '';
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZW5jcnlwdC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy91dGlscy9lbmNyeXB0LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sU0FBUyxNQUFNLGVBQWUsQ0FBQTtBQUdyQyxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sR0FBRyxDQUFBO0FBUTdCLE1BQU0sQ0FBQyxJQUFNLGNBQWMsR0FBRyxVQUFDLEVBQXFDO1FBQXJDLHFCQUFtQyxFQUFFLEtBQUEsRUFBbkMsaUJBQWMsRUFBZCxTQUFTLG1CQUFHLEVBQUUsS0FBQSxFQUFFLGVBQVksRUFBWixPQUFPLG1CQUFHLEVBQUUsS0FBQTtJQUMzRCxJQUFJLENBQUMsU0FBUztRQUFFLE9BQU8sRUFBRSxDQUFBO0lBRXpCLElBQUk7UUFDRixJQUFNLE1BQU0sR0FBRyxTQUFTLENBQUMsT0FBTyxDQUFDLENBQUE7UUFFakMsSUFBTSxXQUFXLEdBQUcsSUFBSSxTQUFTLEVBQUUsQ0FBQTtRQUVuQyxXQUFXLENBQUMsWUFBWSxDQUFDLFNBQVMsQ0FBQyxDQUFBO1FBY25DLElBQU0sU0FBUyxHQUFHLFdBQVcsQ0FBQyxXQUFXLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFBO1FBRWpFLE9BQU8sU0FBUyxDQUFBO0tBQ2pCO0lBQUMsT0FBTyxLQUFLLEVBQUU7S0FFZjtJQUVELE9BQU8sRUFBRSxDQUFBO0FBQ1gsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IEpTRW5jcnlwdCBmcm9tICcuL2VuY3J5cHRsb25nJ1xuLy8gaW1wb3J0IEhtYWNTSEEyNTYgZnJvbSAnY3J5cHRvLWpzL2htYWMtc2hhMjU2J1xuLy8gaW1wb3J0IFdvcmRBcnJheSBmcm9tICdjcnlwdG8tanMvbGliLXR5cGVkYXJyYXlzJ1xuaW1wb3J0IHsgZGVlcENsb25lIH0gZnJvbSAnLidcblxuLyoqXG4gKiDnlJ/miJBSU0HlhazpkqXliqDlr4blkI7nmoTmlbDmja5cbiAqIEBwYXJhbSBwYXJhbTAucHVibGljS2V5IFJTQeWFrOmSpVxuICogQHBhcmFtIHBhcmFtMC5wYXlsb2FkIOWKoOWvhuWJjeeahOaVsOaNrlxuICogQHJldHVybnMge3N0cmluZ30g5Yqg5a+G5ZCO55qE5pWw5o2uXG4gKi9cbmV4cG9ydCBjb25zdCBnZXRFbmNyeXB0SW5mbyA9ICh7IHB1YmxpY0tleSA9ICcnLCBwYXlsb2FkID0ge30gfSA9IHt9KSA9PiB7XG4gIGlmICghcHVibGljS2V5KSByZXR1cm4gJydcblxuICB0cnkge1xuICAgIGNvbnN0IHBhcmFtcyA9IGRlZXBDbG9uZShwYXlsb2FkKVxuICAgIC8vIOeUn+aIkFJTQeWunuS+i1xuICAgIGNvbnN0IHJzYUluc3RhbmNlID0gbmV3IEpTRW5jcnlwdCgpXG4gICAgLy8g6K6+572u5YWs6ZKlXG4gICAgcnNhSW5zdGFuY2Uuc2V0UHVibGljS2V5KHB1YmxpY0tleSlcbiAgICAvLyDnlJ/miJDml7bpl7TmiLNcbiAgICAvLyBwYXJhbXMudGltZXN0YW1wID0gK25ldyBEYXRlKClcbiAgICAvLyDnoa7lrprnrb7lkI3nrpfms5VcbiAgICAvLyBjb25zdCBzaWduTWV0aG9kID0gJ0htYWNTSEEyNTYnXG4gICAgLy8g55Sf5oiQ6ZqP5py65pWwXG4gICAgLy8gY29uc3Qgbm9uY2UgPSBXb3JkQXJyYXkucmFuZG9tKDE2KS50b1N0cmluZygpXG4gICAgLy8g55Sf5oiQ562+5ZCN77ya5Z+65pys5Y+C5pWw44CB5pe26Ze05oizICsg6ZqP5py65pWwXG4gICAgLy8gY29uc3Qgc2lnbmF0dXJlID0gSG1hY1NIQTI1NihKU09OLnN0cmluZ2lmeShwYXJhbXMpLCBub25jZSkudG9TdHJpbmcoKVxuICAgIC8vIOWwhuetvuWQjeaUvuWFpeWPguaVsOS4rVxuICAgIC8vIHBhcmFtcy5zaWduYXR1cmUgPSBzaWduYXR1cmVcbiAgICAvLyBwYXJhbXMubm9uY2UgPSBub25jZVxuICAgIC8vIHBhcmFtcy5zaWduTWV0aG9kID0gc2lnbk1ldGhvZFxuICAgIC8vIHJzYeWFrOmSpeWKoOWvhlxuICAgIGNvbnN0IGVuY3J5cHRlZCA9IHJzYUluc3RhbmNlLmVuY3J5cHRMb25nKEpTT04uc3RyaW5naWZ5KHBhcmFtcykpXG5cbiAgICByZXR1cm4gZW5jcnlwdGVkXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgLy9cbiAgfVxuXG4gIHJldHVybiAnJ1xufVxuIl19