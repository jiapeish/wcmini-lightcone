"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OAUTH2_LOGINTYPE_PREFIX = exports.LOGINTYPE = exports.getBaseEndPoint = exports.getEndPoint = exports.setRegionLevelEndpoint = exports.setEndPoint = exports.DATA_VERSION = exports.getSdkName = exports.setSdkName = exports.getSdkVersion = exports.setSdkVersion = void 0;
var utilities_1 = require("@cloudbase/utilities");
var setUtilitiesSdkName = utilities_1.constants.setSdkName, setUtilitiesProtocol = utilities_1.constants.setProtocol;
var sdkVersion = '';
var sdkName = '@cloudbase/js-sdk';
function setSdkVersion(version) {
    sdkVersion = version;
}
exports.setSdkVersion = setSdkVersion;
function getSdkVersion() {
    return sdkVersion;
}
exports.getSdkVersion = getSdkVersion;
function setSdkName(name) {
    sdkName = name;
    setUtilitiesSdkName(name);
}
exports.setSdkName = setSdkName;
function getSdkName() {
    return sdkName;
}
exports.getSdkName = getSdkName;
exports.DATA_VERSION = '2020-01-10';
var PROTOCOL = 'https:';
var BASE_URL = typeof process !== 'undefined' && process.env.NODE_ENV === 'e2e' && process.env.END_POINT === 'pre'
    ? '//tcb-pre.tencentcloudapi.com/web'
    : '//tcb-api.tencentcloudapi.com/web';
function setEndPoint(url, protocol) {
    BASE_URL = url;
    if (protocol) {
        PROTOCOL = protocol;
        setUtilitiesProtocol(protocol);
    }
}
exports.setEndPoint = setEndPoint;
function setRegionLevelEndpoint(env, region, protocol) {
    var endpoiont = region
        ? "//".concat(env, ".").concat(region, ".tcb-api.tencentcloudapi.com/web")
        : "//".concat(env, ".ap-shanghai.tcb-api.tencentcloudapi.com/web");
    setEndPoint(endpoiont, protocol);
}
exports.setRegionLevelEndpoint = setRegionLevelEndpoint;
function getEndPoint() {
    return { BASE_URL: BASE_URL, PROTOCOL: PROTOCOL };
}
exports.getEndPoint = getEndPoint;
function getBaseEndPoint() {
    var _a = getEndPoint(), PROTOCOL = _a.PROTOCOL, BASE_URL = _a.BASE_URL;
    var webEndpoint = "".concat(PROTOCOL).concat(BASE_URL);
    return webEndpoint.match(/(http(s)?:)?\/\/([^/?#]*)/)[0];
}
exports.getBaseEndPoint = getBaseEndPoint;
var LOGINTYPE;
(function (LOGINTYPE) {
    LOGINTYPE["NULL"] = "NULL";
    LOGINTYPE["ANONYMOUS"] = "ANONYMOUS";
    LOGINTYPE["WECHAT"] = "WECHAT";
    LOGINTYPE["WECHAT_PUBLIC"] = "WECHAT-PUBLIC";
    LOGINTYPE["WECHAT_OPEN"] = "WECHAT-OPEN";
    LOGINTYPE["CUSTOM"] = "CUSTOM";
    LOGINTYPE["EMAIL"] = "EMAIL";
    LOGINTYPE["USERNAME"] = "USERNAME";
    LOGINTYPE["PHONE"] = "PHONE";
})(LOGINTYPE = exports.LOGINTYPE || (exports.LOGINTYPE = {}));
exports.OAUTH2_LOGINTYPE_PREFIX = 'OAUTH2';
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29tbW9uLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbnN0YW50cy9jb21tb24udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsa0RBQWdEO0FBR3hDLElBQVksbUJBQW1CLEdBQXdDLHFCQUFTLFdBQWpELEVBQWUsb0JBQW9CLEdBQUsscUJBQVMsWUFBZCxDQUFjO0FBSXhGLElBQUksVUFBVSxHQUFHLEVBQUUsQ0FBQTtBQUNuQixJQUFJLE9BQU8sR0FBRyxtQkFBbUIsQ0FBQTtBQUVqQyxTQUFnQixhQUFhLENBQUMsT0FBZTtJQUMzQyxVQUFVLEdBQUcsT0FBTyxDQUFBO0FBQ3RCLENBQUM7QUFGRCxzQ0FFQztBQUNELFNBQWdCLGFBQWE7SUFDM0IsT0FBTyxVQUFVLENBQUE7QUFDbkIsQ0FBQztBQUZELHNDQUVDO0FBQ0QsU0FBZ0IsVUFBVSxDQUFDLElBQVk7SUFDckMsT0FBTyxHQUFHLElBQUksQ0FBQTtJQUNkLG1CQUFtQixDQUFDLElBQUksQ0FBQyxDQUFBO0FBQzNCLENBQUM7QUFIRCxnQ0FHQztBQUNELFNBQWdCLFVBQVU7SUFDeEIsT0FBTyxPQUFPLENBQUE7QUFDaEIsQ0FBQztBQUZELGdDQUVDO0FBQ1ksUUFBQSxZQUFZLEdBQUcsWUFBWSxDQUFBO0FBRXhDLElBQUksUUFBUSxHQUFHLFFBQVEsQ0FBQTtBQUV2QixJQUFJLFFBQVEsR0FBRyxPQUFPLE9BQU8sS0FBSyxXQUFXLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxRQUFRLEtBQUssS0FBSyxJQUFJLE9BQU8sQ0FBQyxHQUFHLENBQUMsU0FBUyxLQUFLLEtBQUs7SUFDaEgsQ0FBQyxDQUFDLG1DQUFtQztJQUNyQyxDQUFDLENBQUMsbUNBQW1DLENBQUE7QUFDdkMsU0FBZ0IsV0FBVyxDQUFDLEdBQVcsRUFBRSxRQUEyQjtJQUNsRSxRQUFRLEdBQUcsR0FBRyxDQUFBO0lBQ2QsSUFBSSxRQUFRLEVBQUU7UUFDWixRQUFRLEdBQUcsUUFBUSxDQUFBO1FBQ25CLG9CQUFvQixDQUFDLFFBQVEsQ0FBQyxDQUFBO0tBQy9CO0FBQ0gsQ0FBQztBQU5ELGtDQU1DO0FBQ0QsU0FBZ0Isc0JBQXNCLENBQUMsR0FBVyxFQUFFLE1BQWMsRUFBRSxRQUEyQjtJQUM3RixJQUFNLFNBQVMsR0FBRyxNQUFNO1FBQ3RCLENBQUMsQ0FBQyxZQUFLLEdBQUcsY0FBSSxNQUFNLHFDQUFrQztRQUN0RCxDQUFDLENBQUMsWUFBSyxHQUFHLGlEQUE4QyxDQUFBO0lBQzFELFdBQVcsQ0FBQyxTQUFTLEVBQUUsUUFBUSxDQUFDLENBQUE7QUFDbEMsQ0FBQztBQUxELHdEQUtDO0FBQ0QsU0FBZ0IsV0FBVztJQUN6QixPQUFPLEVBQUUsUUFBUSxVQUFBLEVBQUUsUUFBUSxVQUFBLEVBQUUsQ0FBQTtBQUMvQixDQUFDO0FBRkQsa0NBRUM7QUFHRCxTQUFnQixlQUFlO0lBQ3ZCLElBQUEsS0FBeUIsV0FBVyxFQUFFLEVBQXBDLFFBQVEsY0FBQSxFQUFFLFFBQVEsY0FBa0IsQ0FBQTtJQUM1QyxJQUFNLFdBQVcsR0FBRyxVQUFHLFFBQVEsU0FBRyxRQUFRLENBQUUsQ0FBQTtJQUU1QyxPQUFPLFdBQVcsQ0FBQyxLQUFLLENBQUMsMkJBQTJCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQTtBQUUxRCxDQUFDO0FBTkQsMENBTUM7QUFFRCxJQUFZLFNBVVg7QUFWRCxXQUFZLFNBQVM7SUFDbkIsMEJBQWEsQ0FBQTtJQUNiLG9DQUF1QixDQUFBO0lBQ3ZCLDhCQUFpQixDQUFBO0lBQ2pCLDRDQUErQixDQUFBO0lBQy9CLHdDQUEyQixDQUFBO0lBQzNCLDhCQUFpQixDQUFBO0lBQ2pCLDRCQUFlLENBQUE7SUFDZixrQ0FBcUIsQ0FBQTtJQUNyQiw0QkFBZSxDQUFBO0FBQ2pCLENBQUMsRUFWVyxTQUFTLEdBQVQsaUJBQVMsS0FBVCxpQkFBUyxRQVVwQjtBQUVZLFFBQUEsdUJBQXVCLEdBQUcsUUFBUSxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgY29uc3RhbnRzIH0gZnJvbSAnQGNsb3VkYmFzZS91dGlsaXRpZXMnXG5cbi8vIEB0cy1pZ25vcmVcbmNvbnN0IHsgc2V0U2RrTmFtZTogc2V0VXRpbGl0aWVzU2RrTmFtZSwgc2V0UHJvdG9jb2w6IHNldFV0aWxpdGllc1Byb3RvY29sIH0gPSBjb25zdGFudHNcbi8qKlxuICogU0RLXG4gKi9cbmxldCBzZGtWZXJzaW9uID0gJydcbmxldCBzZGtOYW1lID0gJ0BjbG91ZGJhc2UvanMtc2RrJ1xuXG5leHBvcnQgZnVuY3Rpb24gc2V0U2RrVmVyc2lvbih2ZXJzaW9uOiBzdHJpbmcpIHtcbiAgc2RrVmVyc2lvbiA9IHZlcnNpb25cbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZGtWZXJzaW9uKCkge1xuICByZXR1cm4gc2RrVmVyc2lvblxufVxuZXhwb3J0IGZ1bmN0aW9uIHNldFNka05hbWUobmFtZTogc3RyaW5nKSB7XG4gIHNka05hbWUgPSBuYW1lXG4gIHNldFV0aWxpdGllc1Nka05hbWUobmFtZSlcbn1cbmV4cG9ydCBmdW5jdGlvbiBnZXRTZGtOYW1lKCkge1xuICByZXR1cm4gc2RrTmFtZVxufVxuZXhwb3J0IGNvbnN0IERBVEFfVkVSU0lPTiA9ICcyMDIwLTAxLTEwJ1xuXG5sZXQgUFJPVE9DT0wgPSAnaHR0cHM6J1xuXG5sZXQgQkFTRV9VUkwgPSB0eXBlb2YgcHJvY2VzcyAhPT0gJ3VuZGVmaW5lZCcgJiYgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdlMmUnICYmIHByb2Nlc3MuZW52LkVORF9QT0lOVCA9PT0gJ3ByZSdcbiAgPyAnLy90Y2ItcHJlLnRlbmNlbnRjbG91ZGFwaS5jb20vd2ViJ1xuICA6ICcvL3RjYi1hcGkudGVuY2VudGNsb3VkYXBpLmNvbS93ZWInXG5leHBvcnQgZnVuY3Rpb24gc2V0RW5kUG9pbnQodXJsOiBzdHJpbmcsIHByb3RvY29sPzogJ2h0dHAnIHwgJ2h0dHBzJykge1xuICBCQVNFX1VSTCA9IHVybFxuICBpZiAocHJvdG9jb2wpIHtcbiAgICBQUk9UT0NPTCA9IHByb3RvY29sXG4gICAgc2V0VXRpbGl0aWVzUHJvdG9jb2wocHJvdG9jb2wpXG4gIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXRSZWdpb25MZXZlbEVuZHBvaW50KGVudjogc3RyaW5nLCByZWdpb246IHN0cmluZywgcHJvdG9jb2w/OiAnaHR0cCcgfCAnaHR0cHMnKSB7XG4gIGNvbnN0IGVuZHBvaW9udCA9IHJlZ2lvblxuICAgID8gYC8vJHtlbnZ9LiR7cmVnaW9ufS50Y2ItYXBpLnRlbmNlbnRjbG91ZGFwaS5jb20vd2ViYFxuICAgIDogYC8vJHtlbnZ9LmFwLXNoYW5naGFpLnRjYi1hcGkudGVuY2VudGNsb3VkYXBpLmNvbS93ZWJgXG4gIHNldEVuZFBvaW50KGVuZHBvaW9udCwgcHJvdG9jb2wpXG59XG5leHBvcnQgZnVuY3Rpb24gZ2V0RW5kUG9pbnQoKSB7XG4gIHJldHVybiB7IEJBU0VfVVJMLCBQUk9UT0NPTCB9XG59XG5cblxuZXhwb3J0IGZ1bmN0aW9uIGdldEJhc2VFbmRQb2ludCgpIHtcbiAgY29uc3QgeyBQUk9UT0NPTCwgQkFTRV9VUkwgfSA9IGdldEVuZFBvaW50KClcbiAgY29uc3Qgd2ViRW5kcG9pbnQgPSBgJHtQUk9UT0NPTH0ke0JBU0VfVVJMfWBcbiAgLy8gQHRvZG8g5Li05pe25YW85a655bCP56iL5bqPXG4gIHJldHVybiB3ZWJFbmRwb2ludC5tYXRjaCgvKGh0dHAocyk/Oik/XFwvXFwvKFteLz8jXSopLylbMF1cbiAgLy8gcmV0dXJuIGAke25ldyBVUkwod2ViRW5kcG9pbnQpLm9yaWdpbn1gXG59XG5cbmV4cG9ydCBlbnVtIExPR0lOVFlQRSB7XG4gIE5VTEwgPSAnTlVMTCcsXG4gIEFOT05ZTU9VUyA9ICdBTk9OWU1PVVMnLFxuICBXRUNIQVQgPSAnV0VDSEFUJyxcbiAgV0VDSEFUX1BVQkxJQyA9ICdXRUNIQVQtUFVCTElDJyxcbiAgV0VDSEFUX09QRU4gPSAnV0VDSEFULU9QRU4nLFxuICBDVVNUT00gPSAnQ1VTVE9NJyxcbiAgRU1BSUwgPSAnRU1BSUwnLFxuICBVU0VSTkFNRSA9ICdVU0VSTkFNRScsXG4gIFBIT05FID0gJ1BIT05FJ1xufVxuXG5leHBvcnQgY29uc3QgT0FVVEgyX0xPR0lOVFlQRV9QUkVGSVggPSAnT0FVVEgyJ1xuIl19