"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ERR_CODE = exports.CloudSDKError = exports.isCancelledError = exports.CancelledError = exports.isTimeoutError = exports.TimeoutError = exports.isRealtimeErrorMessageError = exports.RealtimeErrorMessageError = void 0;
var RealtimeErrorMessageError = (function (_super) {
    __extends(RealtimeErrorMessageError, _super);
    function RealtimeErrorMessageError(serverErrorMsg) {
        var _this = _super.call(this, "Watch Error ".concat(JSON.stringify(serverErrorMsg.msgData), " (requestid: ").concat(serverErrorMsg.requestId, ")")) || this;
        _this.isRealtimeErrorMessageError = true;
        _this.payload = serverErrorMsg;
        return _this;
    }
    return RealtimeErrorMessageError;
}(Error));
exports.RealtimeErrorMessageError = RealtimeErrorMessageError;
var isRealtimeErrorMessageError = function (e) { return e === null || e === void 0 ? void 0 : e.isRealtimeErrorMessageError; };
exports.isRealtimeErrorMessageError = isRealtimeErrorMessageError;
var TimeoutError = (function (_super) {
    __extends(TimeoutError, _super);
    function TimeoutError() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'timeout';
        _this.payload = null;
        _this.generic = true;
        return _this;
    }
    return TimeoutError;
}(Error));
exports.TimeoutError = TimeoutError;
var isTimeoutError = function (e) { return e.type === 'timeout'; };
exports.isTimeoutError = isTimeoutError;
var CancelledError = (function (_super) {
    __extends(CancelledError, _super);
    function CancelledError() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'cancelled';
        _this.payload = null;
        _this.generic = true;
        return _this;
    }
    return CancelledError;
}(Error));
exports.CancelledError = CancelledError;
var isCancelledError = function (e) { return e.type === 'cancelled'; };
exports.isCancelledError = isCancelledError;
var CloudSDKError = (function (_super) {
    __extends(CloudSDKError, _super);
    function CloudSDKError(options) {
        var _this = _super.call(this, options.errMsg) || this;
        _this.errCode = 'UNKNOWN_ERROR';
        Object.defineProperties(_this, {
            message: {
                get: function () {
                    return ("errCode: ".concat(this.errCode, " ").concat(exports.ERR_CODE[this.errCode]
                        || '', " | errMsg: ").concat(this.errMsg));
                },
                set: function (msg) {
                    this.errMsg = msg;
                },
            },
        });
        _this.errCode = options.errCode || 'UNKNOWN_ERROR';
        _this.errMsg = options.errMsg;
        return _this;
    }
    Object.defineProperty(CloudSDKError.prototype, "message", {
        get: function () {
            return "errCode: ".concat(this.errCode, " | errMsg: ").concat(this.errMsg);
        },
        set: function (msg) {
            this.errMsg = msg;
        },
        enumerable: false,
        configurable: true
    });
    return CloudSDKError;
}(Error));
exports.CloudSDKError = CloudSDKError;
exports.ERR_CODE = {
    UNKNOWN_ERROR: 'UNKNOWN_ERROR',
    SDK_DATABASE_REALTIME_LISTENER_INIT_WATCH_FAIL: 'SDK_DATABASE_REALTIME_LISTENER_INIT_WATCH_FAIL',
    SDK_DATABASE_REALTIME_LISTENER_RECONNECT_WATCH_FAIL: 'SDK_DATABASE_REALTIME_LISTENER_RECONNECT_WATCH_FAIL',
    SDK_DATABASE_REALTIME_LISTENER_REBUILD_WATCH_FAIL: 'SDK_DATABASE_REALTIME_LISTENER_REBUILD_WATCH_FAIL',
    SDK_DATABASE_REALTIME_LISTENER_CLOSE_WATCH_FAIL: 'SDK_DATABASE_REALTIME_LISTENER_CLOSE_WATCH_FAIL',
    SDK_DATABASE_REALTIME_LISTENER_SERVER_ERROR_MSG: 'SDK_DATABASE_REALTIME_LISTENER_SERVER_ERROR_MSG',
    SDK_DATABASE_REALTIME_LISTENER_RECEIVE_INVALID_SERVER_DATA: 'SDK_DATABASE_REALTIME_LISTENER_RECEIVE_INVALID_SERVER_DATA',
    SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_ERROR: 'SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_ERROR',
    SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_CLOSED: 'SDK_DATABASE_REALTIME_LISTENER_WEBSOCKET_CONNECTION_CLOSED',
    SDK_DATABASE_REALTIME_LISTENER_CHECK_LAST_FAIL: 'SDK_DATABASE_REALTIME_LISTENER_CHECK_LAST_FAIL',
    SDK_DATABASE_REALTIME_LISTENER_UNEXPECTED_FATAL_ERROR: 'SDK_DATABASE_REALTIME_LISTENER_UNEXPECTED_FATAL_ERROR',
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZXJyb3IuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9zcmMvZXJyb3IudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBR0E7SUFBK0MsNkNBQUs7SUFJbEQsbUNBQVksY0FBd0M7UUFBcEQsWUFDRSxrQkFBTSxzQkFBZSxJQUFJLENBQUMsU0FBUyxDQUFDLGNBQWMsQ0FBQyxPQUFPLENBQUMsMEJBQ3pELGNBQWMsQ0FBQyxTQUFTLE1BQ3ZCLENBQUMsU0FFTDtRQVJELGlDQUEyQixHQUFHLElBQUksQ0FBQTtRQU9oQyxLQUFJLENBQUMsT0FBTyxHQUFHLGNBQWMsQ0FBQTs7SUFDL0IsQ0FBQztJQUNILGdDQUFDO0FBQUQsQ0FBQyxBQVZELENBQStDLEtBQUssR0FVbkQ7QUFWWSw4REFBeUI7QUFZL0IsSUFBTSwyQkFBMkIsR0FBRyxVQUFDLENBQU0sSUFBcUMsT0FBQSxDQUFDLGFBQUQsQ0FBQyx1QkFBRCxDQUFDLENBQUUsMkJBQTJCLEVBQTlCLENBQThCLENBQUE7QUFBeEcsUUFBQSwyQkFBMkIsK0JBQTZFO0FBRXJIO0lBQWtDLGdDQUFLO0lBQXZDO1FBQUEscUVBS0M7UUFIQyxVQUFJLEdBQUcsU0FBa0IsQ0FBQTtRQUN6QixhQUFPLEdBQUcsSUFBSSxDQUFBO1FBQ2QsYUFBTyxHQUFHLElBQUksQ0FBQTs7SUFDaEIsQ0FBQztJQUFELG1CQUFDO0FBQUQsQ0FBQyxBQUxELENBQWtDLEtBQUssR0FLdEM7QUFMWSxvQ0FBWTtBQU9sQixJQUFNLGNBQWMsR0FBRyxVQUFDLENBQU0sSUFBd0IsT0FBQSxDQUFDLENBQUMsSUFBSSxLQUFLLFNBQVMsRUFBcEIsQ0FBb0IsQ0FBQTtBQUFwRSxRQUFBLGNBQWMsa0JBQXNEO0FBRWpGO0lBQW9DLGtDQUFLO0lBQXpDO1FBQUEscUVBS0M7UUFIQyxVQUFJLEdBQUcsV0FBb0IsQ0FBQTtRQUMzQixhQUFPLEdBQUcsSUFBSSxDQUFBO1FBQ2QsYUFBTyxHQUFHLElBQUksQ0FBQTs7SUFDaEIsQ0FBQztJQUFELHFCQUFDO0FBQUQsQ0FBQyxBQUxELENBQW9DLEtBQUssR0FLeEM7QUFMWSx3Q0FBYztBQU9wQixJQUFNLGdCQUFnQixHQUFHLFVBQUMsQ0FBTSxJQUEwQixPQUFBLENBQUMsQ0FBQyxJQUFJLEtBQUssV0FBVyxFQUF0QixDQUFzQixDQUFBO0FBQTFFLFFBQUEsZ0JBQWdCLG9CQUEwRDtBQUV2RjtJQUFtQyxpQ0FBSztJQU10Qyx1QkFBWSxPQUFpQztRQUE3QyxZQUNFLGtCQUFNLE9BQU8sQ0FBQyxNQUFNLENBQUMsU0FrQnRCO1FBeEJNLGFBQU8sR0FBRyxlQUFlLENBQUE7UUFROUIsTUFBTSxDQUFDLGdCQUFnQixDQUFDLEtBQUksRUFBRTtZQUM1QixPQUFPLEVBQUU7Z0JBQ1AsR0FBRztvQkFDRCxPQUFPLENBQ0wsbUJBQVksSUFBSSxDQUFDLE9BQU8sY0FBSSxnQkFBUSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7MkJBQzdDLEVBQUUsd0JBQWMsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUNuQyxDQUFBO2dCQUNILENBQUM7Z0JBQ0QsR0FBRyxZQUFDLEdBQVc7b0JBQ2IsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUE7Z0JBQ25CLENBQUM7YUFDRjtTQUNGLENBQUMsQ0FBQTtRQUVGLEtBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLE9BQU8sSUFBSSxlQUFlLENBQUE7UUFDakQsS0FBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBTSxDQUFBOztJQUM5QixDQUFDO0lBRUQsc0JBQUksa0NBQU87YUFBWDtZQUNFLE9BQU8sbUJBQVksSUFBSSxDQUFDLE9BQU8sd0JBQWMsSUFBSSxDQUFDLE1BQU0sQ0FBRSxDQUFBO1FBQzVELENBQUM7YUFFRCxVQUFZLEdBQVc7WUFDckIsSUFBSSxDQUFDLE1BQU0sR0FBRyxHQUFHLENBQUE7UUFDbkIsQ0FBQzs7O09BSkE7SUFLSCxvQkFBQztBQUFELENBQUMsQUFsQ0QsQ0FBbUMsS0FBSyxHQWtDdkM7QUFsQ1ksc0NBQWE7QUF5Q2IsUUFBQSxRQUFRLEdBQXVDO0lBRTFELGFBQWEsRUFBRSxlQUFlO0lBQzlCLDhDQUE4QyxFQUM1QyxnREFBZ0Q7SUFFbEQsbURBQW1ELEVBQ2pELHFEQUFxRDtJQUV2RCxpREFBaUQsRUFDL0MsbURBQW1EO0lBRXJELCtDQUErQyxFQUM3QyxpREFBaUQ7SUFFbkQsK0NBQStDLEVBQzdDLGlEQUFpRDtJQUVuRCwwREFBMEQsRUFDeEQsNERBQTREO0lBRTlELHlEQUF5RCxFQUN2RCwyREFBMkQ7SUFFN0QsMERBQTBELEVBQ3hELDREQUE0RDtJQUU5RCw4Q0FBOEMsRUFDNUMsZ0RBQWdEO0lBRWxELHFEQUFxRCxFQUNuRCx1REFBdUQ7Q0FFMUQsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IElHZW5lcmljRXJyb3IgfSBmcm9tICdAY2xvdWRiYXNlL3R5cGVzJ1xuaW1wb3J0IHsgSVJlc3BvbnNlTWVzc2FnZUVycm9yTXNnIH0gZnJvbSAnQGNsb3VkYmFzZS90eXBlcy9yZWFsdGltZSdcblxuZXhwb3J0IGNsYXNzIFJlYWx0aW1lRXJyb3JNZXNzYWdlRXJyb3IgZXh0ZW5kcyBFcnJvciB7XG4gIGlzUmVhbHRpbWVFcnJvck1lc3NhZ2VFcnJvciA9IHRydWVcbiAgcGF5bG9hZDogSVJlc3BvbnNlTWVzc2FnZUVycm9yTXNnXG5cbiAgY29uc3RydWN0b3Ioc2VydmVyRXJyb3JNc2c6IElSZXNwb25zZU1lc3NhZ2VFcnJvck1zZykge1xuICAgIHN1cGVyKGBXYXRjaCBFcnJvciAke0pTT04uc3RyaW5naWZ5KHNlcnZlckVycm9yTXNnLm1zZ0RhdGEpfSAocmVxdWVzdGlkOiAke1xuICAgICAgc2VydmVyRXJyb3JNc2cucmVxdWVzdElkXG4gICAgfSlgKVxuICAgIHRoaXMucGF5bG9hZCA9IHNlcnZlckVycm9yTXNnXG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGlzUmVhbHRpbWVFcnJvck1lc3NhZ2VFcnJvciA9IChlOiBhbnkpOiBlIGlzIFJlYWx0aW1lRXJyb3JNZXNzYWdlRXJyb3IgPT4gZT8uaXNSZWFsdGltZUVycm9yTWVzc2FnZUVycm9yXG5cbmV4cG9ydCBjbGFzcyBUaW1lb3V0RXJyb3IgZXh0ZW5kcyBFcnJvclxuICBpbXBsZW1lbnRzIElHZW5lcmljRXJyb3I8J3RpbWVvdXQnLCBudWxsPiB7XG4gIHR5cGUgPSAndGltZW91dCcgYXMgY29uc3RcbiAgcGF5bG9hZCA9IG51bGxcbiAgZ2VuZXJpYyA9IHRydWVcbn1cblxuZXhwb3J0IGNvbnN0IGlzVGltZW91dEVycm9yID0gKGU6IGFueSk6IGUgaXMgVGltZW91dEVycm9yID0+IGUudHlwZSA9PT0gJ3RpbWVvdXQnXG5cbmV4cG9ydCBjbGFzcyBDYW5jZWxsZWRFcnJvciBleHRlbmRzIEVycm9yXG4gIGltcGxlbWVudHMgSUdlbmVyaWNFcnJvcjwnY2FuY2VsbGVkJywgbnVsbD4ge1xuICB0eXBlID0gJ2NhbmNlbGxlZCcgYXMgY29uc3RcbiAgcGF5bG9hZCA9IG51bGxcbiAgZ2VuZXJpYyA9IHRydWVcbn1cblxuZXhwb3J0IGNvbnN0IGlzQ2FuY2VsbGVkRXJyb3IgPSAoZTogYW55KTogZSBpcyBDYW5jZWxsZWRFcnJvciA9PiBlLnR5cGUgPT09ICdjYW5jZWxsZWQnXG5cbmV4cG9ydCBjbGFzcyBDbG91ZFNES0Vycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBwdWJsaWMgZXJyQ29kZSA9ICdVTktOT1dOX0VSUk9SJ1xuICBwdWJsaWMgZXJyTXNnOiBzdHJpbmdcblxuICBwdWJsaWMgcmVxdWVzdElEPzogc3RyaW5nXG5cbiAgY29uc3RydWN0b3Iob3B0aW9uczogSUVycm9yQ29uc3RydWN0b3JPcHRpb25zKSB7XG4gICAgc3VwZXIob3B0aW9ucy5lcnJNc2cpXG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0aGlzLCB7XG4gICAgICBtZXNzYWdlOiB7XG4gICAgICAgIGdldCgpIHtcbiAgICAgICAgICByZXR1cm4gKFxuICAgICAgICAgICAgYGVyckNvZGU6ICR7dGhpcy5lcnJDb2RlfSAke0VSUl9DT0RFW3RoaXMuZXJyQ29kZV1cbiAgICAgICAgICAgICAgfHwgJyd9IHwgZXJyTXNnOiAke3RoaXMuZXJyTXNnfWBcbiAgICAgICAgICApXG4gICAgICAgIH0sXG4gICAgICAgIHNldChtc2c6IHN0cmluZykge1xuICAgICAgICAgIHRoaXMuZXJyTXNnID0gbXNnXG4gICAgICAgIH0sXG4gICAgICB9LFxuICAgIH0pXG5cbiAgICB0aGlzLmVyckNvZGUgPSBvcHRpb25zLmVyckNvZGUgfHwgJ1VOS05PV05fRVJST1InXG4gICAgdGhpcy5lcnJNc2cgPSBvcHRpb25zLmVyck1zZ1xuICB9XG5cbiAgZ2V0IG1lc3NhZ2UoKSB7XG4gICAgcmV0dXJuIGBlcnJDb2RlOiAke3RoaXMuZXJyQ29kZX0gfCBlcnJNc2c6ICR7dGhpcy5lcnJNc2d9YFxuICB9XG5cbiAgc2V0IG1lc3NhZ2UobXNnOiBzdHJpbmcpIHtcbiAgICB0aGlzLmVyck1zZyA9IG1zZ1xuICB9XG59XG5cbmludGVyZmFjZSBJRXJyb3JDb25zdHJ1Y3Rvck9wdGlvbnMge1xuICBlcnJDb2RlPzogc3RyaW5nXG4gIGVyck1zZzogc3RyaW5nXG59XG5cbmV4cG9ydCBjb25zdCBFUlJfQ09ERTogeyBba2V5OiBzdHJpbmddOiBzdHJpbmcgfCBudW1iZXIgfSA9IHtcbiAgLy8gXCItMVwiOiBcIlwiLFxuICBVTktOT1dOX0VSUk9SOiAnVU5LTk9XTl9FUlJPUicsXG4gIFNES19EQVRBQkFTRV9SRUFMVElNRV9MSVNURU5FUl9JTklUX1dBVENIX0ZBSUw6XG4gICAgJ1NES19EQVRBQkFTRV9SRUFMVElNRV9MSVNURU5FUl9JTklUX1dBVENIX0ZBSUwnLFxuICAvLyBcInJlYWx0aW1lIGxpc3RlbmVyIGluaXQgd2F0Y2ggZmFpbFwiLFxuICBTREtfREFUQUJBU0VfUkVBTFRJTUVfTElTVEVORVJfUkVDT05ORUNUX1dBVENIX0ZBSUw6XG4gICAgJ1NES19EQVRBQkFTRV9SRUFMVElNRV9MSVNURU5FUl9SRUNPTk5FQ1RfV0FUQ0hfRkFJTCcsXG4gIC8vIFwicmVhbHRpbWUgbGlzdGVuZXIgcmVjb25uZWN0IHdhdGNoIGZhaWxcIixcbiAgU0RLX0RBVEFCQVNFX1JFQUxUSU1FX0xJU1RFTkVSX1JFQlVJTERfV0FUQ0hfRkFJTDpcbiAgICAnU0RLX0RBVEFCQVNFX1JFQUxUSU1FX0xJU1RFTkVSX1JFQlVJTERfV0FUQ0hfRkFJTCcsXG4gIC8vIFwicmVhbHRpbWUgbGlzdGVuZXIgcmVidWlsZCB3YXRjaCBmYWlsXCIsXG4gIFNES19EQVRBQkFTRV9SRUFMVElNRV9MSVNURU5FUl9DTE9TRV9XQVRDSF9GQUlMOlxuICAgICdTREtfREFUQUJBU0VfUkVBTFRJTUVfTElTVEVORVJfQ0xPU0VfV0FUQ0hfRkFJTCcsXG4gIC8vIFwicmVhbHRpbWUgbGlzdGVuZXIgcmVidWlsZCB3YXRjaCBmYWlsXCIsXG4gIFNES19EQVRBQkFTRV9SRUFMVElNRV9MSVNURU5FUl9TRVJWRVJfRVJST1JfTVNHOlxuICAgICdTREtfREFUQUJBU0VfUkVBTFRJTUVfTElTVEVORVJfU0VSVkVSX0VSUk9SX01TRycsXG4gIC8vIFwicmVhbHRpbWUgbGlzdGVuZXIgcmVjZWl2ZSBzZXJ2ZXIgZXJyb3IgbXNnXCIsXG4gIFNES19EQVRBQkFTRV9SRUFMVElNRV9MSVNURU5FUl9SRUNFSVZFX0lOVkFMSURfU0VSVkVSX0RBVEE6XG4gICAgJ1NES19EQVRBQkFTRV9SRUFMVElNRV9MSVNURU5FUl9SRUNFSVZFX0lOVkFMSURfU0VSVkVSX0RBVEEnLFxuICAvLyBcInJlYWx0aW1lIGxpc3RlbmVyIHJlY2VpdmUgaW52YWxpZCBzZXJ2ZXIgZGF0YVwiLFxuICBTREtfREFUQUJBU0VfUkVBTFRJTUVfTElTVEVORVJfV0VCU09DS0VUX0NPTk5FQ1RJT05fRVJST1I6XG4gICAgJ1NES19EQVRBQkFTRV9SRUFMVElNRV9MSVNURU5FUl9XRUJTT0NLRVRfQ09OTkVDVElPTl9FUlJPUicsXG4gIC8vIFwicmVhbHRpbWUgbGlzdGVuZXIgd2Vic29ja2V0IGNvbm5lY3Rpb24gZXJyb3JcIixcbiAgU0RLX0RBVEFCQVNFX1JFQUxUSU1FX0xJU1RFTkVSX1dFQlNPQ0tFVF9DT05ORUNUSU9OX0NMT1NFRDpcbiAgICAnU0RLX0RBVEFCQVNFX1JFQUxUSU1FX0xJU1RFTkVSX1dFQlNPQ0tFVF9DT05ORUNUSU9OX0NMT1NFRCcsXG4gIC8vIFwicmVhbHRpbWUgbGlzdGVuZXIgd2Vic29ja2V0IGNvbm5lY3Rpb24gY2xvc2VkXCIsXG4gIFNES19EQVRBQkFTRV9SRUFMVElNRV9MSVNURU5FUl9DSEVDS19MQVNUX0ZBSUw6XG4gICAgJ1NES19EQVRBQkFTRV9SRUFMVElNRV9MSVNURU5FUl9DSEVDS19MQVNUX0ZBSUwnLFxuICAvLyBcInJlYWx0aW1lIGxpc3RlbmVyIGNoZWNrIGxhc3QgZmFpbFwiLFxuICBTREtfREFUQUJBU0VfUkVBTFRJTUVfTElTVEVORVJfVU5FWFBFQ1RFRF9GQVRBTF9FUlJPUjpcbiAgICAnU0RLX0RBVEFCQVNFX1JFQUxUSU1FX0xJU1RFTkVSX1VORVhQRUNURURfRkFUQUxfRVJST1InLFxuICAvLyBcInJlYWx0aW1lIGxpc3RlbmVyIHVuZXhwZWN0ZWQgZmF0YWwgZXJyb3JcIlxufVxuIl19