"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.serializeRequestBody = exports.isBuffer = exports.parseURL = void 0;
var utilities_1 = require("@cloudbase/utilities");
var constants_1 = require("../constants");
var ERRORS = utilities_1.constants.ERRORS;
function parseURL(_url) {
    if (document) {
        var a = document.createElement('a');
        a.href = _url;
        return a;
    }
    return new URL(new Request(_url).url);
}
exports.parseURL = parseURL;
function isBuffer(buf) {
    return buf instanceof ArrayBuffer || ArrayBuffer.isView(buf);
}
exports.isBuffer = isBuffer;
function object2Qs(data) {
    var list = Object.entries(data || {}).reduce(function (list, _a) {
        var key = _a[0], value = _a[1];
        list.push("".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(value)));
        return list;
    }, []);
    if (list.length) {
        return list.join('&');
    }
}
function serializeRequestBody(headers, data, method) {
    if (method === void 0) { method = 'POST'; }
    var res = data;
    var contentTypeKey = 'Content-Type';
    if (typeof data === 'object' && !isBuffer(data)) {
        if (!headers[contentTypeKey] && !headers['content-type']) {
            headers[contentTypeKey] = 'application/json';
        }
        var contentType = headers[contentTypeKey] || headers['content-type'];
        if (method === 'GET') {
            try {
                return object2Qs(data) || '';
            }
            catch (e) {
                throw new Error(JSON.stringify({
                    code: ERRORS.INVALID_PARAMS,
                    msg: "[".concat(constants_1.COMPONENT_NAME, ".callContainer] invalid data in query method, ").concat(e.message),
                }));
            }
        }
        switch (contentType) {
            case 'application/json': {
                try {
                    res = JSON.stringify(data);
                }
                catch (e) {
                    throw new Error(JSON.stringify({
                        code: ERRORS.INVALID_PARAMS,
                        msg: "[".concat(constants_1.COMPONENT_NAME, ".callContainer] invalid data with content-type: application/json, ").concat(e.message),
                    }));
                }
                break;
            }
            case 'application/x-www-form-urlencoded': {
                try {
                    var qs_1 = object2Qs(data);
                    if (qs_1) {
                        res = qs_1;
                    }
                }
                catch (e) {
                    throw new Error(JSON.stringify({
                        code: ERRORS.INVALID_PARAMS,
                        msg: "[".concat(constants_1.COMPONENT_NAME, ".callContainer] invalid data with content-type: application/x-www-form-urlencoded,").concat(e.message),
                    }));
                }
                break;
            }
        }
    }
    return res;
}
exports.serializeRequestBody = serializeRequestBody;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsa0RBQWdEO0FBQ2hELDBDQUE2QztBQUNyQyxJQUFBLE1BQU0sR0FBSyxxQkFBUyxPQUFkLENBQWM7QUFFNUIsU0FBZ0IsUUFBUSxDQUFDLElBQVk7SUFDbkMsSUFBSSxRQUFRLEVBQUU7UUFDWixJQUFNLENBQUMsR0FBRyxRQUFRLENBQUMsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFBO1FBQ3JDLENBQUMsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFBO1FBQ2IsT0FBTyxDQUFDLENBQUE7S0FDVDtJQUNELE9BQU8sSUFBSSxHQUFHLENBQUMsSUFBSSxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDdkMsQ0FBQztBQVBELDRCQU9DO0FBRUQsU0FBZ0IsUUFBUSxDQUFDLEdBQVE7SUFDL0IsT0FBTyxHQUFHLFlBQVksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDOUQsQ0FBQztBQUZELDRCQUVDO0FBRUQsU0FBUyxTQUFTLENBQUMsSUFBSTtJQUNyQixJQUFNLElBQUksR0FBRyxNQUFNLENBQUMsT0FBTyxDQUFDLElBQUksSUFBSSxFQUFFLENBQUMsQ0FBQyxNQUFNLENBQUMsVUFBQyxJQUFJLEVBQUUsRUFBOEI7WUFBN0IsR0FBRyxRQUFBLEVBQUUsS0FBSyxRQUFBO1FBQy9ELElBQUksQ0FBQyxJQUFJLENBQUMsVUFBRyxrQkFBa0IsQ0FBQyxHQUFHLENBQUMsY0FBSSxrQkFBa0IsQ0FBQyxLQUFLLENBQUMsQ0FBRSxDQUFDLENBQUE7UUFDcEUsT0FBTyxJQUFJLENBQUE7SUFDYixDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUE7SUFDTixJQUFJLElBQUksQ0FBQyxNQUFNLEVBQUU7UUFDZixPQUFPLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7S0FDdEI7QUFDSCxDQUFDO0FBRUQsU0FBZ0Isb0JBQW9CLENBQUksT0FBTyxFQUFFLElBQU8sRUFBRSxNQUFlO0lBQWYsdUJBQUEsRUFBQSxlQUFlO0lBQ3ZFLElBQUksR0FBRyxHQUFlLElBQUksQ0FBQTtJQUMxQixJQUFNLGNBQWMsR0FBRyxjQUFjLENBQUE7SUFDckMsSUFBSSxPQUFPLElBQUksS0FBSyxRQUFRLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLEVBQUU7UUFDL0MsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsRUFBRTtZQUN4RCxPQUFPLENBQUMsY0FBYyxDQUFDLEdBQUcsa0JBQWtCLENBQUE7U0FDN0M7UUFFRCxJQUFNLFdBQVcsR0FBRyxPQUFPLENBQUMsY0FBYyxDQUFDLElBQUksT0FBTyxDQUFDLGNBQWMsQ0FBQyxDQUFBO1FBRXRFLElBQUksTUFBTSxLQUFLLEtBQUssRUFBRTtZQUNwQixJQUFJO2dCQUNGLE9BQU8sU0FBUyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTthQUM3QjtZQUFDLE9BQU8sQ0FBQyxFQUFFO2dCQUNWLE1BQU0sSUFBSSxLQUFLLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQztvQkFDN0IsSUFBSSxFQUFFLE1BQU0sQ0FBQyxjQUFjO29CQUMzQixHQUFHLEVBQUUsV0FBSSwwQkFBYywyREFBaUQsQ0FBQyxDQUFDLE9BQU8sQ0FBRTtpQkFDcEYsQ0FBQyxDQUFFLENBQUE7YUFDTDtTQUNGO1FBRUQsUUFBUSxXQUFXLEVBQUU7WUFDbkIsS0FBSyxrQkFBa0IsQ0FBQyxDQUFDO2dCQUN2QixJQUFJO29CQUNGLEdBQUcsR0FBRyxJQUFJLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFBO2lCQUMzQjtnQkFBQyxPQUFPLENBQUMsRUFBRTtvQkFDVixNQUFNLElBQUksS0FBSyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUM7d0JBQzdCLElBQUksRUFBRSxNQUFNLENBQUMsY0FBYzt3QkFDM0IsR0FBRyxFQUFFLFdBQUksMEJBQWMsK0VBQXFFLENBQUMsQ0FBQyxPQUFPLENBQUU7cUJBQ3hHLENBQUMsQ0FBRSxDQUFBO2lCQUNMO2dCQUNELE1BQUs7YUFDTjtZQUNELEtBQUssbUNBQW1DLENBQUMsQ0FBQztnQkFDeEMsSUFBSTtvQkFDRixJQUFNLElBQUUsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7b0JBQzFCLElBQUksSUFBRSxFQUFFO3dCQUNOLEdBQUcsR0FBRyxJQUFFLENBQUE7cUJBQ1Q7aUJBQ0Y7Z0JBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO3dCQUM3QixJQUFJLEVBQUUsTUFBTSxDQUFDLGNBQWM7d0JBQzNCLEdBQUcsRUFBRSxXQUFJLDBCQUFjLCtGQUFxRixDQUFDLENBQUMsT0FBTyxDQUFFO3FCQUN4SCxDQUFDLENBQUUsQ0FBQTtpQkFDTDtnQkFDRCxNQUFLO2FBQ047U0FDRjtLQUNGO0lBQ0QsT0FBTyxHQUFHLENBQUE7QUFDWixDQUFDO0FBbERELG9EQWtEQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNvbnN0YW50cyB9IGZyb20gJ0BjbG91ZGJhc2UvdXRpbGl0aWVzJ1xuaW1wb3J0IHsgQ09NUE9ORU5UX05BTUUgfSBmcm9tICcuLi9jb25zdGFudHMnXG5jb25zdCB7IEVSUk9SUyB9ID0gY29uc3RhbnRzXG5cbmV4cG9ydCBmdW5jdGlvbiBwYXJzZVVSTChfdXJsOiBzdHJpbmcpIHtcbiAgaWYgKGRvY3VtZW50KSB7XG4gICAgY29uc3QgYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2EnKVxuICAgIGEuaHJlZiA9IF91cmxcbiAgICByZXR1cm4gYVxuICB9XG4gIHJldHVybiBuZXcgVVJMKG5ldyBSZXF1ZXN0KF91cmwpLnVybClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzQnVmZmVyKGJ1ZjogYW55KSB7XG4gIHJldHVybiBidWYgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBBcnJheUJ1ZmZlci5pc1ZpZXcoYnVmKVxufVxuXG5mdW5jdGlvbiBvYmplY3QyUXMoZGF0YSkge1xuICBjb25zdCBsaXN0ID0gT2JqZWN0LmVudHJpZXMoZGF0YSB8fCB7fSkucmVkdWNlKChsaXN0LCBba2V5LCB2YWx1ZV06IFtzdHJpbmcsIHN0cmluZ10pID0+IHtcbiAgICBsaXN0LnB1c2goYCR7ZW5jb2RlVVJJQ29tcG9uZW50KGtleSl9PSR7ZW5jb2RlVVJJQ29tcG9uZW50KHZhbHVlKX1gKVxuICAgIHJldHVybiBsaXN0XG4gIH0sIFtdKVxuICBpZiAobGlzdC5sZW5ndGgpIHtcbiAgICByZXR1cm4gbGlzdC5qb2luKCcmJylcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2VyaWFsaXplUmVxdWVzdEJvZHk8VD4oaGVhZGVycywgZGF0YTogVCwgbWV0aG9kID0gJ1BPU1QnKTogVCB8IHN0cmluZyB7XG4gIGxldCByZXM6IFQgfCBzdHJpbmcgPSBkYXRhXG4gIGNvbnN0IGNvbnRlbnRUeXBlS2V5ID0gJ0NvbnRlbnQtVHlwZSdcbiAgaWYgKHR5cGVvZiBkYXRhID09PSAnb2JqZWN0JyAmJiAhaXNCdWZmZXIoZGF0YSkpIHtcbiAgICBpZiAoIWhlYWRlcnNbY29udGVudFR5cGVLZXldICYmICFoZWFkZXJzWydjb250ZW50LXR5cGUnXSkge1xuICAgICAgaGVhZGVyc1tjb250ZW50VHlwZUtleV0gPSAnYXBwbGljYXRpb24vanNvbidcbiAgICB9XG5cbiAgICBjb25zdCBjb250ZW50VHlwZSA9IGhlYWRlcnNbY29udGVudFR5cGVLZXldIHx8IGhlYWRlcnNbJ2NvbnRlbnQtdHlwZSddXG5cbiAgICBpZiAobWV0aG9kID09PSAnR0VUJykge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIG9iamVjdDJRcyhkYXRhKSB8fCAnJ1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgIGNvZGU6IEVSUk9SUy5JTlZBTElEX1BBUkFNUyxcbiAgICAgICAgICBtc2c6IGBbJHtDT01QT05FTlRfTkFNRX0uY2FsbENvbnRhaW5lcl0gaW52YWxpZCBkYXRhIGluIHF1ZXJ5IG1ldGhvZCwgJHtlLm1lc3NhZ2V9YCxcbiAgICAgICAgfSksKVxuICAgICAgfVxuICAgIH1cblxuICAgIHN3aXRjaCAoY29udGVudFR5cGUpIHtcbiAgICAgIGNhc2UgJ2FwcGxpY2F0aW9uL2pzb24nOiB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgcmVzID0gSlNPTi5zdHJpbmdpZnkoZGF0YSlcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBjb2RlOiBFUlJPUlMuSU5WQUxJRF9QQVJBTVMsXG4gICAgICAgICAgICBtc2c6IGBbJHtDT01QT05FTlRfTkFNRX0uY2FsbENvbnRhaW5lcl0gaW52YWxpZCBkYXRhIHdpdGggY29udGVudC10eXBlOiBhcHBsaWNhdGlvbi9qc29uLCAke2UubWVzc2FnZX1gLFxuICAgICAgICAgIH0pLClcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgY2FzZSAnYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkJzoge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGNvbnN0IHFzID0gb2JqZWN0MlFzKGRhdGEpXG4gICAgICAgICAgaWYgKHFzKSB7XG4gICAgICAgICAgICByZXMgPSBxc1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihKU09OLnN0cmluZ2lmeSh7XG4gICAgICAgICAgICBjb2RlOiBFUlJPUlMuSU5WQUxJRF9QQVJBTVMsXG4gICAgICAgICAgICBtc2c6IGBbJHtDT01QT05FTlRfTkFNRX0uY2FsbENvbnRhaW5lcl0gaW52YWxpZCBkYXRhIHdpdGggY29udGVudC10eXBlOiBhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWQsJHtlLm1lc3NhZ2V9YCxcbiAgICAgICAgICB9KSwpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuIl19