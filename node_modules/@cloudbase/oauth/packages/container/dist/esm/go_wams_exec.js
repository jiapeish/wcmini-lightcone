var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
if (typeof global !== 'undefined') {
}
else if (typeof window !== 'undefined') {
    window.global = window;
}
else if (typeof self !== 'undefined') {
    self.global = self;
}
else {
    throw new Error('cannot export Go (neither global, window nor self is defined)');
}
if (!global.require && typeof require !== 'undefined') {
}
var enosys = function () {
    var err = new Error('not implemented');
    err.code = 'ENOSYS';
    return err;
};
if (!global.fs) {
    var outputBuf_1 = '';
    global.fs = {
        constants: { O_WRONLY: -1, O_RDWR: -1, O_CREAT: -1, O_TRUNC: -1, O_APPEND: -1, O_EXCL: -1 },
        writeSync: function (fd, buf) {
            outputBuf_1 += decoder.decode(buf);
            var nl = outputBuf_1.lastIndexOf('\n');
            if (nl != -1) {
                console.log(outputBuf_1.substr(0, nl));
                outputBuf_1 = outputBuf_1.substr(nl + 1);
            }
            return buf.length;
        },
        write: function (fd, buf, offset, length, position, callback) {
            if (offset !== 0 || length !== buf.length || position !== null) {
                callback(enosys());
                return;
            }
            var n = this.writeSync(fd, buf);
            callback(null, n);
        },
        chmod: function (path, mode, callback) {
            callback(enosys());
        },
        chown: function (path, uid, gid, callback) {
            callback(enosys());
        },
        close: function (fd, callback) {
            callback(enosys());
        },
        fchmod: function (fd, mode, callback) {
            callback(enosys());
        },
        fchown: function (fd, uid, gid, callback) {
            callback(enosys());
        },
        fstat: function (fd, callback) {
            callback(enosys());
        },
        fsync: function (fd, callback) {
            callback(null);
        },
        ftruncate: function (fd, length, callback) {
            callback(enosys());
        },
        lchown: function (path, uid, gid, callback) {
            callback(enosys());
        },
        link: function (path, link, callback) {
            callback(enosys());
        },
        lstat: function (path, callback) {
            callback(enosys());
        },
        mkdir: function (path, perm, callback) {
            callback(enosys());
        },
        open: function (path, flags, mode, callback) {
            callback(enosys());
        },
        read: function (fd, buffer, offset, length, position, callback) {
            callback(enosys());
        },
        readdir: function (path, callback) {
            callback(enosys());
        },
        readlink: function (path, callback) {
            callback(enosys());
        },
        rename: function (from, to, callback) {
            callback(enosys());
        },
        rmdir: function (path, callback) {
            callback(enosys());
        },
        stat: function (path, callback) {
            callback(enosys());
        },
        symlink: function (path, link, callback) {
            callback(enosys());
        },
        truncate: function (path, length, callback) {
            callback(enosys());
        },
        unlink: function (path, callback) {
            callback(enosys());
        },
        utimes: function (path, atime, mtime, callback) {
            callback(enosys());
        },
    };
}
if (!global.process) {
    global.process = {
        getuid: function () {
            return -1;
        },
        getgid: function () {
            return -1;
        },
        geteuid: function () {
            return -1;
        },
        getegid: function () {
            return -1;
        },
        getgroups: function () {
            throw enosys();
        },
        pid: -1,
        ppid: -1,
        umask: function () {
            throw enosys();
        },
        cwd: function () {
            throw enosys();
        },
        chdir: function () {
            throw enosys();
        },
    };
}
if (!global.crypto) {
    throw new Error('globalThis.crypto is not available, polyfill required (crypto.getRandomValues only)');
}
if (!global.performance) {
    throw new Error('globalThis.performance is not available, polyfill required (performance.now only)');
}
if (!global.TextEncoder) {
    throw new Error('globalThis.TextEncoder is not available, polyfill required');
}
if (!global.TextDecoder) {
    throw new Error('globalThis.TextDecoder is not available, polyfill required');
}
var encoder = new TextEncoder('utf-8');
var decoder = new TextDecoder('utf-8');
var logLine = [];
global.Go = (function () {
    function class_1() {
        var _this = this;
        this._callbackTimeouts = new Map();
        this._nextCallbackTimeoutID = 1;
        var mem = function () {
            return new DataView(_this._inst.exports.memory.buffer);
        };
        var setInt64 = function (addr, v) {
            mem().setUint32(addr + 0, v, true);
            mem().setUint32(addr + 4, Math.floor(v / 4294967296), true);
        };
        var getInt64 = function (addr) {
            var low = mem().getUint32(addr + 0, true);
            var high = mem().getInt32(addr + 4, true);
            return low + high * 4294967296;
        };
        var loadValue = function (addr) {
            var f = mem().getFloat64(addr, true);
            if (f === 0) {
                return undefined;
            }
            if (!isNaN(f)) {
                return f;
            }
            var id = mem().getUint32(addr, true);
            return _this._values[id];
        };
        var storeValue = function (addr, v) {
            var nanHead = 0x7ff80000;
            if (typeof v === 'number') {
                if (isNaN(v)) {
                    mem().setUint32(addr + 4, nanHead, true);
                    mem().setUint32(addr, 0, true);
                    return;
                }
                if (v === 0) {
                    mem().setUint32(addr + 4, nanHead, true);
                    mem().setUint32(addr, 1, true);
                    return;
                }
                mem().setFloat64(addr, v, true);
                return;
            }
            switch (v) {
                case undefined:
                    mem().setFloat64(addr, 0, true);
                    return;
                case null:
                    mem().setUint32(addr + 4, nanHead, true);
                    mem().setUint32(addr, 2, true);
                    return;
                case true:
                    mem().setUint32(addr + 4, nanHead, true);
                    mem().setUint32(addr, 3, true);
                    return;
                case false:
                    mem().setUint32(addr + 4, nanHead, true);
                    mem().setUint32(addr, 4, true);
                    return;
            }
            var id = _this._ids.get(v);
            if (id === undefined) {
                id = _this._idPool.pop();
                if (id === undefined) {
                    id = _this._values.length;
                }
                _this._values[id] = v;
                _this._goRefCounts[id] = 0;
                _this._ids.set(v, id);
            }
            _this._goRefCounts[id]++;
            var typeFlag = 1;
            switch (typeof v) {
                case 'string':
                    typeFlag = 2;
                    break;
                case 'symbol':
                    typeFlag = 3;
                    break;
                case 'function':
                    typeFlag = 4;
                    break;
            }
            mem().setUint32(addr + 4, nanHead | typeFlag, true);
            mem().setUint32(addr, id, true);
        };
        var loadSlice = function (array, len, cap) {
            return new Uint8Array(_this._inst.exports.memory.buffer, array, len);
        };
        var loadSliceOfValues = function (array, len, cap) {
            var a = new Array(len);
            for (var i = 0; i < len; i++) {
                a[i] = loadValue(array + i * 8);
            }
            return a;
        };
        var loadString = function (ptr, len) {
            return decoder.decode(new DataView(_this._inst.exports.memory.buffer, ptr, len));
        };
        var timeOrigin = Date.now() - performance.now();
        this.importObject = {
            wasi_snapshot_preview1: {
                fd_write: function (fd, iovs_ptr, iovs_len, nwritten_ptr) {
                    var nwritten = 0;
                    if (fd == 1) {
                        for (var iovs_i = 0; iovs_i < iovs_len; iovs_i++) {
                            var iov_ptr = iovs_ptr + iovs_i * 8;
                            var ptr = mem().getUint32(iov_ptr + 0, true);
                            var len = mem().getUint32(iov_ptr + 4, true);
                            nwritten += len;
                            for (var i = 0; i < len; i++) {
                                var c = mem().getUint8(ptr + i);
                                if (c == 13) {
                                }
                                else if (c == 10) {
                                    var line = decoder.decode(new Uint8Array(logLine));
                                    logLine = [];
                                    console.log(line);
                                }
                                else {
                                    logLine.push(c);
                                }
                            }
                        }
                    }
                    else {
                        console.error('invalid file descriptor:', fd);
                    }
                    mem().setUint32(nwritten_ptr, nwritten, true);
                    return 0;
                },
                fd_close: function () { return 0; },
                fd_fdstat_get: function () { return 0; },
                fd_seek: function () { return 0; },
                proc_exit: function (code) {
                    if (global.process) {
                        process.exit(code);
                    }
                    else {
                        throw 'trying to exit with code ' + code;
                    }
                },
                random_get: function (bufPtr, bufLen) {
                    crypto.getRandomValues(loadSlice(bufPtr, bufLen));
                    return 0;
                },
            },
            env: {
                'runtime.ticks': function () {
                    return timeOrigin + performance.now();
                },
                'runtime.sleepTicks': function (timeout) {
                    setTimeout(_this._inst.exports.go_scheduler, timeout);
                },
                'syscall/js.finalizeRef': function (sp) {
                    var id = mem().getUint32(sp, true);
                    _this._goRefCounts[id]--;
                    if (_this._goRefCounts[id] === 0) {
                        var v = _this._values[id];
                        _this._values[id] = null;
                        _this._ids.delete(v);
                        _this._idPool.push(id);
                    }
                },
                'syscall/js.stringVal': function (ret_ptr, value_ptr, value_len) {
                    var s = loadString(value_ptr, value_len);
                    storeValue(ret_ptr, s);
                },
                'syscall/js.valueGet': function (retval, v_addr, p_ptr, p_len) {
                    var prop = loadString(p_ptr, p_len);
                    var value = loadValue(v_addr);
                    var result = Reflect.get(value, prop);
                    storeValue(retval, result);
                },
                'syscall/js.valueSet': function (v_addr, p_ptr, p_len, x_addr) {
                    var v = loadValue(v_addr);
                    var p = loadString(p_ptr, p_len);
                    var x = loadValue(x_addr);
                    Reflect.set(v, p, x);
                },
                'syscall/js.valueDelete': function (v_addr, p_ptr, p_len) {
                    var v = loadValue(v_addr);
                    var p = loadString(p_ptr, p_len);
                    Reflect.deleteProperty(v, p);
                },
                'syscall/js.valueIndex': function (ret_addr, v_addr, i) {
                    storeValue(ret_addr, Reflect.get(loadValue(v_addr), i));
                },
                'syscall/js.valueSetIndex': function (v_addr, i, x_addr) {
                    Reflect.set(loadValue(v_addr), i, loadValue(x_addr));
                },
                'syscall/js.valueCall': function (ret_addr, v_addr, m_ptr, m_len, args_ptr, args_len, args_cap) {
                    var v = loadValue(v_addr);
                    var name = loadString(m_ptr, m_len);
                    var args = loadSliceOfValues(args_ptr, args_len, args_cap);
                    try {
                        var m = Reflect.get(v, name);
                        storeValue(ret_addr, Reflect.apply(m, v, args));
                        mem().setUint8(ret_addr + 8, 1);
                    }
                    catch (err) {
                        storeValue(ret_addr, err);
                        mem().setUint8(ret_addr + 8, 0);
                    }
                },
                'syscall/js.valueInvoke': function (ret_addr, v_addr, args_ptr, args_len, args_cap) {
                    try {
                        var v = loadValue(v_addr);
                        var args = loadSliceOfValues(args_ptr, args_len, args_cap);
                        storeValue(ret_addr, Reflect.apply(v, undefined, args));
                        mem().setUint8(ret_addr + 8, 1);
                    }
                    catch (err) {
                        storeValue(ret_addr, err);
                        mem().setUint8(ret_addr + 8, 0);
                    }
                },
                'syscall/js.valueNew': function (ret_addr, v_addr, args_ptr, args_len, args_cap) {
                    var v = loadValue(v_addr);
                    var args = loadSliceOfValues(args_ptr, args_len, args_cap);
                    try {
                        storeValue(ret_addr, Reflect.construct(v, args));
                        mem().setUint8(ret_addr + 8, 1);
                    }
                    catch (err) {
                        storeValue(ret_addr, err);
                        mem().setUint8(ret_addr + 8, 0);
                    }
                },
                'syscall/js.valueLength': function (v_addr) {
                    return loadValue(v_addr).length;
                },
                'syscall/js.valuePrepareString': function (ret_addr, v_addr) {
                    var s = String(loadValue(v_addr));
                    var str = encoder.encode(s);
                    storeValue(ret_addr, str);
                    setInt64(ret_addr + 8, str.length);
                },
                'syscall/js.valueLoadString': function (v_addr, slice_ptr, slice_len, slice_cap) {
                    var str = loadValue(v_addr);
                    loadSlice(slice_ptr, slice_len, slice_cap).set(str);
                },
                'syscall/js.valueInstanceOf': function (v_addr, t_addr) {
                    return loadValue(v_addr) instanceof loadValue(t_addr);
                },
                'syscall/js.copyBytesToGo': function (ret_addr, dest_addr, dest_len, dest_cap, source_addr) {
                    var num_bytes_copied_addr = ret_addr;
                    var returned_status_addr = ret_addr + 4;
                    var dst = loadSlice(dest_addr, dest_len);
                    var src = loadValue(source_addr);
                    if (!(src instanceof Uint8Array || src instanceof Uint8ClampedArray)) {
                        mem().setUint8(returned_status_addr, 0);
                        return;
                    }
                    var toCopy = src.subarray(0, dst.length);
                    dst.set(toCopy);
                    setInt64(num_bytes_copied_addr, toCopy.length);
                    mem().setUint8(returned_status_addr, 1);
                },
                'syscall/js.copyBytesToJS': function (ret_addr, dest_addr, source_addr, source_len, source_cap) {
                    var num_bytes_copied_addr = ret_addr;
                    var returned_status_addr = ret_addr + 4;
                    var dst = loadValue(dest_addr);
                    var src = loadSlice(source_addr, source_len);
                    if (!(dst instanceof Uint8Array || dst instanceof Uint8ClampedArray)) {
                        mem().setUint8(returned_status_addr, 0);
                        return;
                    }
                    var toCopy = src.subarray(0, dst.length);
                    dst.set(toCopy);
                    setInt64(num_bytes_copied_addr, toCopy.length);
                    mem().setUint8(returned_status_addr, 1);
                },
            },
        };
    }
    class_1.prototype.run = function (instance) {
        return __awaiter(this, void 0, void 0, function () {
            var mem, callbackPromise;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this._inst = instance;
                        this._values = [
                            NaN,
                            0,
                            null,
                            true,
                            false,
                            global,
                            this,
                        ];
                        this._goRefCounts = [];
                        this._ids = new Map();
                        this._idPool = [];
                        this.exited = false;
                        mem = new DataView(this._inst.exports.memory.buffer);
                        _a.label = 1;
                    case 1:
                        if (!true) return [3, 3];
                        callbackPromise = new Promise(function (resolve) {
                            _this._resolveCallbackPromise = function () {
                                if (_this.exited) {
                                    throw new Error('bad callback: Go program has already exited');
                                }
                                setTimeout(resolve, 0);
                            };
                        });
                        this._inst.exports._start();
                        if (this.exited) {
                            return [3, 3];
                        }
                        return [4, callbackPromise];
                    case 2:
                        _a.sent();
                        return [3, 1];
                    case 3: return [2];
                }
            });
        });
    };
    class_1.prototype._resume = function () {
        if (this.exited) {
            throw new Error('Go program has already exited');
        }
        this._inst.exports.resume();
        if (this.exited) {
            this._resolveExitPromise();
        }
    };
    class_1.prototype._makeFuncWrapper = function (id) {
        var go = this;
        return function () {
            var event = { id: id, this: this, args: arguments };
            go._pendingEvent = event;
            go._resume();
            return event.result;
        };
    };
    return class_1;
}());
export default global.Go;
//# sourceMappingURL=data:application/json;base64,