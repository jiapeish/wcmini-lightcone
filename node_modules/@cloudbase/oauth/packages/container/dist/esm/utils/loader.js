var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import Go from '../go_wams_exec';
import { parseURL } from '.';
function instantiateStreaming(resp, importObject, brotliCompressed) {
    if (brotliCompressed === void 0) { brotliCompressed = false; }
    return __awaiter(this, void 0, void 0, function () {
        var source, buffer;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!(brotliCompressed || !WebAssembly.instantiateStreaming)) return [3, 3];
                    return [4, resp];
                case 1: return [4, (_a.sent()).arrayBuffer()];
                case 2:
                    source = _a.sent();
                    if (brotliCompressed) {
                        throw new Error('do not support *.br');
                    }
                    buffer = source;
                    return [2, WebAssembly.instantiate(buffer, importObject)];
                case 3: return [2, WebAssembly.instantiateStreaming(resp, importObject)];
            }
        });
    });
}
function isBrotliCompressed(url) {
    var brotliCompressed = false;
    var pathname = '';
    try {
        var location_1 = parseURL(url);
        pathname = location_1.pathname;
    }
    catch (e) {
        pathname = url;
    }
    if (/\.br$/.test(pathname)) {
        brotliCompressed = true;
    }
    return brotliCompressed;
}
export function getExportFunction(url, module, mode) {
    if (mode === void 0) { mode = 'go'; }
    return __awaiter(this, void 0, void 0, function () {
        var importObject, go, brotliCompressed, reuslt;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    importObject = __assign({ env: {
                            memoryBase: 0,
                            tableBase: 0,
                            memory: new WebAssembly.Memory({
                                initial: 256,
                            }),
                        } }, module);
                    brotliCompressed = isBrotliCompressed(url);
                    if (mode === 'go') {
                        go = new Go();
                        go._initedModulePromise = new Promise(function (resolve) {
                            go._initedModuleResolve = resolve;
                        });
                        importObject = __assign(__assign({}, go.importObject), { env: __assign(__assign({}, go.importObject.env), { exportModule: function (module) {
                                    return go._initedModuleResolve(module);
                                } }) });
                    }
                    return [4, instantiateStreaming(fetch(url), importObject, brotliCompressed)];
                case 1:
                    reuslt = _a.sent();
                    if (!(mode === 'go')) return [3, 3];
                    return [4, Promise.race([
                            go.run(reuslt.instance),
                            new Promise(function (resolve) { return setTimeout(function () {
                                resolve(null);
                            }, 500); }),
                        ])];
                case 2:
                    _a.sent();
                    return [2, {
                            callContainer: window.callContainer,
                            initContainer: window.initContainer,
                        }];
                case 3: return [2, reuslt.instance.exports];
            }
        });
    });
}
export function loadJSExportFunction(config) {
    return __awaiter(this, void 0, void 0, function () {
        var _a, vm, vender, VENDER_KEY;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    _a = config || {}, vm = _a.vm, vender = _a.vender;
                    VENDER_KEY = 'cloudbase_private_link_vender';
                    if (!(vender || !Object.prototype.hasOwnProperty.call(document.defaultView, VENDER_KEY))) return [3, 2];
                    return [4, loadUmdModule(vender
                            || 'https://qbase.cdn-go.cn/lcap/lcap-resource-cdngo/-/release/_npm/@cloudbase/privatelink-vender@0.0.2/dist/cdn/cloudbase.privatelink.vender.js', VENDER_KEY)];
                case 1:
                    _b.sent();
                    _b.label = 2;
                case 2: return [2, loadUmdModule(vm
                        || 'https://qbase.cdn-go.cn/lcap/lcap-resource-cdngo/-/release/_npm/@cloudbase/privatelink@0.0.1/dist/cdn/cloudbase.privatelink.vm.js', 'cloudbase_private_link')];
            }
        });
    });
}
function loadUmdModule(jsUrl, umdModuleName, targetDoc) {
    if (targetDoc === void 0) { targetDoc = document; }
    return new Promise(function (resolve, reject) {
        var win = targetDoc.defaultView;
        var script = targetDoc.createElement('script');
        script.setAttribute('src', jsUrl);
        script.setAttribute('class', umdModuleName);
        script.addEventListener('load', function () {
            if (Object.prototype.hasOwnProperty.call(win, umdModuleName)) {
                return resolve(win[umdModuleName]);
            }
            var error = new Error("Fail to load UMD module ".concat(umdModuleName, " from [").concat(jsUrl, "]."));
            return reject(error);
        });
        script.addEventListener('error', function (e) {
            var error = new Error("main bundle [".concat(umdModuleName, "] load failed from [").concat(jsUrl, "]: ").concat((e === null || e === void 0 ? void 0 : e.message) || ''));
            reject(error);
        });
        if (targetDoc.body) {
            targetDoc.body.appendChild(script);
        }
        else {
            targetDoc.head.appendChild(script);
        }
    });
}
//# sourceMappingURL=data:application/json;base64,