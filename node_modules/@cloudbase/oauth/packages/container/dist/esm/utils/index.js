import { constants } from '@cloudbase/utilities';
import { COMPONENT_NAME } from '../constants';
var ERRORS = constants.ERRORS;
export function parseURL(_url) {
    if (document) {
        var a = document.createElement('a');
        a.href = _url;
        return a;
    }
    return new URL(new Request(_url).url);
}
export function isBuffer(buf) {
    return buf instanceof ArrayBuffer || ArrayBuffer.isView(buf);
}
function object2Qs(data) {
    var list = Object.entries(data || {}).reduce(function (list, _a) {
        var key = _a[0], value = _a[1];
        list.push("".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(value)));
        return list;
    }, []);
    if (list.length) {
        return list.join('&');
    }
}
export function serializeRequestBody(headers, data, method) {
    if (method === void 0) { method = 'POST'; }
    var res = data;
    var contentTypeKey = 'Content-Type';
    if (typeof data === 'object' && !isBuffer(data)) {
        if (!headers[contentTypeKey] && !headers['content-type']) {
            headers[contentTypeKey] = 'application/json';
        }
        var contentType = headers[contentTypeKey] || headers['content-type'];
        if (method === 'GET') {
            try {
                return object2Qs(data) || '';
            }
            catch (e) {
                throw new Error(JSON.stringify({
                    code: ERRORS.INVALID_PARAMS,
                    msg: "[".concat(COMPONENT_NAME, ".callContainer] invalid data in query method, ").concat(e.message),
                }));
            }
        }
        switch (contentType) {
            case 'application/json': {
                try {
                    res = JSON.stringify(data);
                }
                catch (e) {
                    throw new Error(JSON.stringify({
                        code: ERRORS.INVALID_PARAMS,
                        msg: "[".concat(COMPONENT_NAME, ".callContainer] invalid data with content-type: application/json, ").concat(e.message),
                    }));
                }
                break;
            }
            case 'application/x-www-form-urlencoded': {
                try {
                    var qs_1 = object2Qs(data);
                    if (qs_1) {
                        res = qs_1;
                    }
                }
                catch (e) {
                    throw new Error(JSON.stringify({
                        code: ERRORS.INVALID_PARAMS,
                        msg: "[".concat(COMPONENT_NAME, ".callContainer] invalid data with content-type: application/x-www-form-urlencoded,").concat(e.message),
                    }));
                }
                break;
            }
        }
    }
    return res;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdXRpbHMvaW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLHNCQUFzQixDQUFBO0FBQ2hELE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxjQUFjLENBQUE7QUFDckMsSUFBQSxNQUFNLEdBQUssU0FBUyxPQUFkLENBQWM7QUFFNUIsTUFBTSxVQUFVLFFBQVEsQ0FBQyxJQUFZO0lBQ25DLElBQUksUUFBUSxFQUFFO1FBQ1osSUFBTSxDQUFDLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxHQUFHLENBQUMsQ0FBQTtRQUNyQyxDQUFDLENBQUMsSUFBSSxHQUFHLElBQUksQ0FBQTtRQUNiLE9BQU8sQ0FBQyxDQUFBO0tBQ1Q7SUFDRCxPQUFPLElBQUksR0FBRyxDQUFDLElBQUksT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFBO0FBQ3ZDLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEdBQVE7SUFDL0IsT0FBTyxHQUFHLFlBQVksV0FBVyxJQUFJLFdBQVcsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLENBQUE7QUFDOUQsQ0FBQztBQUVELFNBQVMsU0FBUyxDQUFDLElBQUk7SUFDckIsSUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE9BQU8sQ0FBQyxJQUFJLElBQUksRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLFVBQUMsSUFBSSxFQUFFLEVBQThCO1lBQTdCLEdBQUcsUUFBQSxFQUFFLEtBQUssUUFBQTtRQUMvRCxJQUFJLENBQUMsSUFBSSxDQUFDLFVBQUcsa0JBQWtCLENBQUMsR0FBRyxDQUFDLGNBQUksa0JBQWtCLENBQUMsS0FBSyxDQUFDLENBQUUsQ0FBQyxDQUFBO1FBQ3BFLE9BQU8sSUFBSSxDQUFBO0lBQ2IsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFBO0lBQ04sSUFBSSxJQUFJLENBQUMsTUFBTSxFQUFFO1FBQ2YsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFBO0tBQ3RCO0FBQ0gsQ0FBQztBQUVELE1BQU0sVUFBVSxvQkFBb0IsQ0FBSSxPQUFPLEVBQUUsSUFBTyxFQUFFLE1BQWU7SUFBZix1QkFBQSxFQUFBLGVBQWU7SUFDdkUsSUFBSSxHQUFHLEdBQWUsSUFBSSxDQUFBO0lBQzFCLElBQU0sY0FBYyxHQUFHLGNBQWMsQ0FBQTtJQUNyQyxJQUFJLE9BQU8sSUFBSSxLQUFLLFFBQVEsSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUMvQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLGNBQWMsQ0FBQyxFQUFFO1lBQ3hELE9BQU8sQ0FBQyxjQUFjLENBQUMsR0FBRyxrQkFBa0IsQ0FBQTtTQUM3QztRQUVELElBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxjQUFjLENBQUMsSUFBSSxPQUFPLENBQUMsY0FBYyxDQUFDLENBQUE7UUFFdEUsSUFBSSxNQUFNLEtBQUssS0FBSyxFQUFFO1lBQ3BCLElBQUk7Z0JBQ0YsT0FBTyxTQUFTLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO2FBQzdCO1lBQUMsT0FBTyxDQUFDLEVBQUU7Z0JBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO29CQUM3QixJQUFJLEVBQUUsTUFBTSxDQUFDLGNBQWM7b0JBQzNCLEdBQUcsRUFBRSxXQUFJLGNBQWMsMkRBQWlELENBQUMsQ0FBQyxPQUFPLENBQUU7aUJBQ3BGLENBQUMsQ0FBRSxDQUFBO2FBQ0w7U0FDRjtRQUVELFFBQVEsV0FBVyxFQUFFO1lBQ25CLEtBQUssa0JBQWtCLENBQUMsQ0FBQztnQkFDdkIsSUFBSTtvQkFDRixHQUFHLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQTtpQkFDM0I7Z0JBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO3dCQUM3QixJQUFJLEVBQUUsTUFBTSxDQUFDLGNBQWM7d0JBQzNCLEdBQUcsRUFBRSxXQUFJLGNBQWMsK0VBQXFFLENBQUMsQ0FBQyxPQUFPLENBQUU7cUJBQ3hHLENBQUMsQ0FBRSxDQUFBO2lCQUNMO2dCQUNELE1BQUs7YUFDTjtZQUNELEtBQUssbUNBQW1DLENBQUMsQ0FBQztnQkFDeEMsSUFBSTtvQkFDRixJQUFNLElBQUUsR0FBRyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUE7b0JBQzFCLElBQUksSUFBRSxFQUFFO3dCQUNOLEdBQUcsR0FBRyxJQUFFLENBQUE7cUJBQ1Q7aUJBQ0Y7Z0JBQUMsT0FBTyxDQUFDLEVBQUU7b0JBQ1YsTUFBTSxJQUFJLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDO3dCQUM3QixJQUFJLEVBQUUsTUFBTSxDQUFDLGNBQWM7d0JBQzNCLEdBQUcsRUFBRSxXQUFJLGNBQWMsK0ZBQXFGLENBQUMsQ0FBQyxPQUFPLENBQUU7cUJBQ3hILENBQUMsQ0FBRSxDQUFBO2lCQUNMO2dCQUNELE1BQUs7YUFDTjtTQUNGO0tBQ0Y7SUFDRCxPQUFPLEdBQUcsQ0FBQTtBQUNaLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjb25zdGFudHMgfSBmcm9tICdAY2xvdWRiYXNlL3V0aWxpdGllcydcbmltcG9ydCB7IENPTVBPTkVOVF9OQU1FIH0gZnJvbSAnLi4vY29uc3RhbnRzJ1xuY29uc3QgeyBFUlJPUlMgfSA9IGNvbnN0YW50c1xuXG5leHBvcnQgZnVuY3Rpb24gcGFyc2VVUkwoX3VybDogc3RyaW5nKSB7XG4gIGlmIChkb2N1bWVudCkge1xuICAgIGNvbnN0IGEgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdhJylcbiAgICBhLmhyZWYgPSBfdXJsXG4gICAgcmV0dXJuIGFcbiAgfVxuICByZXR1cm4gbmV3IFVSTChuZXcgUmVxdWVzdChfdXJsKS51cmwpXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0J1ZmZlcihidWY6IGFueSkge1xuICByZXR1cm4gYnVmIGluc3RhbmNlb2YgQXJyYXlCdWZmZXIgfHwgQXJyYXlCdWZmZXIuaXNWaWV3KGJ1Zilcbn1cblxuZnVuY3Rpb24gb2JqZWN0MlFzKGRhdGEpIHtcbiAgY29uc3QgbGlzdCA9IE9iamVjdC5lbnRyaWVzKGRhdGEgfHwge30pLnJlZHVjZSgobGlzdCwgW2tleSwgdmFsdWVdOiBbc3RyaW5nLCBzdHJpbmddKSA9PiB7XG4gICAgbGlzdC5wdXNoKGAke2VuY29kZVVSSUNvbXBvbmVudChrZXkpfT0ke2VuY29kZVVSSUNvbXBvbmVudCh2YWx1ZSl9YClcbiAgICByZXR1cm4gbGlzdFxuICB9LCBbXSlcbiAgaWYgKGxpc3QubGVuZ3RoKSB7XG4gICAgcmV0dXJuIGxpc3Quam9pbignJicpXG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNlcmlhbGl6ZVJlcXVlc3RCb2R5PFQ+KGhlYWRlcnMsIGRhdGE6IFQsIG1ldGhvZCA9ICdQT1NUJyk6IFQgfCBzdHJpbmcge1xuICBsZXQgcmVzOiBUIHwgc3RyaW5nID0gZGF0YVxuICBjb25zdCBjb250ZW50VHlwZUtleSA9ICdDb250ZW50LVR5cGUnXG4gIGlmICh0eXBlb2YgZGF0YSA9PT0gJ29iamVjdCcgJiYgIWlzQnVmZmVyKGRhdGEpKSB7XG4gICAgaWYgKCFoZWFkZXJzW2NvbnRlbnRUeXBlS2V5XSAmJiAhaGVhZGVyc1snY29udGVudC10eXBlJ10pIHtcbiAgICAgIGhlYWRlcnNbY29udGVudFR5cGVLZXldID0gJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgfVxuXG4gICAgY29uc3QgY29udGVudFR5cGUgPSBoZWFkZXJzW2NvbnRlbnRUeXBlS2V5XSB8fCBoZWFkZXJzWydjb250ZW50LXR5cGUnXVxuXG4gICAgaWYgKG1ldGhvZCA9PT0gJ0dFVCcpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHJldHVybiBvYmplY3QyUXMoZGF0YSkgfHwgJydcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgICBjb2RlOiBFUlJPUlMuSU5WQUxJRF9QQVJBTVMsXG4gICAgICAgICAgbXNnOiBgWyR7Q09NUE9ORU5UX05BTUV9LmNhbGxDb250YWluZXJdIGludmFsaWQgZGF0YSBpbiBxdWVyeSBtZXRob2QsICR7ZS5tZXNzYWdlfWAsXG4gICAgICAgIH0pLClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBzd2l0Y2ggKGNvbnRlbnRUeXBlKSB7XG4gICAgICBjYXNlICdhcHBsaWNhdGlvbi9qc29uJzoge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlcyA9IEpTT04uc3RyaW5naWZ5KGRhdGEpXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgY29kZTogRVJST1JTLklOVkFMSURfUEFSQU1TLFxuICAgICAgICAgICAgbXNnOiBgWyR7Q09NUE9ORU5UX05BTUV9LmNhbGxDb250YWluZXJdIGludmFsaWQgZGF0YSB3aXRoIGNvbnRlbnQtdHlwZTogYXBwbGljYXRpb24vanNvbiwgJHtlLm1lc3NhZ2V9YCxcbiAgICAgICAgICB9KSwpXG4gICAgICAgIH1cbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIGNhc2UgJ2FwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZCc6IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjb25zdCBxcyA9IG9iamVjdDJRcyhkYXRhKVxuICAgICAgICAgIGlmIChxcykge1xuICAgICAgICAgICAgcmVzID0gcXNcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgY29kZTogRVJST1JTLklOVkFMSURfUEFSQU1TLFxuICAgICAgICAgICAgbXNnOiBgWyR7Q09NUE9ORU5UX05BTUV9LmNhbGxDb250YWluZXJdIGludmFsaWQgZGF0YSB3aXRoIGNvbnRlbnQtdHlwZTogYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkLCR7ZS5tZXNzYWdlfWAsXG4gICAgICAgICAgfSksKVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiByZXNcbn1cbiJdfQ==