var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
import { constants, utils, helpers } from '@cloudbase/utilities';
import { isBuffer, parseURL, serializeRequestBody } from './utils';
import { COMPONENT_NAME } from './constants';
var ERRORS = constants.ERRORS, COMMUNITY_SITE_URL = constants.COMMUNITY_SITE_URL;
var execCallback = utils.execCallback, printWarn = utils.printWarn;
var catchErrorsDecorator = helpers.catchErrorsDecorator;
var getExportFunction = function () {
    throw new Error('getExportFunction 未实现');
};
var loadJSExportFunction = function () {
    throw new Error('loadJSExportFunction 未实现');
};
if (globalThis.IS_MP_BUILD) {
    getExportFunction = function () {
        new Error('小程序不支持 wasm 加载');
    };
    loadJSExportFunction = function (jsUrl) {
        if (jsUrl) {
            new Error('小程序不支持动态 js 加载');
        }
        return {
            initContainer: globalThis.cloudbase_private_link.initContainer,
            callContainer: globalThis.cloudbase_private_link.callContainer,
        };
    };
}
else {
    var loader = require('./utils/loader');
    getExportFunction = loader.getExportFunction;
    loadJSExportFunction = loader.loadJSExportFunction;
}
var InvalieParamsError = (function (_super) {
    __extends(InvalieParamsError, _super);
    function InvalieParamsError(scope, message) {
        var _this = this;
        var msg = JSON.stringify({
            code: ERRORS.INVALID_PARAMS,
            msg: "[".concat(scope, "] ").concat(message),
        });
        _this = _super.call(this, msg) || this;
        _this.code = ERRORS.INVALID_PARAMS;
        return _this;
    }
    InvalieParamsError.prototype.toJSON = function () {
        return {
            code: this.code,
            message: this.message,
        };
    };
    return InvalieParamsError;
}(Error));
function genContainerError(data, scope, defaultMessage) {
    if (scope === void 0) { scope = COMPONENT_NAME; }
    if (defaultMessage === void 0) { defaultMessage = 'call container error'; }
    var error = data instanceof Error ? data : new Error("[".concat(scope, "] ").concat((data === null || data === void 0 ? void 0 : data.message) || defaultMessage));
    error.code = (data === null || data === void 0 ? void 0 : data.code) || 'UNKNOWN_ERROR';
    return error;
}
export var CloudbaseContainers = (function () {
    function CloudbaseContainers(config) {
        var _this = this;
        var _a;
        this.config = __assign(__assign({}, config), { jsUrl: typeof config.jsUrl === 'string'
                ? {
                    vm: config.jsUrl,
                }
                : config.jsUrl });
        if (!this.config.wasmUrl && this.config.publicKey) {
        }
        else if (!this.config.wasmUrl && !((_a = this.config.jsUrl) === null || _a === void 0 ? void 0 : _a.vm) && !globalThis.cloudbase_private_link) {
            throw new InvalieParamsError("".concat(COMPONENT_NAME), '缺少 privatelink sdk 地址');
        }
        if (this.config.wasmUrl) {
            this.wasm = getExportFunction(this.config.wasmUrl).catch(function (e) {
                if (_this.config.jsUrl) {
                    console.warn('load wams error, fall back to use js', e);
                    return loadJSExportFunction(_this.config.jsUrl);
                }
                if (globalThis.cloudbase_private_link) {
                    return globalThis.cloudbase_private_link;
                }
                throw e;
            });
        }
        else if (this.config.jsUrl || this.config.publicKey) {
            this.wasm = loadJSExportFunction(this.config.jsUrl);
        }
        else {
            this.wasm = Promise.resolve({
                initContainer: globalThis.cloudbase_private_link.initContainer,
                callContainer: globalThis.cloudbase_private_link.callContainer,
            });
        }
    }
    CloudbaseContainers.prototype.callContainer = function (options, callback) {
        return __awaiter(this, void 0, void 0, function () {
            var SCOPE, callContainer, _a, url, method, header, data, timeout, dataType, responseType, restOptions, res, e_1;
            var _b, _c, _d, _e, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0: return [4, this.initContainer(this.config)];
                    case 1:
                        _g.sent();
                        SCOPE = "".concat(COMPONENT_NAME, ".callContainer");
                        return [4, this.wasm];
                    case 2:
                        callContainer = (_g.sent()).callContainer;
                        _a = __assign({}, options), url = _a.url, method = (_b = _a.method, _b === void 0 ? 'GET' : _b), header = (_c = _a.header, _c === void 0 ? {} : _c), data = _a.data, timeout = (_d = _a.timeout, _d === void 0 ? 60000 : _d), dataType = (_e = _a.dataType, _e === void 0 ? 'json' : _e), responseType = (_f = _a.responseType, _f === void 0 ? 'text' : _f), restOptions = __rest(_a, ["url", "method", "header", "data", "timeout", "dataType", "responseType"]);
                        if (!url) {
                            throw new InvalieParamsError(SCOPE, 'invalid request url');
                        }
                        if (!method) {
                            throw new InvalieParamsError(SCOPE, 'invalid request method');
                        }
                        _g.label = 3;
                    case 3:
                        _g.trys.push([3, 5, , 6]);
                        return [4, new Promise(function (resolve, reject) {
                                var params = __assign({ url: url, method: method, header: header, data: serializeRequestBody(header, data, method), timeout: timeout, dataType: dataType, responseType: responseType }, restOptions);
                                if (data
                                    && (isBuffer(params.data) || typeof params.data === 'string')
                                    && (data === null || data === void 0 ? void 0 : data.length) > 1000 * 1024 * 10) {
                                    reject(new InvalieParamsError(SCOPE, 'body too large'));
                                    return;
                                }
                                if (method === 'GET') {
                                    var getBody = params.data;
                                    if (getBody) {
                                        params.data = undefined;
                                    }
                                    if (!isBuffer(getBody) && typeof getBody !== 'string') {
                                        var list = Object.entries(getBody || {}).reduce(function (list, _a) {
                                            var key = _a[0], value = _a[1];
                                            list.push("".concat(encodeURIComponent(key), "=").concat(encodeURIComponent(String(value))));
                                            return list;
                                        }, []);
                                        if (list.length) {
                                            getBody = list.join('&');
                                        }
                                    }
                                    if (typeof params.data === 'string') {
                                        var parsedUrl = parseURL(url);
                                        if (parsedUrl.search) {
                                            parsedUrl.search += "&".concat(params.data);
                                        }
                                        else {
                                            parsedUrl.search = "?".concat(params.data);
                                        }
                                        params.url = parsedUrl.href;
                                        params.data = undefined;
                                    }
                                }
                                callContainer(__assign(__assign({}, params), { success: resolve, fail: function (res) {
                                        var data = (res || {}).data;
                                        reject(genContainerError(data, SCOPE, 'call container error'));
                                    } }));
                            })];
                    case 4:
                        res = _g.sent();
                        return [2, execCallback(callback, null, res)];
                    case 5:
                        e_1 = _g.sent();
                        execCallback(callback, e_1);
                        return [3, 6];
                    case 6: return [2];
                }
            });
        });
    };
    CloudbaseContainers.prototype.initContainer = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var initContainer;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4, this.wasm];
                    case 1:
                        initContainer = (_a.sent()).initContainer;
                        if (!this.containerInitPromise) {
                            this.containerInitPromise = new Promise(function (resolve, reject) {
                                initContainer({
                                    config: config,
                                    success: function (res) {
                                        if (String(res.statusCode) !== '200') {
                                            reject(genContainerError(res.data, "".concat(COMPONENT_NAME, ".initContainer"), 'init container fail'));
                                        }
                                        resolve(res);
                                    },
                                    fail: function (res) {
                                        reject(genContainerError(res.data, "".concat(COMPONENT_NAME, ".initContainer"), 'init container fail'));
                                        _this.containerInitPromise = null;
                                    },
                                });
                            });
                        }
                        return [2, this.containerInitPromise];
                }
            });
        });
    };
    __decorate([
        catchErrorsDecorator({
            customInfo: {
                className: 'Cloudbase',
                methodName: 'callContainer',
            },
            title: '调用失败',
            messages: [
                '请确认以下各项：',
                '  1 - 调用 callContainer() 的语法或参数是否正确',
                '  2 - 域名 & 路径是否存在',
                "\u5982\u679C\u95EE\u9898\u4F9D\u7136\u5B58\u5728\uFF0C\u5EFA\u8BAE\u5230\u5B98\u65B9\u95EE\u7B54\u793E\u533A\u63D0\u95EE\u6216\u5BFB\u627E\u5E2E\u52A9\uFF1A".concat(COMMUNITY_SITE_URL),
            ],
        }),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Function]),
        __metadata("design:returntype", Promise)
    ], CloudbaseContainers.prototype, "callContainer", null);
    return CloudbaseContainers;
}());
var component = {
    name: COMPONENT_NAME,
    namespace: 'container',
    entity: function (config) {
        if (this.containerInstance) {
            printWarn(ERRORS.INVALID_OPERATION, 'every cloudbase instance should has only one container object');
            return this.containerInstance;
        }
        var instance = new CloudbaseContainers(config);
        this.containerInstance = instance;
        this.callContainer = instance.callContainer.bind(instance);
        return this.containerInstance;
    },
};
try {
    cloudbase.registerComponent(component);
}
catch (e) { }
export function registerContainers(app) {
    try {
        app.registerComponent(component);
    }
    catch (e) {
        console.warn(e);
    }
}
//# sourceMappingURL=data:application/json;base64,