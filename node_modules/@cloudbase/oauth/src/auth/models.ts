export interface SignInRequest {
    username?: string;
    password?: string;
    verification_token?: string;
    provider_token?: string;
}

export interface SignInWithProviderRequest {
    provider_token: string;
    provider_id?: string;
}

export interface SignUpRequest {
    phone_number?: string;
    email?: string;

    verification_token?: string;
    provider_token?: string;

    username?: string;
    password?: string;
    name?: string;
    gender?: string;
    picture?: string;
    locale?: string;

    anonymous_token?: string;
}

export interface SendVerificationCodeRequest {
    phone_number?: string;
    email?: string;
    // 可选 ANY，USER，NOT_USER, CUR_USER;
    target?: string | 'ANY';
    usage?: string;
}

export interface SendVerificationCodeResponse {
    verification_id: string;
    is_user: boolean | false;
}

export interface VerifyResponse {
    verification_token: string;
    expires_in: number;
}

export interface VerifyRequest {
    verification_code: string;
    verification_id: string;
}


export interface VerifyRequest {
    verification_code: string;
    verification_id: string;
}


export interface ResetPasswordRequest {
    email: string;
    phone_number: string;
    new_password: string,
    verification_token: string;
}

export interface ProviderBindRequest {
    provider_token: string;
    expires_in: number;
}

export interface GrantProviderTokenRequest {
    provider_id: string;
    provider_redirect_uri?: string;
    provider_code?: string;
    provider_access_token?: string;
    provider_id_token?: string;
    provider_params?: Map<string, string>;
}

export interface GrantProviderTokenResponse {
    provider_token: string;
    expires_in: number;
    provider_profile?: ProviderProfile;
}

export interface PatchProviderTokenRequest {
    provider_token: string;
    provider_params: Map<string, string>;
}

export interface PatchProviderTokenResponse {
    provider_token: string;
    expires_in: number;
    provider_profile: ProviderProfile;
}

export interface GenProviderRedirectUriRequest {
    provider_id: string;
    redirect_uri: string;
    state: string;
    scope?: string;
    response_type?: string;
    other_params?: Map<string, string>;
}

export interface GenProviderRedirectUriResponse {
    uri: string;
}

export interface BindWithProviderRequest {
    provider_token: string;
}

export interface BindWithProviderRequest {
    provider_token: string;
}

export interface UserProfileProvider {
    id: string;
    provider_user_id: string;
    name?: string;
}

export interface UserProfile {
    sub?: string;
    name?: string;
    picture?: string;
    username?: string;
    email?: string;
    email_verified?: boolean;
    phone_number?: string;
    groups?: [ProfileGroup];
    providers?: [UserProfileProvider];
    gender?: string;
    birthdate?: string;
    zoneinfo?: string;
    locale?: string;
    created_from?: string;
}

export interface ProvidersResponse {
    total: number;
    data: [UserProvider];
}

export interface UserProvider {
    id: string;
    name: string;
    provider_user_name?: string;
    bind: boolean;
}

export interface ProfileGroup {
    id: string;
    expires_at?: string;
}


export interface ProviderProfile {
    provider_id: string;
    name?: string;
    picture?: string;
    phone_number?: string;
    email?: string;
}

export interface TransByProviderRequest {
    provider_token: string;
}

export interface GrantTokenRequest {
    grant_type: string;
    code?: string,
    refresh_token?: string,
    username?: string,
    password?: string,
    scope?: string,
    nonce?: string,
    code_verifier?: string,
    device_code?: string
}

export interface UnbindProviderRequest {
    provider_id: string;
}

export interface CheckPasswordRequest {
    password: string;
}

export interface CheckIfUserExistRequest {
    username: string;
}

export interface CheckIfUserExistResponse {
    exist: boolean;
}


export interface EditContactRequest {
    phone_number?: string;
    email?: string;
    sudo_token: string;
    verification_token: string;
    // 冲突解决方案
    // 可选：DEFAULT， 默认解决方案：提示用户该手机号已被其他人绑定
    //      DELETE_ACCOUNT_TRANSFER，标记原来的账号为已注销，并将手机换绑给自己
    //     TRANSFER 仅换绑手机号，不注销原有账号。（原有账号无法登录情况下，则自动标记为注销）
    conflict_resolution?: string;
}

export interface SetPasswordRequest {
    sudo_token: string;
    new_password: string;
}


export interface SetPasswordRequest {
    new_password: string;
    sudo_token: string;
}

export interface UpdatePasswordRequest {
    old_password: string;
    new_password: string;
}

// password 和 verification_token 而选一，如果绑定了手机号，则必须使用verification_token 进行sudo
export interface SudoRequest {
    password?: string;
    verification_token?: string
}

export interface SudoResponse {
    sudo_token: string
}

export interface WithSudoRequest {
    sudo_token: string
}

export interface ChangeBoundProviderRequest {
    trans_token: string;
    provider_id: string;
}

export interface ChangeBoundProviderResponse {
    client_id: string;
}

export interface QueryUserProfileRequest {
    id?: [string];
    username?: string;
    email?: string;
    phone_number?: string;
}

export interface QueryUserProfileResponse {
    total: number;
    data?: [SimpleUserProfile];
}

export interface SimpleUserProfile {
    sub: string;
    name: string;
    picture?: string;
    gender?: string;
    locale?: string;
    email?: string;
    phone_number?: string;
}

export interface AuthorizeRequest {
    client_id: string,
    response_type?: string,
    redirect_uri?: string,
    state?: string,
    scope?: string,
    code_challenge?: string,
    code_challenge_method?: string,
    sign_out_uri?: string
}

export interface AuthorizeResponse {
    code?: string,
    access_token?: string,
    id_token?: string,
    token_type?: string,
    scope?: string,
    state?: string,
    expires_in?: number
}

export interface AuthorizeInfoRequest {
    client_id: string,
    response_type?: string,
    redirect_uri?: string,
    state?: string,
    scope?: string,
    sign_out_uri?: string,
    locale?: string,
}

export interface AuthorizeInfoResponse {
    client: Client;
    scopes?: Scope[];
}

export interface Client {
    id: string;
    name: string;
    description?: string;
    picture?: string;
    url?: string;
}

export interface Scope {
    id: string;
    name: string;
    description?: string;
    picture?: string;
    url?: string;
    children?: Scope[];
}

export interface RevokeDeviceRequest {
    device_id: string;
}

export interface SignoutRequest {
    redirect_uri?: string;
    state?: string;
}

export interface SignoutReponse {
    redirect_uri?: string;
}


export interface AuthorizeDeviceRequest {
    client_id: string;
    user_code: string;
    scope?: string;
    state?: string;
}

export interface DeviceAuthorizeRequest {
    client_id?: string;
    scope?: string;
}

export interface DeviceAuthorizeResponse {
    device_code: string;
    user_code?: string;
    expires_in: number;
    interval: number;
    verification_uri?: string;
    verification_uri_complete?: string
}

export interface ProviderSubType {
    id: string;
    provider_sub_type: 'NO_AUTH_LOGIN' | ''; // NO_AUTH_LOGIN-免密登录
}


export interface GetMiniProgramQrCodeRequest {
    envId: string;
    wxAppId: string;
}

export interface GetMiniProgramQrCodeResponse {
    qr_code: string;
    qr_code_id: string;
    expires_in: number;
}

export interface GetMiniProgramQrCodeStatusRequest {
    qrCodeId: string;
    envId: string;
    wxAppId: string;
}

export interface GetMiniProgramQrCodeStatusResponse {
    status: string;
    provider_token: string;
    expires_in: number;
}