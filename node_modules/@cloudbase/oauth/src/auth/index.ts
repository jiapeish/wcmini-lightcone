'use strict';
import { ApiUrls } from './consts';
import {
  UserProfile,
  SignInRequest,
  SignUpRequest,
  VerifyRequest,
  VerifyResponse,
  GenProviderRedirectUriRequest,
  GenProviderRedirectUriResponse,
  GrantProviderTokenRequest,
  GrantProviderTokenResponse,
  PatchProviderTokenRequest,
  PatchProviderTokenResponse,
  SignInWithProviderRequest,
  BindWithProviderRequest,
  TransByProviderRequest,
  GrantTokenRequest,
  UnbindProviderRequest,
  CheckPasswordRequest,
  SetPasswordRequest,
  ChangeBoundProviderRequest,
  ChangeBoundProviderResponse,
  QueryUserProfileRequest,
  UpdatePasswordRequest,
  SudoRequest,
  SudoResponse,
  QueryUserProfileResponse,
  EditContactRequest,
  CheckIfUserExistResponse,
  CheckIfUserExistRequest,
  SendVerificationCodeRequest,
  SendVerificationCodeResponse,
  ResetPasswordRequest,
  AuthorizeRequest,
  AuthorizeResponse,
  AuthorizeInfoRequest,
  AuthorizeInfoResponse,
  RevokeDeviceRequest,
  WithSudoRequest,
  AuthorizeDeviceRequest,
  DeviceAuthorizeRequest,
  DeviceAuthorizeResponse,
  ProvidersResponse,
  SignoutRequest,
  SignoutReponse,
  ProviderSubType,
  GetMiniProgramQrCodeRequest,
  GetMiniProgramQrCodeResponse,
  GetMiniProgramQrCodeStatusRequest,
  GetMiniProgramQrCodeStatusResponse,
} from './models';

import { getOAuthClient, Credentials, AuthClient, ResponseError, ErrorType as oauthErrorType } from '../oauthclient';
import { getCaptcha, Captcha } from '../captcha';
import { App, RequestFn as appRequestFn } from '../app';
import { _getComponent } from '../app/internal';

export { ErrorType, VerificationUsages, DeviceAuthorizeState } from './consts';
export { ResponseError } from '../oauthclient';

export interface AuthOptions {
  credentialsClient: AuthClient;
  captcha: Captcha;
}

/**
 * Returns the existing `Auth` instance that is associated with the app
 */
export function getAuth(app: App, initOptions?: any): Auth {
  return _getComponent<Auth>(app, 'auth', (): Auth => {
    const credentialsClient = getOAuthClient(app, initOptions);
    const baseRequest = credentialsClient.request.bind(credentialsClient);
    const captcha = getCaptcha(app, { request: baseRequest });
    return new Auth({
      credentialsClient: credentialsClient,
      captcha: captcha,
    });
  });
}

export type GetCustomSignTicketFn = () => Promise<string>;

/**
 * Auth
 */
export class Auth {
  public readonly request: appRequestFn;
  public readonly credentialsClient: AuthClient;
  private _getCustomSignTicketFn?: GetCustomSignTicketFn;

  /**
   * constructor
   * @param {AuthOptions} opts
   */
  constructor(opts: AuthOptions) {
    this.request = opts.captcha.request.bind(opts.captcha);
    this.credentialsClient = opts.credentialsClient;
  }

  /**
   * Sign in.
   * @param {SignInRequest} params A SignInRequest Object.
   * @return {Promise<Credentials>} A Promise<Credentials> object.
   */
  public async signIn(params: SignInRequest): Promise<Credentials> {
    const credentials: Credentials = await this.request<Credentials>(ApiUrls.AUTH_SIGN_IN_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: params,
    });
    await this.credentialsClient.setCredentials(credentials);
    return Promise.resolve(credentials);
  }

  /**
   * Sign in Anonymously
   * @return {Promise<Credentials>} A Promise<Credentials> object.
   */
  public async signInAnonymously(): Promise<Credentials> {
    const credentials: Credentials = await this.request<Credentials>(ApiUrls.AUTH_SIGN_IN_ANONYMOUSLY_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: {},
    });
    await this.credentialsClient.setCredentials(credentials);
    return Promise.resolve(credentials);
  }

  /**
   * sign in with wechat idendify
   * 需要结合 http overcallFunction 使用
   */
  public async signInWithWechat(params: any = {}): Promise<Credentials> {
    const credentials: Credentials = await this.request<Credentials>(ApiUrls.AUTH_SIGN_IN_WITH_WECHAT_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: params,
    });
    await this.credentialsClient.setCredentials(credentials);
    return Promise.resolve(credentials);
  }

  /**
   * Sign up.
   * @param {SignUpRequest} params A SignUpRequest Object.
   * @return {Promise<Credentials>} A Promise<Credentials> object.
   */
  public async signUp(params: SignUpRequest): Promise<Credentials> {
    const data: Credentials = await this.request<Credentials>(ApiUrls.AUTH_SIGN_UP_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: params,
    });
    await this.credentialsClient.setCredentials(data);
    return Promise.resolve(data);
  }

  /**
   * Sign out.
   * @param {SignoutRequest} params A SignoutRequest Object.
   * @return {SignoutReponse} A Promise<SignoutReponse> object.
   */
  public async signOut(params?: SignoutRequest): Promise<SignoutReponse> {
    var resp: SignoutReponse = {};
    if (!params) {
      params = {};
    }
    try {
      resp = await this.request<SignoutReponse>(ApiUrls.AUTH_SIGNOUT_URL, {
        method: 'POST',
        withCredentials: true,
        body: params,
      });
    } catch (err) {
      if ((err as ResponseError).error !== oauthErrorType.UNAUTHENTICATED) {
        console.log('sign_out_error', err);
      }
    }
    await this.credentialsClient.setCredentials();
    return resp;
  }

  /**
   * Revoke All Devices
   * @return {Object} A Promise<void> object.
   */
  public async revokeAllDevices(): Promise<void> {
    await this.request<void>(ApiUrls.AUTH_REVOKE_ALL_URL, {
      method: 'DELETE',
      withCredentials: true,
    });
  }

  /**
   * Revoke Device
   * @return {Object} A Promise<void> object.
   */
  public async revokeDevice(params: RevokeDeviceRequest): Promise<void> {
    await this.request<void>(ApiUrls.AUTHORIZED_DEVICES_DELETE_URL + params.device_id, {
      method: 'DELETE',
      withCredentials: true,
    });
  }

  /**
   * Send the VerificationCode.
   * @param {SendVerificationCodeRequest} params A GetVerificationRequest Object.
   * @return {Promise<SendVerificationCodeResponse>} A Promise<GetVerificationResponse> object.
   */
  public async sendVerificationCode(params: SendVerificationCodeRequest): Promise<SendVerificationCodeResponse> {
    let withBasicAuth = false;
    let withCredentials = false;
    // 发送短信时，如果时给当前用户发，则需要带上鉴权信息
    if (params.target == 'CUR_USER') {
      withCredentials = true;
    } else {
      const hasLogin = await this.hasLoginState();
      if (hasLogin) {
        withCredentials = true;
      } else {
        withBasicAuth = true;
      }
    }
    return this.request<SendVerificationCodeResponse>(ApiUrls.VERIFICATION_URL, {
      method: 'POST',
      withBasicAuth: withBasicAuth,
      withCredentials: withCredentials,
      body: params,
      // withCaptcha: true,
    });
  }

  public async getVerification(params: SendVerificationCodeRequest) {
    return this.sendVerificationCode(params);
  }

  /**
   *  Verify the code
   * @param {VerifyRequest} params A VerifyRequest Object.
   * @return {Promise<VerifyResponse>} A Promise<VerifyResponse> object.
   */
  public async verify(params: VerifyRequest): Promise<VerifyResponse> {
    return this.request<VerifyResponse>(ApiUrls.VERIFY_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: params,
    });
  }

  /**
   * Reset Password
   * @param params A ResetPasswordRequest Object
   */
  public async resetPassword(params: ResetPasswordRequest): Promise<void> {
    return this.request<void>(ApiUrls.RESET_PASSWORD_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: params,
    });
  }

  /**
   * Gen provider redirect uri.
   * @param {GenProviderRedirectUriRequest} params A GenProviderRedirectUriRequest object.
   * @return {Promise<GenProviderRedirectUriResponse>} A Promise<GenProviderRedirectUriResponse> object.
   */
  public async genProviderRedirectUri(params: GenProviderRedirectUriRequest): Promise<GenProviderRedirectUriResponse> {
    const otherParams = params.other_params;
    delete params.other_params;
    let url = `${ApiUrls.PROVIDER_URI_URL}?${Auth.parseParamsToSearch(params)}`;
    if (otherParams) {
      otherParams.forEach((value, key) => {
        url += `&other_params[${key}]=${encodeURIComponent(value)}`;
      });
    }
    return this.request<GenProviderRedirectUriResponse>(url, {
      method: 'GET',
      withBasicAuth: true,
    });
  }

  /**
   * Grant provider token.
   * @param {GrantProviderTokenRequest} params A GrantProviderTokenRequest object.
   * @return {Promise<GrantProviderTokenResponse>} A Promise<GrantProviderTokenResponse> object.
   */
  public async grantProviderToken(params: GrantProviderTokenRequest): Promise<GrantProviderTokenResponse> {
    return this.request<GrantProviderTokenResponse>(ApiUrls.PROVIDER_TOKEN_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: params,
    });
  }

  /**
   * Grant provider token.
   * @param {PatchProviderTokenRequest} params A PatchProviderTokenRequest object.
   * @return {Promise<PatchProviderTokenResponse>} A Promise<PatchProviderTokenResponse> object.
   */
  public async patchProviderToken(params: PatchProviderTokenRequest): Promise<PatchProviderTokenResponse> {
    return this.request<PatchProviderTokenResponse>(ApiUrls.PROVIDER_TOKEN_URL, {
      method: 'PATCH',
      withBasicAuth: true,
      body: params,
    });
  }

  /**
   * Signin with provider request.
   * @param {SignInWithProviderRequest} params A SignInWithProviderRequest object.
   * @return {Promise<Credentials>} A Promise<Credentials> object.
   */
  public async signInWithProvider(params: SignInWithProviderRequest): Promise<Credentials> {
    const credentials: Credentials = await this.request<Credentials>(ApiUrls.AUTH_SIGN_IN_WITH_PROVIDER_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: params,
    });
    await this.credentialsClient.setCredentials(credentials);
    return Promise.resolve(credentials);
  }

  /**
   * Bind with provider
   * @param {BindWithProviderRequest} params A BindWithProviderRequest object.
   * @return {Promise<void>} A Promise<void> object.
   */
  public async bindWithProvider(params: BindWithProviderRequest): Promise<void> {
    return this.request<void>(ApiUrls.PROVIDER_BIND_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: params,
      withCredentials: true,
    });
  }

  /**
   * Get the user profile.
   * @return {Promise<UserProfile>} A Promise<UserProfile> object.
   */
  public async getUserProfile(): Promise<UserProfile> {
    return this.request<UserProfile>(ApiUrls.USER_ME_URL, {
      method: 'GET',
      withCredentials: true,
    });
  }

  /**
   * Get the user profile.
   * @return {Promise<UserProfile>} A Promise<UserProfile> object.
   */
  public async updateUserProfile(params: UserProfile): Promise<UserProfile> {
    return this.request<UserProfile>(ApiUrls.USER_ME_URL, {
      method: 'PATCH',
      withCredentials: true,
      body: params,
    });
  }

  /**
   * Update user basic info
   * @return {Promise<void>}
   */
  public async updateUserBasicInfo(params: {
    user_id: string;
    nickname: string;
    username: string;
    description: string;
    avatar_url: string;
  }) {
    return this.request(ApiUrls.USER_BASIC_EDIT_URL, {
      method: 'POST',
      withCredentials: true,
      body: params,
    });
  }

  /**
   * hasLoginState check if has login state
   * @return {Promise<boolean>} A Promise<boolean> object.
   */
  public async hasLoginState(): Promise<boolean> {
    try {
      await this.credentialsClient.getAccessToken();
      return true;
    } catch (err) {
      if ((err as ResponseError).error === oauthErrorType.UNAUTHENTICATED) {
        return false;
      }
      return Promise.reject(err);
    }
  }

  /**
   * loginScope return scope of current token
   * @return {Promise<string>} A Promise<string> object.
   */
  public async loginScope(): Promise<string> {
    return this.credentialsClient.getScope();
  }

  /**
   * Trans by provider.
   * @param {TransByProviderRequest} params A TransByProviderRequest object.
   * @return {Promise<Credentials>} A Promise<Credentials> object.
   */
  public async transByProvider(params: TransByProviderRequest): Promise<Credentials> {
    return this.request<Credentials>(ApiUrls.USER_TRANS_BY_PROVIDER_URL, {
      method: 'PATCH',
      body: params,
      withCredentials: true,
    });
  }

  /**
   * Grant token.
   * @param {GrantTokenRequest} params A GrantTokenRequest object.
   * @return {Promise<Credentials>} A Promise<Credentials> object.
   */
  public async grantToken(params: GrantTokenRequest): Promise<Credentials> {
    const credentials: Credentials = await this.request<Credentials>(ApiUrls.AUTH_TOKEN_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: params,
    });
    await this.credentialsClient.setCredentials(credentials);
    return Promise.resolve(credentials);
  }

  /**
   * Get the provide list.
   * @return {Promise<ProvidersResponse>} A Promise<UserProfileProviderList> object.
   */
  public async getProviders(): Promise<ProvidersResponse> {
    return this.request<ProvidersResponse>(ApiUrls.PROVIDER_LIST_URL, {
      method: 'GET',
      withCredentials: true,
    });
  }

  /**
   * check if username is exist
   * @param params CheckIfUserExistRequest
   */
  public async checkIfUserExist(params: CheckIfUserExistRequest): Promise<CheckIfUserExistResponse> {
    const url = `${ApiUrls.USER_ME_URL}?${Auth.parseParamsToSearch(params)}`;
    return this.request<CheckIfUserExistResponse>(url, {
      method: 'GET',
    });
  }

  /**
   * unbind provider.
   * @param {UnbindProviderRequest} params
   * @return {Promise<void>}
   */
  public async unbindProvider(params: UnbindProviderRequest): Promise<void> {
    return this.request<void>(`${ApiUrls.PROVIDER_UNBIND_URL}/${params.provider_id}`, {
      method: 'DELETE',
      withCredentials: true,
    });
  }

  /**
   * check Password.
   * @param {CheckPasswordRequest} params
   * @return {Promise<void>}
   */
  public async checkPassword(params: CheckPasswordRequest): Promise<void> {
    return this.request<void>(`${ApiUrls.SUDO_URL}`, {
      method: 'POST',
      withCredentials: true,
      body: params,
    });
  }

  /**
   * Edit Contact 修改 手机号 或 邮箱
   * @param {EditContactRequest} params
   * @return {Promise<void>}
   */
  public async editContact(params: EditContactRequest): Promise<void> {
    return this.request<void>(`${ApiUrls.EDIT_CONTACT_URL}`, {
      method: 'PATCH',
      withCredentials: true,
      body: params,
    });
  }

  /**
   * Set Password.
   * @param {SetPasswordRequest} params
   * @return {Promise<void>}
   */
  public async setPassword(params: SetPasswordRequest): Promise<void> {
    return this.request<void>(`${ApiUrls.AUTH_SET_PASSWORD_URL}`, {
      method: 'PATCH',
      withCredentials: true,
      body: params,
    });
  }

  /**
   * updatePasswordByOld 使用旧密码修改密码，如果已经绑定手机号，请先：sudo，再修改密码
   * @param {UpdatePasswordRequest} params
   * @return {Promise<void>}
   */
  public async updatePasswordByOld(params: UpdatePasswordRequest): Promise<void> {
    const sudoToken = await this.sudo({ password: params.old_password });
    return this.setPassword({
      sudo_token: sudoToken.sudo_token,
      new_password: params.new_password,
    });
  }

  /**
   * sudo
   * @param {sudo} params
   * @return {Promise<SudoResponse>}
   */
  public async sudo(params: SudoRequest): Promise<SudoResponse> {
    return this.request<SudoResponse>(`${ApiUrls.SUDO_URL}`, {
      method: 'POST',
      withCredentials: true,
      body: params,
    });
  }

  /**
   * Get the current user verification.
   * @param {SendVerificationCodeRequest} params A SendVerificationCodeToCurrentUser Object.
   * @return {Promise<SendVerificationCodeResponse>} A Promise<SendVerificationCodeResponse> object.
   */
  public async SendVerificationCodeToCurrentUser(
    params: SendVerificationCodeRequest,
  ): Promise<SendVerificationCodeResponse> {
    params.target = 'CUR_USER';
    return this.request<SendVerificationCodeResponse>(ApiUrls.VERIFICATION_URL, {
      method: 'POST',
      body: params,
      withCredentials: true,
      withCaptcha: true,
    });
  }

  /**
   * change Bound provider.
   * @param {ChangeBoundProviderRequest} params A GetVerificationRequest Object.
   * @return {Promise<ChangeBoundProviderResponse>} A Promise<GetVerificationResponse> object.
   */
  public async changeBoundProvider(params: ChangeBoundProviderRequest): Promise<ChangeBoundProviderResponse> {
    return this.request<ChangeBoundProviderResponse>(`${ApiUrls.PROVIDER_LIST_URL}/${params.provider_id}/trans`, {
      method: 'POST',
      body: {
        provider_trans_token: params.trans_token,
      },
      withCredentials: true,
    });
  }

  /**
   * set the user profile.
   * @param {UserProfile} params A UserProfile Object.
   * @return {Promise<UserProfile>} A Promise<UserProfile> object.
   */
  public async setUserProfile(params: UserProfile): Promise<UserProfile> {
    return this.request<UserProfile>(ApiUrls.USER_PROFILE_URL, {
      method: 'PATCH',
      body: params,
      withCredentials: true,
    });
  }

  /**
   * Delete me
   * @param params
   */
  public async deleteMe(params: WithSudoRequest): Promise<UserProfile> {
    const url = `${ApiUrls.USER_ME_URL}?${Auth.parseParamsToSearch(params)}`;
    return this.request<UserProfile>(url, {
      method: 'DELETE',
      withCredentials: true,
    });
  }

  /**
   * setCustomSignFunc set the get ticket function
   * @param getTickFn
   */
  public setCustomSignFunc(getTickFn: GetCustomSignTicketFn) {
    this._getCustomSignTicketFn = getTickFn;
  }

  /**
   * SignInWithCustomTicket custom signIn
   * @constructor
   */
  public async SignInWithCustomTicket(): Promise<Credentials> {
    const customSignTicketFn = this._getCustomSignTicketFn;
    if (!customSignTicketFn) {
      return Promise.reject({
        error: 'failed_precondition',
        error_description: 'please use setCustomSignFunc to set custom sign function',
      });
    }
    const customTicket = await customSignTicketFn();
    return this.signInWithProvider({
      provider_id: 'custom',
      provider_token: customTicket,
    });
  }

  /**
   * queryUserProfile query user profile
   * @param params queryUserProfile query user profile
   */
  public async queryUserProfile(params: QueryUserProfileRequest): Promise<QueryUserProfileResponse> {
    const url = `${ApiUrls.USER_QUERY_URL}?${Auth.parseParamsToSearch(params)}`;
    return this.request<QueryUserProfileResponse>(url, {
      method: 'GET',
      withCredentials: true,
    });
  }

  /**
   * Authorize oauth Authorize
   * @param params
   * @constructor
   */
  public async authorize(params: AuthorizeRequest): Promise<AuthorizeResponse> {
    return this.request<AuthorizeResponse>(ApiUrls.AUTHORIZE_URL, {
      method: 'POST',
      withCredentials: true,
      body: params,
    });
  }

  /**
   * authorize device
   * @param params
   */
  public async authorizeDevice(params: AuthorizeDeviceRequest): Promise<void> {
    return this.request<void>(ApiUrls.AUTHORIZE_DEVICE_URL, {
      method: 'POST',
      withCredentials: true,
      body: params,
    });
  }

  public async deviceAuthorize(params: DeviceAuthorizeRequest): Promise<DeviceAuthorizeResponse> {
    return this.request<DeviceAuthorizeResponse>(ApiUrls.AUTHORIZE_DEVICE_CODE_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: params,
    });
  }

  /**
   * OAuth get authorize info
   * @param params
   * @constructor
   */
  public async authorizeInfo(params: AuthorizeInfoRequest): Promise<AuthorizeInfoResponse> {
    const url = `${ApiUrls.AUTHORIZE_INFO_URL}?${Auth.parseParamsToSearch(params)}`;
    let withBasicAuth = true;
    let withCredentials = false;
    const hasLogin = await this.hasLoginState();
    if (hasLogin) {
      withCredentials = true;
      withBasicAuth = false;
    }
    return this.request<AuthorizeInfoResponse>(url, {
      method: 'GET',
      withBasicAuth: withBasicAuth,
      withCredentials: withCredentials,
    });
  }

  /**
   * get provider sub type
   * @returns
   */
  public async getProviderSubType(): Promise<ProviderSubType> {
    return this.request<ProviderSubType>(ApiUrls.GET_PROVIDER_TYPE, {
      method: 'POST',
      body: {
        provider_id: 'weda',
      },
    });
  }

  public async createCaptchaData(params: { state: string; redirect_uri?: string }) {
    return this.request<{ captcha_token: string; expires_in: number }>(ApiUrls.CAPTCHA_DATA_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: params,
    });
  }

  /**
   * 验证输入验证码
   * @param params.token 图形验证码token
   * @param params.key 用户输入值
   */
  public async verifyCaptchaData(params: { token: string; key: string }) {
    return this.request<{ captcha_token: string; expires_in: number }>(ApiUrls.VERIFY_CAPTCHA_DATA_URL, {
      method: 'POST',
      withBasicAuth: true,
      body: params,
    });
  }

  /**
   * 获取小程序扫码资源
   * @param {GetMiniProgramCodeRequest}params
   * @param {Promise<GetMiniProgramCodeResponse>}
   */
  public async getMiniProgramQrCode(params: GetMiniProgramQrCodeRequest): Promise<GetMiniProgramQrCodeResponse> {
    return this.request<GetMiniProgramQrCodeResponse>(ApiUrls.GET_MINIPROGRAM_QRCODE, {
      method: 'POST',
      body: params,
    });
  }

  /**
   * mini-program scan code status
   * @returns
   */
  public async getMiniProgramQrCodeStatus(params: GetMiniProgramQrCodeStatusRequest): Promise<GetMiniProgramQrCodeStatusResponse> {
    return this.request<GetMiniProgramQrCodeStatusResponse>(ApiUrls.GET_MINIPROGRAM_QRCODE_STATUS, {
      method: 'POST',
      body: params,
    });
  }

  private static parseParamsToSearch(params: any): string {
    for (let key in params) {
      if (!params[key]) {
        delete params[key];
      }
    }
    const searchParams = new URLSearchParams(params as any);
    return searchParams.toString();
  }
}
