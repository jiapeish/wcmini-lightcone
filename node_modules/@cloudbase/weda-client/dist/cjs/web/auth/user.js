"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.loginScope = exports.getAccessToken = exports.getUserInfo = exports.filterCloudSdkUserInfo = exports.getUserInfoFromCloudSDK = exports.getWedaUserList = exports.getUserAllInfo = exports.onLoginStateChanged = exports.signOut = exports.transformWedaHostUser = exports.initWedaHostUser = exports.signIn = exports.userObj = void 0;
/**
 * js-sdk2.x和1.x区别：https://docs.cloudbase.net/api-reference/webv3/upgrade#%E8%BF%81%E7%A7%BB%E6%8C%87%E5%8D%97
 */
const weda_cloud_sdk_1 = require("@cloudbase/weda-cloud-sdk");
const models_1 = require("../../common/models");
const utils_1 = require("../../common/utils");
const permission_1 = require("./permission");
const constants_1 = require("../../common/constants");
const auth_1 = require("../../common/auth");
let wedaUserInfo = {
    type: '',
    openId: '',
    unionId: '',
    name: '',
    nickName: '',
    avatarUrl: '',
    relatedRoles: [],
    userId: '',
    email: '',
    phone: '',
    licensed: true,
    // eslint-disable-next-line @typescript-eslint/consistent-type-assertions
    mainOrg: {},
    orgs: [],
};
exports.userObj = {
    /**
     * 实时订阅wedaUserInfo，从CLOUD_SDK去取
     */
    get currentUser() {
        const res = filterCloudSdkUserInfo(weda_cloud_sdk_1.CLOUD_SDK.currentUser);
        return res;
    },
};
/**
 * 登录用户，目前支持手机号，邮箱，用户名密码登录。
 * 文档：https://git.woa.com/QBase/lcap/weda-alternative/blob/main/packages/weda-client/docs/%E5%A4%96%E9%83%A8%E6%96%87%E6%A1%A3.md#authsigninparams-object
 * @param params
 */
async function signIn(params) {
    // 这里必须用getTcbInstance，不能用initTcb，否则控制台会打印报错
    // 但是匿名登录下weda-cloud-sdk不回调login，故需要这里处理
    const { auth } = await (0, weda_cloud_sdk_1.getTcbInstance)();
    await auth.signIn(params);
    // 登录的时候更新信息
    await initWedaHostUser();
    // 企业工作台回调用户传进来的login
    if (window?._WedaHostConfig?.login) {
        const loginState = await auth.getLoginState();
        if (loginState) {
            await window._WedaHostConfig.login();
        }
    }
}
exports.signIn = signIn;
/**
 * window._WedaHostConfig.wedaUser 的值跟currentUser还不一样，要保持合现网工作台一样
 * 只在登录的时候更新。getUserInfo不要更新，避免影响工作台！！
 * @returns
 */
async function initWedaHostUser() {
    // 更新window._WedaHostConfig.wedaUser为cloud-sdk的信息，避免影响
    const [user, userAllInfo] = await Promise.all([weda_cloud_sdk_1.CLOUD_SDK.getUserInfo(), getUserAllInfo()]);
    const wedaUser = transformWedaHostUser(user, userAllInfo);
    window._WedaHostConfig = {
        ...window._WedaHostConfig,
        // @ts-ignore
        wedaUser,
    };
}
exports.initWedaHostUser = initWedaHostUser;
/**
 * 将CLOUD_SDK.getUserInfo()、getUserAllInfo()的转为企业工作台的结构
 * @param wedaUser
 * @param userAllInfo
 * @returns
 */
function transformWedaHostUser(wedaUser, userAllInfo) {
    const relatedRoles = wedaUser?.relatedRoles || [];
    return {
        accessibleService: userAllInfo?.UserInfo?.accessibleService,
        avatar: wedaUser?.avatarUrl,
        email: userAllInfo?.UserInfo?.email,
        envId: userAllInfo?.UserInfo?.envId,
        name: userAllInfo?.UserInfo?.name,
        phone: userAllInfo?.UserInfo?.phone,
        relatedRoles: relatedRoles.map((item) => {
            return (0, utils_1.objectKeyFirstUpperToLower)(item);
        }),
        type: userAllInfo?.UserInfo?.type,
        uin: userAllInfo?.UserInfo?.uin,
        userId: userAllInfo?.UserInfo?.userId,
        uuid: userAllInfo?.UserInfo?.uuid,
    };
}
exports.transformWedaHostUser = transformWedaHostUser;
/**
 * 登出
 * 文档：https://git.woa.com/QBase/lcap/weda-alternative/blob/main/packages/weda-client/docs/%E5%A4%96%E9%83%A8%E6%96%87%E6%A1%A3.md#authsignout
 */
async function signOut() {
    // const { auth } = await getTcbInstance();
    // await (auth as any).signOut(); // 退出登录
    await weda_cloud_sdk_1.CLOUD_SDK.signOut(); // 重回到匿名登录
}
exports.signOut = signOut;
/**
 * 获取当前用户，推荐在 Auth 对象上设置一个回调函数，每当用户登录状态转变时，会触发这个回调函数，并且获得当前的 LoginState
 * 文档：https://docs.cloudbase.net/authentication/auth/manage-users#%E8%AE%A2%E9%98%85%E7%99%BB%E5%BD%95%E7%8A%B6%E6%80%81%E5%8F%98%E5%8C%96%E7%9A%84%E5%9B%9E%E8%B0%83%E5%87%BD%E6%95%B0
 * @returns
 */
async function onLoginStateChanged(cb) {
    const { auth } = await (0, weda_cloud_sdk_1.getTcbInstance)();
    return auth.onLoginStateChanged(async (loginState) => {
        try {
            // @ts-ignore
            if (!loginState || (loginState?.user && loginState.user.name === 'anonymous')) {
                return cb({
                    userInfo: null,
                    appInfo: null,
                });
            }
            const [userInfo, appInfo] = await Promise.all([getUserInfo(), (0, permission_1.getAdminAppInfo)({ uid: loginState?.user?.uid })]);
            const newAppInfo = appInfo.VisitApps.map((item) => (0, utils_1.objectKeyFirstUpperToLower)(item));
            cb({
                userInfo,
                appInfo: newAppInfo,
            });
        }
        catch (err) {
            console.log('auth.onLoginStateChanged catch err', err);
            throw err;
        }
    });
}
exports.onLoginStateChanged = onLoginStateChanged;
/**
 * 文档：https://iwiki.woa.com/pages/viewpage.action?pageId=1238983284#id-%E4%BC%81%E4%B8%9A%E5%B7%A5%E4%BD%9C%E5%8F%B0%E6%80%BB%E4%BD%93%E8%AE%BE%E8%AE%A1-GetUserAllInfo(%E8%8E%B7%E5%8F%96%E7%94%A8%E6%88%B7%E6%89%80%E6%9C%89%E7%9B%B8%E5%85%B3%E4%BF%A1%E6%81%AF)
 * @returns
 */
async function getUserAllInfo() {
    return (0, models_1.callWedaApiFn)('GetUserAllInfo', {});
}
exports.getUserAllInfo = getUserAllInfo;
/**
 * DescribeWedaUserList接口文档：https://tcloud4api.woa.com/document/product/1505/72402?!preview&!document=1
 * TODO 待废弃
 * @deprecated
 * @param params
 * @returns
 */
async function getWedaUserList(params) {
    return (0, models_1.callWedaApiFn)('DescribeWedaUserList', {
        EnvId: params.envId,
        PageNo: 1,
        PageSize: 10,
        UserIds: [params.wedaId],
        IsNoRelatedOrgFlag: true,
    });
}
exports.getWedaUserList = getWedaUserList;
/**
 * 从CLOUD_SDK接口获取，并过滤白名单
 * @returns
 */
async function getUserInfoFromCloudSDK(force = false) {
    try {
        // 从cloud-sdk获取信息
        const wedaUser = await weda_cloud_sdk_1.CLOUD_SDK.getUserInfo(force);
        return filterCloudSdkUserInfo(wedaUser);
    }
    catch (err) {
        console.warn('请检查登录用户是否正确 catch err:', err);
        throw err;
    }
}
exports.getUserInfoFromCloudSDK = getUserInfoFromCloudSDK;
/**
 * 过滤为标准的userInfo参数
 * @param wedaUser
 * @returns
 */
function filterCloudSdkUserInfo(wedaUser) {
    // 如果没有数据，返回打印提示
    if (!wedaUser) {
        console.warn('请检查登录用户是否正确');
        return wedaUserInfo;
    }
    // @ts-ignore
    if (wedaUser?.userType === 'anonymousUser') {
        return {
            type: wedaUser?.type === undefined ? 2 : wedaUser?.type,
            name: wedaUser?.name ?? '',
            avatarUrl: wedaUser?.avatarUrl ?? '',
            nickName: wedaUser?.nickName ?? '',
            relatedRoles: [],
            openId: wedaUser?.wxOpenId ?? '',
            unionId: wedaUser?.wxUnionId ?? '',
            userId: wedaUser?.wedaId ?? '',
            email: wedaUser?.email ?? '',
            phone: wedaUser?.phone ?? '',
            licensed: undefined,
            mainOrg: {},
            orgs: [],
            corp: null,
            userType: wedaUser?.userType,
        };
    }
    let tmpRelatedRoles = wedaUser?.relatedRoles;
    if (tmpRelatedRoles) {
        tmpRelatedRoles = tmpRelatedRoles.map((item) => {
            const newItem = (0, utils_1.objectKeyFirstUpperToLower)(item);
            return (0, utils_1.filterMap)(constants_1.RELATEDROLES_WHITELIST, {
                ...newItem,
            });
        });
    }
    const org = (0, auth_1.getOrg)(wedaUser);
    // { Id: 'xxx', Name: 'yyy' } => { id: 'xxx', name: 'yyy' }
    let corp = wedaUser?.corp;
    if (corp) {
        corp = (0, utils_1.objectKeyFirstUpperToLower)(corp);
    }
    return {
        type: wedaUser?.type,
        name: wedaUser?.name || '',
        nickName: wedaUser?.nickName || '',
        avatarUrl: wedaUser?.avatarUrl || '',
        relatedRoles: tmpRelatedRoles || [],
        openId: wedaUser?.wxOpenId || '',
        unionId: wedaUser?.wxUnionId ?? '',
        userId: wedaUser?.wedaId,
        email: wedaUser?.email,
        phone: wedaUser?.phone,
        licensed: true,
        mainOrg: org.mainOrg,
        orgs: org.orgs,
        corp,
        userType: wedaUser?.userType,
    };
}
exports.filterCloudSdkUserInfo = filterCloudSdkUserInfo;
/**
 * 获取用户信息
 * 文档：https://git.woa.com/QBase/lcap/weda-alternative/blob/main/packages/weda-client/docs/%E5%A4%96%E9%83%A8%E6%96%87%E6%A1%A3.md#authgetuserinfo-object
 * @returns
 */
async function getUserInfo(force = false) {
    // @todo 获取用户信息需要再initTcb之后，后续weda-sdk需要优化
    await (0, weda_cloud_sdk_1.initTcb)();
    wedaUserInfo = await getUserInfoFromCloudSDK(force);
    // @ts-ignore
    return wedaUserInfo;
}
exports.getUserInfo = getUserInfo;
/**
 * 返回accessToken字符串
 * 文档：https://git.woa.com/QBase/lcap/weda-alternative/blob/main/packages/weda-client/docs/%E5%A4%96%E9%83%A8%E6%96%87%E6%A1%A3.md#authgetaccesstoken-object
 * @returns
 */
async function getAccessToken() {
    return (0, weda_cloud_sdk_1.getAccessToken)();
}
exports.getAccessToken = getAccessToken;
/**
 * 文档：https://docs.cloudbase.net/api-reference/webv3/authentication#authloginscope
 * @returns
 */
async function loginScope() {
    const { auth } = await (0, weda_cloud_sdk_1.getTcbInstance)();
    return auth?.loginScope?.();
}
exports.loginScope = loginScope;
