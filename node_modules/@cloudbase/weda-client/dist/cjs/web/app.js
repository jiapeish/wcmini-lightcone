"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getWedaAPI = exports.AppContext = exports.$w = exports.app = exports.createWebApp = void 0;
const react_1 = __importDefault(require("react"));
const mobx_1 = require("mobx");
const action_func_1 = require("./actions/action-func");
const weda_cloud_sdk_1 = require("@cloudbase/weda-cloud-sdk");
const constants_1 = require("../common/constants");
const utils_1 = require("../common/utils");
const actions_1 = require("./actions/actions");
const router_1 = require("./router");
const tcb_1 = require("./app/tcb");
const index_1 = require("./auth/index");
const index_2 = require("./env/index");
/**
 * @description 创建web下的app对象，对外暴露
 * @param initData
 * @returns
 */
function createWebApp(initData = {}) {
    const app = {
        __internal__: {
            $w: null,
            activePage: null,
            enumOptions: (0, mobx_1.observable)({}),
            getConfig: () => initData?.appConfig || {},
            resolveStaticResourceUrl(staticUrl) {
                const { _isPrivate, _deployType } = window;
                if (/^\//.test(staticUrl) && !(_isPrivate && !_deployType)) {
                    const domain = app?.__internal__?.getConfig?.()?.staticResourceDomain || app?.domain || '';
                    const url = `${location.protocol}//${domain}${staticUrl}`;
                    return url;
                }
                return staticUrl;
            },
            isMobile: utils_1.isMobile,
            getCloudSdkConfig: weda_cloud_sdk_1.getConfig,
            generatePageUrl: (obj = {}) => {
                return (0, router_1.generatePageUrl)({ ...obj, basename: obj.basename || app?.__internal__?.getConfig?.()?.basename });
            },
        },
        id: initData?.appConfig?.id || initData.id || '',
        label: initData.appConfig?.label || '',
        version: initData?.appConfig?.version || '',
        mpAppId: '',
        mpAppName: '',
        platform: constants_1.EPLATFORM.WEB,
        /**
         * 须避免被wx.cloud 覆盖
         */
        cloud: weda_cloud_sdk_1.CLOUD_SDK,
        dataSources: weda_cloud_sdk_1.DS_SDK,
        _setStateVal(config) { },
        init: tcb_1.init,
        auth: index_1.auth,
        invoke(params) {
            // deed to impl
        },
    };
    const appWithUtils = Object.assign(app, {
        ...(0, actions_1.createWebActionsAPI)(app, action_func_1.actionSdk, initData),
        utils: (0, utils_1.createAppUtils)(app, initData),
    });
    const webApp = Object.assign(appWithUtils, {
        ...(0, router_1.createWebRouterAPI)(appWithUtils, action_func_1.actionSdk),
        /**
         * @deprecated
         */
        invoke(params) {
            const $page = webApp.utils.getCurrentPage();
            return $page.invokeComponentMethod(params);
        },
        /**
         * @deprecated
         */
        _setStateVal(config) {
            const [key, name] = config?.varPath?.split?.('.') || [];
            if (key !== '$global' && key !== '$page') {
                console.warn('[@deprecated] 禁止跨页面设置变量值，后期版本将放弃对此的支持');
            }
            if (key === '$page') {
                const $page = webApp.utils.getCurrentPage();
                $page?.setState?.({ [name]: config.val });
                return;
            }
            else {
                // @ts-ignore
                weda_cloud_sdk_1.EXTRA_API.setState(config.varPath, config.val);
            }
        },
    });
    const platforms = ['WEB'];
    if ((0, utils_1.isMobile)()) {
        platforms.push('MOBILE', 'MOBILEWEB');
    }
    else {
        platforms.push('PCWEB');
    }
    webApp.__internal__.$w = (0, utils_1.createAPINamespace)(webApp, index_2.env, {
        device: initData?.device || {
            viewport: {
                width: window?.innerWidth || 0,
                height: window?.innerHeight || 0,
            },
            networkType: '',
        },
        platforms,
    });
    return webApp;
}
exports.createWebApp = createWebApp;
/**
 * @description 创建web下的app对象，对外暴露
 */
exports.app = (0, utils_1.execOnce)(createWebApp);
exports.$w = new Proxy({}, {
    get(_, prop) {
        const { app: currentAppAPI, $page } = window;
        const api = currentAppAPI || exports.app;
        const internal = currentAppAPI.__internal__ || exports.app.__internal__;
        if (prop === 'app') {
            return api;
        }
        if (prop === 'page') {
            return internal.activePage || $page;
        }
        return internal.$w ? internal.$w?.[prop] : null;
    },
});
exports.AppContext = react_1.default.createContext({});
function getWedaAPI() {
    return {
        $app: globalThis.$app,
        app: globalThis.app,
        $w: globalThis.app?.__internal__.$w || exports.$w,
    };
}
exports.getWedaAPI = getWedaAPI;
