import { ROUTER_KEY, LINK_PROTOCOL } from '../common/constants';
import { urlJoinParams, normalizePageId, normalizePackageName, normalizeRouterParams } from '../common/utils';
import { SACN_CODE_MODAL_VISIBLE, SCAN_CODE_STATE } from './actions/scanCode/ScanCodeComponent';
/**
 * 挂在路由相关方法到app对象上，从sdk中取
 * @param sdks
 * @returns
 */
export function createWebRouterAPI(ctx, sdks) {
    const app = {};
    Object.keys(sdks).forEach((item) => {
        let action = sdks[item];
        switch (item) {
            case ROUTER_KEY.navigateTo:
            case ROUTER_KEY.reLaunch:
            case ROUTER_KEY.redirectTo: {
                action = function (obj) {
                    let { url, ...restOpts } = obj;
                    const linkUri = url ? normalizeRouterParams(url) : {};
                    /**
                     * 跳转网页有4种场景
                     * 1.mode==='web'
                     * 2.mode==='web'（是内部页面需要构造内部页面外跳的地址）
                     * 3.url协议为http/s开头
                     * 4.url协议为weda-page （是内部页面需要构造内部页面外跳的地址）
                     */
                    const isWebpageWithMode = !url && restOpts.pageId;
                    const isWedapageProtocol = LINK_PROTOCOL['weda-page'] === linkUri.protocol;
                    if (obj.mode === 'web' || ['http', 'https', 'weda-page'].includes(linkUri.protocol)) {
                        if (isWebpageWithMode || isWedapageProtocol) {
                            try {
                                let path = isWedapageProtocol ? generatePageUrl(linkUri) : generatePageUrl(obj);
                                if (/https?:\/\//.test(path)) {
                                    url = path;
                                }
                                else {
                                    const { historyOptions } = ctx.__internal__.getConfig();
                                    if (historyOptions) {
                                        let a = document.createElement('a');
                                        a.href = window.location.href;
                                        if (historyOptions?.isHash) {
                                            historyOptions.type = 'HASH';
                                        }
                                        let { basename = '/' } = historyOptions || {};
                                        if (!/^\//.test(basename)) {
                                            basename = `/${basename}`;
                                        }
                                        if (!/\/$/.test(basename)) {
                                            basename = `${basename}/`;
                                        }
                                        switch (historyOptions?.type?.toUpperCase?.()) {
                                            case 'HASH': {
                                                a.hash = `${basename}${path}`;
                                                break;
                                            }
                                            case 'BROWSER': {
                                                let temp = document.createElement('a');
                                                temp.href = /^\//.test(path) ? path : `/${path}`;
                                                a.pathname = `${basename}${temp.pathname.slice(1)}`;
                                                a.search = temp.search;
                                                break;
                                            }
                                            default: {
                                                console.error('生成跳转链接失败：getConfig().historyOptions.type 缺失');
                                                return;
                                            }
                                        }
                                        url = a.href;
                                    }
                                }
                            }
                            catch (e) { }
                        }
                        switch (item) {
                            case ROUTER_KEY.navigateTo: {
                                const isWebpageWithBlankTarget = '_blank' === restOpts?.options?.target;
                                if (!isWebpageWithBlankTarget && isWedapageProtocol) {
                                    window.location.href = url;
                                }
                                else {
                                    window.open(url);
                                }
                                break;
                            }
                            case ROUTER_KEY.redirectTo: {
                                // if ((window as any)._WEAPPS_HISTORY) {
                                //   (window as any)._WEAPPS_HISTORY.replace(url);
                                // } else {
                                window.location.replace(url);
                                // }
                                break;
                            }
                            default: {
                                window.location.href = url;
                            }
                        }
                    }
                    else if (LINK_PROTOCOL.miniprogram === linkUri.protocol) {
                        // weixin://dl/business/?appid=*APPID*&path=*PATH*&query=*QUERY*&env_version=*ENV_VERSION*
                        const reg = /(?:\?([^#]*))/;
                        const matched = url.match(reg);
                        let query = '';
                        if (matched) {
                            query = encodeURIComponent(matched[1]);
                        }
                        window.location.href = `weixin://dl/business/?appid=${linkUri.appId}&path=${linkUri.path}&query=${query}&env_version=${restOpts?.options?.env_version || 'release'}`;
                    }
                    else {
                        if (LINK_PROTOCOL['weda-page'] === linkUri.protocol) {
                            restOpts = { ...restOpts, ...linkUri };
                        }
                        return sdks[item]({
                            ...restOpts,
                            packageName: normalizePackageName(restOpts.packageName),
                            pageId: normalizePageId(restOpts.pageId),
                        });
                    }
                };
                break;
            }
            case ROUTER_KEY.navigateBack: {
                action = (...args) => {
                    /**
                     * 扫码会导致栈有遗漏
                     * 此处如果发现栈顶为扫码栈则且当前扫码未激活，则直接连退两步
                     */
                    if (window?.history.state?.SCANCODE === SCAN_CODE_STATE && SACN_CODE_MODAL_VISIBLE <= 0) {
                        window?.history?.back();
                    }
                    return sdks[item](...args);
                };
                break;
            }
        }
        if (item in ROUTER_KEY && item !== ROUTER_KEY.relaunchHome) {
            // 只添加action相关的
            app[item] = action;
        }
    });
    app[ROUTER_KEY.relaunchHome] = function () {
        const { pages = [] } = ctx.__internal__.getConfig();
        if (pages[0]) {
            app.reLaunch({
                pageId: pages[0].id,
            });
        }
    };
    return app;
}
export function generatePageUrl({ pageId, mode, packageName: _packageName, url, params, basename }) {
    const packageName = normalizePackageName(_packageName);
    let processedUrl;
    if (mode === 'web' && (url || !pageId)) {
        return url;
    }
    else {
        pageId = normalizePageId(pageId);
        processedUrl = packageName ? `${packageName}/${pageId}` : `${pageId}`;
    }
    return urlJoinParams(generatePathname(processedUrl), params);
}
function generatePathname(path) {
    if (!/^\//.test(path) &&
        window._WEAPPS_HISTORY?.location?.pathname &&
        /\/$/.test(window._WEAPPS_HISTORY.location.pathname)) {
        const suffix = path && !/\/$/.test(path) ? '/' : '';
        return `../${path}${suffix}`;
    }
    return path;
}
