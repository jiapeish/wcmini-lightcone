export function getDocument() {
    if (window.previewWindow?.document) {
        return window.previewWindow.document;
    }
    return document;
}
function isFunction(obj) {
    return typeof obj === 'function';
}
export function errorHandler(fail, complete) {
    return function (res) {
        isFunction(fail) && fail(res);
        isFunction(complete) && complete(res);
        return Promise.reject(res);
    };
}
function upperCaseFirstLetter(string) {
    if (typeof string !== 'string')
        return string;
    string = string.replace(/^./, (match) => {
        return match.toUpperCase();
    });
    return string;
}
export function getParameterError(_a) {
    let _b = _a.name;
    let name = _b === void 0 ? '' : _b;
    let { para } = _a;
    let { correct } = _a;
    let { wrong } = _a;
    let parameter = para ? `parameter.${para}` : 'parameter';
    let errorType = upperCaseFirstLetter(wrong === null ? 'Null' : typeof wrong);
    return `${name}:fail parameter error: ${parameter} should be ${correct} instead of ${errorType}`;
}
export function inlineStyle(style) {
    let res = '';
    for (let attr in style)
        res += `${attr}: ${style[attr]};`;
    if (res.indexOf('display: flex;') >= 0)
        res += 'display: -webkit-box;display: -webkit-flex;';
    res = res.replace(/transform:(.+?);/g, (s, $1) => {
        return `${s}-webkit-transform:${$1};`;
    });
    res = res.replace(/flex-direction:(.+?);/g, (s, $1) => {
        return `${s}-webkit-flex-direction:${$1};`;
    });
    return res;
}
export function calPxToREM(px) {
    if (+px === 0) {
        return '0';
    }
    return `${(px / 14).toFixed(4)}rem`;
}
