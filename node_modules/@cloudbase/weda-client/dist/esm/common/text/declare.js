export default {
    Len: {
        id: 'Len',
        type: 'method',
        name: '获取文本长度',
        funName: 'Len',
        gram: 'Len(文本)',
        editorGram: 'Len(${1:"文本"})',
        desc: '获取传入文本的字符数',
        cases: '计算文本“腾讯科技”所包含的字符数。',
        example: 'Len("腾讯科技")',
        schemaRetType: { type: 'number' },
        retType: 'number',
        Zindex: 0,
    },
    Contains: {
        id: 'Contains',
        type: 'method',
        name: '是否包含指定文本',
        funName: 'Contains',
        gram: 'Contains(文本1, 文本2)',
        editorGram: 'Contains(${1:"文本1"}, ${2:"文本2"})',
        desc: '判断文本 1 是否包含文本 2',
        cases: '校验上下文中的商机报备对象（opportunityRegister）的行业属性（profession）是否包含“教育”。',
        example: 'Contains(#opportunityRegister.profession, "教育")',
        schemaRetType: { type: 'boolean' },
        retType: 'boolean',
        Zindex: 1,
    },
    Split: {
        id: 'Split',
        type: 'method',
        name: '拆分文本',
        funName: 'Split',
        gram: 'Split(文本1,文本2)',
        editorGram: 'Split(${1:"文本1"}, ${2:"文本2"})',
        desc: '根据传入的文本 2，将文本 1 拆分成文本数组，例如 Split("张三,李四,王五", ",")',
        cases: '用"，"将字符串"您好,我的世界,我来了"拆分成字符串数组，返回结果为["您好","我的世界","我来了"]。',
        example: 'Split("您好,我的世界,我来了", ",")',
        schemaRetType: { type: 'array', items: { type: 'string' } },
        retType: 'string[]',
        Zindex: 2,
    },
    Trim: {
        id: 'Trim',
        type: 'method',
        name: '删除开头/结尾空格和制表符',
        funName: 'Trim',
        gram: 'Trim(文本)',
        editorGram: 'Trim(${1:"文本"})',
        desc: '删除文本开头和结尾的所有空格和制表符，文本中间的空格和制表符不会删除',
        cases: '删除文本“ 腾讯科技 s ”前后的空格。',
        example: 'Trim(" 腾讯科技 s ")',
        schemaRetType: { type: 'string' },
        retType: 'string',
        Zindex: 3,
    },
    Upper: {
        id: 'Upper',
        type: 'method',
        name: '转换为大写',
        funName: 'Upper',
        gram: 'Upper(文本)',
        editorGram: 'Upper(${1:"文本"})',
        desc: '将传入的文本转为全大写文本',
        cases: '将字符串"abc"转化为"ABC"。',
        example: 'Upper("abc")',
        schemaRetType: { type: 'string' },
        retType: 'string',
        Zindex: 4,
    },
    Lower: {
        id: 'Lower',
        type: 'method',
        name: '转换为小写',
        funName: 'Lower',
        gram: '	Lower(文本)',
        editorGram: 'Lower(${1:"文本"})',
        desc: '将传入的文本转为全小写文本',
        cases: '将字符串"ABC"转化为"abc"。',
        example: 'Upper("ABC")',
        schemaRetType: { type: 'string' },
        retType: 'string',
        Zindex: 5,
    },
    // Text: {
    //   id: 'Text',
    //   type: 'method',
    //   name: '转换为文本',
    //   funName: 'Text',
    //   gram: 'Text(文本)',
    //   editorGram: 'Text(${1:"文本"})',
    //   desc: '将数字、时间日期等转换为文本',
    //   cases: '上下文中订单对象（order）中有两个字段，分别为数量（quantity）和（unit），需要将这两个字段进行拼接。',
    //   example: 'Text(order.quantity) + order.unit',
    //   retType: 'string',
    //   Zindex: 6,
    // },
    Concat: {
        id: 'Concat',
        type: 'method',
        name: '文本拼接',
        funName: 'Concat',
        editorGram: 'Concat(${1:"文本1"}, ${2:"文本2"})',
        gram: 'Concat(文本1, [文本2,...])',
        desc: '返回多个文本拼接后的新文本',
        cases: '将字符串"腾讯"和字符串"科技"拼接为"腾讯科技"。',
        example: 'Concat("腾讯","科技")',
        schemaRetType: { type: 'string' },
        retType: 'string',
        Zindex: 7,
    },
};
