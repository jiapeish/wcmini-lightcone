import * as permission from '../../../src/web/auth/permission';
import * as service from '../../../src/common/models/request';
import * as WEDA_CLOUD_SDK from '@cloudbase/weda-cloud-sdk';

jest.mock('@cloudbase/weda-cloud-sdk');
describe('test src/web/auth/permission.ts', () => {
  beforeEach(() => {
    // restore the spy created with spyOn
    jest.restoreAllMocks();
  });
  it('test getResourcesPermission', async () => {
    const result = { Data: [] };
    jest.spyOn(WEDA_CLOUD_SDK.CLOUD_SDK, 'callWedaApi').mockImplementation(async () => {
      return new Promise((resolve, reject) => {
        resolve(result);
      });
    });
    jest.spyOn(service, 'callWedaApiFn').mockImplementationOnce(async () => result);
    const res = await permission.getResourcesPermission({} as any);
    expect(res).toMatchObject(result);
  });
  it('test getAdminAppInfo', async () => {
    const result = { Data: [] };
    jest.spyOn(WEDA_CLOUD_SDK.CLOUD_SDK, 'callWedaApi').mockImplementation(async () => {
      return new Promise((resolve, reject) => {
        resolve(result);
      });
    });
    jest.spyOn(service, 'callWedaApiFn').mockImplementationOnce(async () => result);
    const res = await permission.getAdminAppInfo({} as any);
    expect(res).toMatchObject(result);
  });
});
