{"version":3,"sources":["index.js","geo/index.js","geo/point.js","validate.js","constant.js","util.js","serverDate/index.js","helper/symbol.js","utils/symbol.js","utils/type.js","geo/lineString.js","geo/polygon.js","geo/multiPoint.js","geo/multiLineString.js","geo/multiPolygon.js","collection.js","document.js","lib/util.js","serializer/update.js","commands/update.js","operator-map.js","commands/query.js","commands/logic.js","serializer/common.js","serializer/datatype.js","utils/utils.js","query.js","serializer/query.js","aggregate.js","command.js","regexp/index.js","transaction/index.js","transaction/collection.js","transaction/document.js","const/code.js","transaction/query.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA;AFOA,ACHA,AFMA,AGTA;ACFA,AHSA,ACHA,AFMA,AGTA;ACFA,AHSA,ACHA,AFMA,AGTA;ACFA,AHSA,ACHA,AFMA,AGTA;ACFA,AFMA,AFMA,AKfA,AFMA;ACFA,AFMA,AFMA,AKfA,AFMA;ACFA,AFMA,AFMA,AKfA,AFMA;ACFA,AFMA,AFMA,AMlBA,ADGA,AFMA;ACFA,AFMA,AFMA,AMlBA,ADGA,AFMA;ACFA,AFMA,AFMA,AMlBA,ADGA,AFMA;ACFA,AFMA,AKfA,APqBA,AMlBA,ADGA,AFMA;ACFA,AFMA,AKfA,APqBA,AMlBA,ADGA,AFMA;ACFA,AFMA,AKfA,APqBA,AMlBA,ADGA,AFMA;ACFA,AFMA,AKfA,APqBA,AMlBA,ADGA,AGTA,ALeA;ACFA,AFMA,AKfA,APqBA,AMlBA,ADGA,AGTA,ALeA;ACFA,AFMA,AKfA,APqBA,AMlBA,ADGA,AGTA,ALeA;ACFA,AFMA,AKfA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AFMA,AKfA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AFMA,AKfA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,ARwBA,AKfA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,ARwBA,AKfA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,ARwBA,AKfA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,ARwBA,AS3BA,AJYA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,ARwBA,AS3BA,AJYA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,ARwBA,AS3BA,AJYA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,AENA,AV8BA,AS3BA,AJYA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,AENA,AV8BA,AS3BA,AJYA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,AENA,AV8BA,AS3BA,AJYA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,AGTA,ADGA,AV8BA,AS3BA,AJYA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,AGTA,ADGA,AV8BA,AS3BA,AJYA,APqBA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,AGTA,ADGA,AV8BA,AS3BA,AXiCA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,AGTA,ADGA,AENA,AZoCA,AS3BA,AXiCA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,AGTA,ADGA,AENA,AZoCA,AS3BA,AXiCA,AMlBA,ADGA,AGTA,ACHA,ANkBA;ACFA,AMlBA,AGTA,ADGA,AENA,AZoCA,AS3BA,AXiCA,AMlBA,ADGA,AGTA,ACHA,ANkBA;AYnCA,AXiCA,AMlBA,AGTA,ADGA,AENA,AZoCA,AS3BA,AXiCA,AMlBA,ADGA,AGTA,ACHA,ANkBA;AYnCA,AXiCA,AMlBA,AGTA,ADGA,AENA,AZoCA,AS3BA,AXiCA,AMlBA,ADGA,AGTA,ACHA,ANkBA;AYnCA,AXiCA,AMlBA,AGTA,ADGA,AENA,AZoCA,AS3BA,ALeA,ADGA,AGTA,ACHA,ANkBA;AYnCA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AZoCA,AS3BA,ANkBA,AGTA,ACHA,ANkBA;AYnCA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AZoCA,AS3BA,ANkBA,AGTA,ACHA,ANkBA;AYnCA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AZoCA,AS3BA,ANkBA,AGTA,ALeA;AYnCA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AZoCA,AS3BA,AMlBA,AZoCA,AGTA,ALeA;AYnCA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AZoCA,AS3BA,AMlBA,AZoCA,AGTA,ALeA;AYnCA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AZoCA,AS3BA,AMlBA,AZoCA,AGTA,ALeA;AYnCA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AZoCA,AS3BA,AMlBA,ACHA,AbuCA,AGTA,ALeA;AYnCA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AZoCA,AS3BA,AMlBA,ACHA,AbuCA,AGTA,ALeA;AYnCA,AXiCA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,ACHA,AbuCA,AGTA,ALeA;AYnCA,AIZA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,ACHA,AbuCA,AGTA,ALeA;AYnCA,AIZA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,ACHA,AbuCA,AGTA,ALeA;AYnCA,AIZA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,ACHA,AbuCA,AGTA,ALeA;AYnCA,AIZA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AFMA,AbuCA,AGTA,ALeA;AYnCA,AIZA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AFMA,AbuCA,AGTA,ALeA;AYnCA,AIZA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AFMA,AbuCA,AGTA,ALeA;AYnCA,AMlBA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AFMA,AbuCA,AGTA,ALeA;AYnCA,AMlBA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AFMA,AbuCA,AGTA,ALeA;AYnCA,AMlBA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AFMA,AbuCA,AGTA,ALeA;AYnCA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AFMA,AbuCA,AGTA,ALeA;AYnCA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AFMA,AbuCA,AGTA,ALeA;AYnCA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AFMA,AbuCA,AGTA,ALeA;AYnCA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AGTA,ALeA,AbuCA,AGTA;AOpBA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AGTA,ALeA,AbuCA,AGTA;AOpBA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AGTA,ALeA,AbuCA,AGTA;AOpBA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AGTA,ACHA,ANkBA,AbuCA,AGTA;AOpBA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AGTA,ACHA,ANkBA,AbuCA,AGTA;AOpBA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AGTA,ACHA,ANkBA,AbuCA,AGTA;AOpBA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AGTA,ACHA,ANkBA,AbuCA,AGTA,AiBnDA;AV+BA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AMlBA,AGTA,AGTA,ACHA,ANkBA,AbuCA,AGTA,AiBnDA;AV+BA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AGTA,ACHA,ANkBA,AbuCA,AGTA,AiBnDA;AV+BA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AMlBA,AHSA,ACHA,ANkBA,AbuCA,AGTA,AiBnDA;AV+BA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AMlBA,AHSA,ACHA,ANkBA,AbuCA,AGTA,AiBnDA;AV+BA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AMlBA,AHSA,ACHA,ANkBA,AbuCA,AGTA,AiBnDA;AV+BA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AMlBA,AHSA,ACHA,AGTA,AT2BA,AbuCA,AGTA,AiBnDA;AV+BA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AMlBA,AHSA,ACHA,AGTA,AT2BA,AbuCA,AoB5DA;AV+BA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,AS3BA,AMlBA,AHSA,ACHA,AGTA,AT2BA,AbuCA,AoB5DA;AGRA,AbuCA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,AbuCA,AoB5DA;AGRA,AbuCA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,AbuCA,AoB5DA;AGRA,AbuCA,AOrBA,ADGA,AFMA,Af6CA,AYpCA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,AbuCA,AoB5DA;AGRA,AbuCA,Ac1CA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,AbuCA,AoB5DA;AGRA,AbuCA,Ac1CA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,AbuCA,AoB5DA;AGRA,AbuCA,Ac1CA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,AbuCA,AoB5DA;AGRA,AbuCA,Ac1CA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,AbuCA,AoB5DA;AGRA,AbuCA,Ac1CA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,AbuCA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,AbuCA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,AavCA,A1B8EA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,AavCA,A1B8EA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,AavCA,A1B8EA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ADGA,A1B8EA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ADGA,A1B8EA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ADGA,A1B8EA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,AHSA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,Ae7CA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,Ae7CA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,Ae7CA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,Ae7CA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,AIZA,A9B0FA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,Ae7CA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,AIZA,A9B0FA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AFMA,Ae7CA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,AIZA,A9B0FA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AavCA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,AIZA,A9B0FA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AavCA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,AIZA,A9B0FA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AavCA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,AIZA,A9B0FA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AavCA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,AIZA,A9B0FA,AoB5DA;AGRA,ACHA,APqBA,ADGA,AavCA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,AIZA,A9B0FA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,AIZA,A9B0FA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,ANkBA,AGTA,ADGA,AENA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,AIZA,A9B0FA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,ANkBA,AGTA,ACHA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,AIZA,A9B0FA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AIZA,APqBA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AHSA,ACHA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,AavCA,AlBsDA,AFMA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AHSA,Ae7CA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ac1CA,ACHA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,APqBA,ADGA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,ARwBA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,ARwBA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,ARwBA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,ARwBA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,ARwBA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA,A1B8EA;AuBpEA,ACHA,ARwBA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AFMA,AYpCA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AHSA,ACHA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AFMA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AFMA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AFMA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AFMA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AFMA,AGTA,AT2BA,Ae7CA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AFMA,AGTA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AFMA,AGTA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,AFMA,AGTA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,ARwBA,ALeA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AHUA,ACHA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AbuCA,AU9BA,ACHA,AMlBA,AFMA;AFOA,AHSA,ACHA,AMlBA,AFMA;AFOA,AHSA,ACHA,AMlBA,AFMA;AFOA,AHSA,ACHA,AMlBA,AFMA;AFOA,AHSA,ACHA,AMlBA,AFMA;AFOA,AHSA,ACHA,AIZA;AFOA,AHSA,ACHA,AIZA;AFOA,AHSA,ACHA,AIZA;AFOA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA,ACHA;AELA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA,AHSA;AGRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Geo = require(\"./geo/index\");\nvar collection_1 = require(\"./collection\");\nvar command_1 = require(\"./command\");\nvar index_1 = require(\"./serverDate/index\");\nvar index_2 = require(\"./regexp/index\");\nvar index_3 = require(\"./transaction/index\");\nvar logic_1 = require(\"./commands/logic\");\nvar query_1 = require(\"./commands/query\");\nvar update_1 = require(\"./commands/update\");\nvar query_2 = require(\"./query\");\nexports.Query = query_2.Query;\nvar collection_2 = require(\"./collection\");\nexports.CollectionReference = collection_2.CollectionReference;\nvar document_1 = require(\"./document\");\nexports.DocumentReference = document_1.DocumentReference;\nvar Db = (function () {\n    function Db(config) {\n        this.config = config;\n        this.Geo = Geo;\n        this.serverDate = index_1.ServerDateConstructor;\n        this.command = command_1.Command;\n        this.RegExp = index_2.RegExpConstructor;\n        this.startTransaction = index_3.startTransaction;\n        this.runTransaction = index_3.runTransaction;\n        this.logicCommand = logic_1.LogicCommand;\n        this.updateCommand = update_1.UpdateCommand;\n        this.queryCommand = query_1.QueryCommand;\n    }\n    Db.prototype.collection = function (collName) {\n        if (!collName) {\n            throw new Error('Collection name is required');\n        }\n        return new collection_1.CollectionReference(this, collName);\n    };\n    Db.prototype.createCollection = function (collName) {\n        var request = new Db.reqClass(this.config);\n        var params = {\n            collectionName: collName\n        };\n        return request.send('database.addCollection', params);\n    };\n    return Db;\n}());\nexports.Db = Db;\n","\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\n__export(require(\"./point\"));\n__export(require(\"./lineString\"));\n__export(require(\"./polygon\"));\n__export(require(\"./multiPoint\"));\n__export(require(\"./multiLineString\"));\n__export(require(\"./multiPolygon\"));\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar validate_1 = require(\"../validate\");\nvar symbol_1 = require(\"../helper/symbol\");\nvar type_1 = require(\"../utils/type\");\nvar Point = (function () {\n    function Point(longitude, latitude) {\n        validate_1.Validate.isGeopoint('longitude', longitude);\n        validate_1.Validate.isGeopoint('latitude', latitude);\n        this.longitude = longitude;\n        this.latitude = latitude;\n    }\n    Point.prototype.parse = function (key) {\n        var _a;\n        return _a = {},\n            _a[key] = {\n                type: 'Point',\n                coordinates: [this.longitude, this.latitude]\n            },\n            _a;\n    };\n    Point.prototype.toJSON = function () {\n        return {\n            type: 'Point',\n            coordinates: [\n                this.longitude,\n                this.latitude,\n            ],\n        };\n    };\n    Point.prototype.toReadableString = function () {\n        return \"[\" + this.longitude + \",\" + this.latitude + \"]\";\n    };\n    Point.validate = function (point) {\n        return point.type === 'Point' &&\n            type_1.isArray(point.coordinates) &&\n            validate_1.Validate.isGeopoint('longitude', point.coordinates[0]) &&\n            validate_1.Validate.isGeopoint('latitude', point.coordinates[1]);\n    };\n    Object.defineProperty(Point.prototype, \"_internalType\", {\n        get: function () {\n            return symbol_1.SYMBOL_GEO_POINT;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Point;\n}());\nexports.Point = Point;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constant_1 = require(\"./constant\");\nvar util_1 = require(\"./util\");\nvar Validate = (function () {\n    function Validate() {\n    }\n    Validate.isGeopoint = function (point, degree) {\n        if (util_1.Util.whichType(degree) !== constant_1.FieldType.Number) {\n            throw new Error('Geo Point must be number type');\n        }\n        var degreeAbs = Math.abs(degree);\n        if (point === 'latitude' && degreeAbs > 90) {\n            throw new Error('latitude should be a number ranges from -90 to 90');\n        }\n        else if (point === 'longitude' && degreeAbs > 180) {\n            throw new Error('longitude should be a number ranges from -180 to 180');\n        }\n        return true;\n    };\n    Validate.isInteger = function (param, num) {\n        if (!Number.isInteger(num)) {\n            throw new Error(param + constant_1.ErrorCode.IntergerError);\n        }\n        return true;\n    };\n    Validate.isFieldOrder = function (direction) {\n        if (constant_1.OrderDirectionList.indexOf(direction) === -1) {\n            throw new Error(constant_1.ErrorCode.DirectionError);\n        }\n        return true;\n    };\n    Validate.isFieldPath = function (path) {\n        if (!/^[a-zA-Z0-9-_\\.]/.test(path)) {\n            throw new Error();\n        }\n        return true;\n    };\n    Validate.isOperator = function (op) {\n        if (constant_1.WhereFilterOpList.indexOf(op) === -1) {\n            throw new Error(constant_1.ErrorCode.OpStrError);\n        }\n        return true;\n    };\n    Validate.isCollName = function (name) {\n        if (!/^[a-zA-Z0-9]([a-zA-Z0-9-_]){1,32}$/.test(name)) {\n            throw new Error(constant_1.ErrorCode.CollNameError);\n        }\n        return true;\n    };\n    Validate.isDocID = function (docId) {\n        if (!/^([a-fA-F0-9]){24}$/.test(docId)) {\n            throw new Error(constant_1.ErrorCode.DocIDError);\n        }\n        return true;\n    };\n    return Validate;\n}());\nexports.Validate = Validate;\n","\nvar _a;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar ErrorCode;\n(function (ErrorCode) {\n    ErrorCode[\"DocIDError\"] = \"\\u6587\\u6863ID\\u4E0D\\u5408\\u6CD5\";\n    ErrorCode[\"CollNameError\"] = \"\\u96C6\\u5408\\u540D\\u79F0\\u4E0D\\u5408\\u6CD5\";\n    ErrorCode[\"OpStrError\"] = \"\\u64CD\\u4F5C\\u7B26\\u4E0D\\u5408\\u6CD5\";\n    ErrorCode[\"DirectionError\"] = \"\\u6392\\u5E8F\\u5B57\\u7B26\\u4E0D\\u5408\\u6CD5\";\n    ErrorCode[\"IntergerError\"] = \"must be integer\";\n    ErrorCode[\"QueryParamTypeError\"] = \"\\u67E5\\u8BE2\\u53C2\\u6570\\u5FC5\\u987B\\u4E3A\\u5BF9\\u8C61\";\n    ErrorCode[\"QueryParamValueError\"] = \"\\u67E5\\u8BE2\\u53C2\\u6570\\u5BF9\\u8C61\\u503C\\u4E0D\\u80FD\\u5747\\u4E3Aundefined\";\n})(ErrorCode || (ErrorCode = {}));\nexports.ErrorCode = ErrorCode;\nvar FieldType = {\n    String: 'String',\n    Number: 'Number',\n    Object: 'Object',\n    Array: 'Array',\n    Boolean: 'Boolean',\n    Null: 'Null',\n    GeoPoint: 'GeoPoint',\n    GeoLineString: 'GeoLineString',\n    GeoPolygon: 'GeoPolygon',\n    GeoMultiPoint: 'GeoMultiPoint',\n    GeoMultiLineString: 'GeoMultiLineString',\n    GeoMultiPolygon: 'GeoMultiPolygon',\n    Timestamp: 'Date',\n    Command: 'Command',\n    ServerDate: 'ServerDate',\n    BsonDate: 'BsonDate'\n};\nexports.FieldType = FieldType;\nvar OrderDirectionList = ['desc', 'asc'];\nexports.OrderDirectionList = OrderDirectionList;\nvar WhereFilterOpList = ['<', '<=', '==', '>=', '>'];\nexports.WhereFilterOpList = WhereFilterOpList;\nvar Opeartor;\n(function (Opeartor) {\n    Opeartor[\"lt\"] = \"<\";\n    Opeartor[\"gt\"] = \">\";\n    Opeartor[\"lte\"] = \"<=\";\n    Opeartor[\"gte\"] = \">=\";\n    Opeartor[\"eq\"] = \"==\";\n})(Opeartor || (Opeartor = {}));\nexports.Opeartor = Opeartor;\nvar OperatorMap = (_a = {},\n    _a[Opeartor.eq] = '$eq',\n    _a[Opeartor.lt] = '$lt',\n    _a[Opeartor.lte] = '$lte',\n    _a[Opeartor.gt] = '$gt',\n    _a[Opeartor.gte] = '$gte',\n    _a);\nexports.OperatorMap = OperatorMap;\nvar UpdateOperatorList = [\n    '$set',\n    '$inc',\n    '$mul',\n    '$unset',\n    '$push',\n    '$pop',\n    '$unshift',\n    '$shift',\n    '$currentDate',\n    '$each',\n    '$position'\n];\nexports.UpdateOperatorList = UpdateOperatorList;\nvar QueryType;\n(function (QueryType) {\n    QueryType[\"WHERE\"] = \"WHERE\";\n    QueryType[\"DOC\"] = \"DOC\";\n})(QueryType || (QueryType = {}));\nexports.QueryType = QueryType;\n","\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar constant_1 = require(\"./constant\");\nvar index_1 = require(\"./geo/index\");\nvar index_2 = require(\"./serverDate/index\");\nvar Util = (function () {\n    function Util() {\n    }\n    Util.formatResDocumentData = function (documents) {\n        return documents.map(function (document) {\n            return Util.formatField(document);\n        });\n    };\n    Util.formatField = function (document) {\n        var keys = Object.keys(document);\n        var protoField = {};\n        if (Array.isArray(document)) {\n            protoField = [];\n        }\n        keys.forEach(function (key) {\n            var item = document[key];\n            var type = Util.whichType(item);\n            var realValue;\n            switch (type) {\n                case constant_1.FieldType.GeoPoint:\n                    realValue = new index_1.Point(item.coordinates[0], item.coordinates[1]);\n                    break;\n                case constant_1.FieldType.GeoLineString:\n                    realValue = new index_1.LineString(item.coordinates.map(function (point) { return new index_1.Point(point[0], point[1]); }));\n                    break;\n                case constant_1.FieldType.GeoPolygon:\n                    realValue = new index_1.Polygon(item.coordinates.map(function (line) { return new index_1.LineString(line.map(function (_a) {\n                        var _b = __read(_a, 2), lng = _b[0], lat = _b[1];\n                        return new index_1.Point(lng, lat);\n                    })); }));\n                    break;\n                case constant_1.FieldType.GeoMultiPoint:\n                    realValue = new index_1.MultiPoint(item.coordinates.map(function (point) { return new index_1.Point(point[0], point[1]); }));\n                    break;\n                case constant_1.FieldType.GeoMultiLineString:\n                    realValue = new index_1.MultiLineString(item.coordinates.map(function (line) { return new index_1.LineString(line.map(function (_a) {\n                        var _b = __read(_a, 2), lng = _b[0], lat = _b[1];\n                        return new index_1.Point(lng, lat);\n                    })); }));\n                    break;\n                case constant_1.FieldType.GeoMultiPolygon:\n                    realValue = new index_1.MultiPolygon(item.coordinates.map(function (polygon) {\n                        return new index_1.Polygon(polygon.map(function (line) { return new index_1.LineString(line.map(function (_a) {\n                            var _b = __read(_a, 2), lng = _b[0], lat = _b[1];\n                            return new index_1.Point(lng, lat);\n                        })); }));\n                    }));\n                    break;\n                case constant_1.FieldType.Timestamp:\n                    realValue = new Date(item.$timestamp * 1000);\n                    break;\n                case constant_1.FieldType.Object:\n                case constant_1.FieldType.Array:\n                    realValue = Util.formatField(item);\n                    break;\n                case constant_1.FieldType.ServerDate:\n                    realValue = new Date(item.$date);\n                    break;\n                default:\n                    realValue = item;\n            }\n            if (Array.isArray(protoField)) {\n                protoField.push(realValue);\n            }\n            else {\n                protoField[key] = realValue;\n            }\n        });\n        return protoField;\n    };\n    Util.whichType = function (obj) {\n        var type = Object.prototype.toString.call(obj).slice(8, -1);\n        if (type === constant_1.FieldType.Timestamp) {\n            return constant_1.FieldType.BsonDate;\n        }\n        if (type === constant_1.FieldType.Object) {\n            if (obj instanceof index_1.Point) {\n                return constant_1.FieldType.GeoPoint;\n            }\n            else if (obj instanceof Date) {\n                return constant_1.FieldType.Timestamp;\n            }\n            else if (obj instanceof index_2.ServerDate) {\n                return constant_1.FieldType.ServerDate;\n            }\n            if (obj.$timestamp) {\n                type = constant_1.FieldType.Timestamp;\n            }\n            else if (obj.$date) {\n                type = constant_1.FieldType.ServerDate;\n            }\n            else if (index_1.Point.validate(obj)) {\n                type = constant_1.FieldType.GeoPoint;\n            }\n            else if (index_1.LineString.validate(obj)) {\n                type = constant_1.FieldType.GeoLineString;\n            }\n            else if (index_1.Polygon.validate(obj)) {\n                type = constant_1.FieldType.GeoPolygon;\n            }\n            else if (index_1.MultiPoint.validate(obj)) {\n                type = constant_1.FieldType.GeoMultiPoint;\n            }\n            else if (index_1.MultiLineString.validate(obj)) {\n                type = constant_1.FieldType.GeoMultiLineString;\n            }\n            else if (index_1.MultiPolygon.validate(obj)) {\n                type = constant_1.FieldType.GeoMultiPolygon;\n            }\n        }\n        return type;\n    };\n    Util.generateDocId = function () {\n        var chars = 'ABCDEFabcdef0123456789';\n        var autoId = '';\n        for (var i = 0; i < 24; i++) {\n            autoId += chars.charAt(Math.floor(Math.random() * chars.length));\n        }\n        return autoId;\n    };\n    return Util;\n}());\nexports.Util = Util;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar symbol_1 = require(\"../helper/symbol\");\nvar ServerDate = (function () {\n    function ServerDate(_a) {\n        var _b = (_a === void 0 ? {} : _a).offset, offset = _b === void 0 ? 0 : _b;\n        this.offset = offset;\n    }\n    Object.defineProperty(ServerDate.prototype, \"_internalType\", {\n        get: function () {\n            return symbol_1.SYMBOL_SERVER_DATE;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ServerDate.prototype.parse = function () {\n        return {\n            $date: {\n                offset: this.offset\n            }\n        };\n    };\n    return ServerDate;\n}());\nexports.ServerDate = ServerDate;\nfunction ServerDateConstructor(opt) {\n    return new ServerDate(opt);\n}\nexports.ServerDateConstructor = ServerDateConstructor;\n","\nfunction __export(m) {\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\n}\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar symbol_1 = require(\"../utils/symbol\");\n__export(require(\"../utils/symbol\"));\nexports.SYMBOL_UNSET_FIELD_NAME = symbol_1.default.for('UNSET_FIELD_NAME');\nexports.SYMBOL_UPDATE_COMMAND = symbol_1.default.for('UPDATE_COMMAND');\nexports.SYMBOL_QUERY_COMMAND = symbol_1.default.for('QUERY_COMMAND');\nexports.SYMBOL_LOGIC_COMMAND = symbol_1.default.for('LOGIC_COMMAND');\nexports.SYMBOL_GEO_POINT = symbol_1.default.for('GEO_POINT');\nexports.SYMBOL_GEO_LINE_STRING = symbol_1.default.for('SYMBOL_GEO_LINE_STRING');\nexports.SYMBOL_GEO_POLYGON = symbol_1.default.for('SYMBOL_GEO_POLYGON');\nexports.SYMBOL_GEO_MULTI_POINT = symbol_1.default.for('SYMBOL_GEO_MULTI_POINT');\nexports.SYMBOL_GEO_MULTI_LINE_STRING = symbol_1.default.for('SYMBOL_GEO_MULTI_LINE_STRING');\nexports.SYMBOL_GEO_MULTI_POLYGON = symbol_1.default.for('SYMBOL_GEO_MULTI_POLYGON');\nexports.SYMBOL_SERVER_DATE = symbol_1.default.for('SERVER_DATE');\nexports.SYMBOL_REGEXP = symbol_1.default.for('REGEXP');\n","\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar _symbols = [];\nvar __internalMark__ = {};\nvar HiddenSymbol = (function () {\n    function HiddenSymbol(target) {\n        Object.defineProperties(this, {\n            target: {\n                enumerable: false,\n                writable: false,\n                configurable: false,\n                value: target,\n            },\n        });\n    }\n    return HiddenSymbol;\n}());\nvar InternalSymbol = (function (_super) {\n    __extends(InternalSymbol, _super);\n    function InternalSymbol(target, __mark__) {\n        var _this = this;\n        if (__mark__ !== __internalMark__) {\n            throw new TypeError('InternalSymbol cannot be constructed with new operator');\n        }\n        _this = _super.call(this, target) || this;\n        return _this;\n    }\n    InternalSymbol.for = function (target) {\n        for (var i = 0, len = _symbols.length; i < len; i++) {\n            if (_symbols[i].target === target) {\n                return _symbols[i].instance;\n            }\n        }\n        var symbol = new InternalSymbol(target, __internalMark__);\n        _symbols.push({\n            target: target,\n            instance: symbol,\n        });\n        return symbol;\n    };\n    return InternalSymbol;\n}(HiddenSymbol));\nexports.InternalSymbol = InternalSymbol;\nexports.default = InternalSymbol;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar symbol_1 = require(\"./symbol\");\nexports.getType = function (x) { return Object.prototype.toString.call(x).slice(8, -1).toLowerCase(); };\nexports.isObject = function (x) { return exports.getType(x) === 'object'; };\nexports.isString = function (x) { return exports.getType(x) === 'string'; };\nexports.isNumber = function (x) { return exports.getType(x) === 'number'; };\nexports.isPromise = function (x) { return exports.getType(x) === 'promise'; };\nexports.isFunction = function (x) { return typeof x === 'function'; };\nexports.isArray = function (x) { return Array.isArray(x); };\nexports.isDate = function (x) { return exports.getType(x) === 'date'; };\nexports.isRegExp = function (x) { return exports.getType(x) === 'regexp'; };\nexports.isInternalObject = function (x) { return x && (x._internalType instanceof symbol_1.InternalSymbol); };\nexports.isPlainObject = function (obj) {\n    if (typeof obj !== 'object' || obj === null)\n        return false;\n    var proto = obj;\n    while (Object.getPrototypeOf(proto) !== null) {\n        proto = Object.getPrototypeOf(proto);\n    }\n    return Object.getPrototypeOf(obj) === proto;\n};\n","\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar symbol_1 = require(\"../helper/symbol\");\nvar point_1 = require(\"./point\");\nvar type_1 = require(\"../utils/type\");\nvar LineString = (function () {\n    function LineString(points) {\n        if (!type_1.isArray(points)) {\n            throw new TypeError(\"\\\"points\\\" must be of type Point[]. Received type \" + typeof points);\n        }\n        if (points.length < 2) {\n            throw new Error('\"points\" must contain 2 points at least');\n        }\n        points.forEach(function (point) {\n            if (!(point instanceof point_1.Point)) {\n                throw new TypeError(\"\\\"points\\\" must be of type Point[]. Received type \" + typeof point + \"[]\");\n            }\n        });\n        this.points = points;\n    }\n    LineString.prototype.parse = function (key) {\n        var _a;\n        return _a = {},\n            _a[key] = {\n                type: 'LineString',\n                coordinates: this.points.map(function (point) { return point.toJSON().coordinates; })\n            },\n            _a;\n    };\n    LineString.prototype.toJSON = function () {\n        return {\n            type: 'LineString',\n            coordinates: this.points.map(function (point) { return point.toJSON().coordinates; })\n        };\n    };\n    LineString.validate = function (lineString) {\n        var e_1, _a;\n        if (lineString.type !== 'LineString' || !type_1.isArray(lineString.coordinates)) {\n            return false;\n        }\n        try {\n            for (var _b = __values(lineString.coordinates), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var point = _c.value;\n                if (!type_1.isNumber(point[0]) || !type_1.isNumber(point[1])) {\n                    return false;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return true;\n    };\n    LineString.isClosed = function (lineString) {\n        var firstPoint = lineString.points[0];\n        var lastPoint = lineString.points[lineString.points.length - 1];\n        if (firstPoint.latitude === lastPoint.latitude && firstPoint.longitude === lastPoint.longitude) {\n            return true;\n        }\n    };\n    Object.defineProperty(LineString.prototype, \"_internalType\", {\n        get: function () {\n            return symbol_1.SYMBOL_GEO_LINE_STRING;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return LineString;\n}());\nexports.LineString = LineString;\n","\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar symbol_1 = require(\"../helper/symbol\");\nvar type_1 = require(\"../utils/type\");\nvar lineString_1 = require(\"./lineString\");\nvar Polygon = (function () {\n    function Polygon(lines) {\n        if (!type_1.isArray(lines)) {\n            throw new TypeError(\"\\\"lines\\\" must be of type LineString[]. Received type \" + typeof lines);\n        }\n        if (lines.length === 0) {\n            throw new Error('Polygon must contain 1 linestring at least');\n        }\n        lines.forEach(function (line) {\n            if (!(line instanceof lineString_1.LineString)) {\n                throw new TypeError(\"\\\"lines\\\" must be of type LineString[]. Received type \" + typeof line + \"[]\");\n            }\n            if (!lineString_1.LineString.isClosed(line)) {\n                throw new Error(\"LineString \" + line.points.map(function (p) { return p.toReadableString(); }) + \" is not a closed cycle\");\n            }\n        });\n        this.lines = lines;\n    }\n    Polygon.prototype.parse = function (key) {\n        var _a;\n        return _a = {},\n            _a[key] = {\n                type: 'Polygon',\n                coordinates: this.lines.map(function (line) {\n                    return line.points.map(function (point) { return [point.longitude, point.latitude]; });\n                })\n            },\n            _a;\n    };\n    Polygon.prototype.toJSON = function () {\n        return {\n            type: 'Polygon',\n            coordinates: this.lines.map(function (line) {\n                return line.points.map(function (point) { return [point.longitude, point.latitude]; });\n            })\n        };\n    };\n    Polygon.validate = function (polygon) {\n        var e_1, _a, e_2, _b;\n        if (polygon.type !== 'Polygon' || !type_1.isArray(polygon.coordinates)) {\n            return false;\n        }\n        try {\n            for (var _c = __values(polygon.coordinates), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var line = _d.value;\n                if (!this.isCloseLineString(line)) {\n                    return false;\n                }\n                try {\n                    for (var line_1 = (e_2 = void 0, __values(line)), line_1_1 = line_1.next(); !line_1_1.done; line_1_1 = line_1.next()) {\n                        var point = line_1_1.value;\n                        if (!type_1.isNumber(point[0]) || !type_1.isNumber(point[1])) {\n                            return false;\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (line_1_1 && !line_1_1.done && (_b = line_1.return)) _b.call(line_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return true;\n    };\n    Polygon.isCloseLineString = function (lineString) {\n        var firstPoint = lineString[0];\n        var lastPoint = lineString[lineString.length - 1];\n        if (firstPoint[0] !== lastPoint[0] || firstPoint[1] !== lastPoint[1]) {\n            return false;\n        }\n        return true;\n    };\n    Object.defineProperty(Polygon.prototype, \"_internalType\", {\n        get: function () {\n            return symbol_1.SYMBOL_GEO_MULTI_POLYGON;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return Polygon;\n}());\nexports.Polygon = Polygon;\n","\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar symbol_1 = require(\"../helper/symbol\");\nvar point_1 = require(\"./point\");\nvar type_1 = require(\"../utils/type\");\nvar MultiPoint = (function () {\n    function MultiPoint(points) {\n        if (!type_1.isArray(points)) {\n            throw new TypeError(\"\\\"points\\\" must be of type Point[]. Received type \" + typeof points);\n        }\n        if (points.length === 0) {\n            throw new Error('\"points\" must contain 1 point at least');\n        }\n        points.forEach(function (point) {\n            if (!(point instanceof point_1.Point)) {\n                throw new TypeError(\"\\\"points\\\" must be of type Point[]. Received type \" + typeof point + \"[]\");\n            }\n        });\n        this.points = points;\n    }\n    MultiPoint.prototype.parse = function (key) {\n        var _a;\n        return _a = {},\n            _a[key] = {\n                type: 'MultiPoint',\n                coordinates: this.points.map(function (point) { return point.toJSON().coordinates; })\n            },\n            _a;\n    };\n    MultiPoint.prototype.toJSON = function () {\n        return {\n            type: 'MultiPoint',\n            coordinates: this.points.map(function (point) { return point.toJSON().coordinates; })\n        };\n    };\n    MultiPoint.validate = function (multiPoint) {\n        var e_1, _a;\n        if (multiPoint.type !== 'MultiPoint' || !type_1.isArray(multiPoint.coordinates)) {\n            return false;\n        }\n        try {\n            for (var _b = __values(multiPoint.coordinates), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var point = _c.value;\n                if (!type_1.isNumber(point[0]) || !type_1.isNumber(point[1])) {\n                    return false;\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return true;\n    };\n    Object.defineProperty(MultiPoint.prototype, \"_internalType\", {\n        get: function () {\n            return symbol_1.SYMBOL_GEO_MULTI_POINT;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MultiPoint;\n}());\nexports.MultiPoint = MultiPoint;\n","\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar symbol_1 = require(\"../helper/symbol\");\nvar type_1 = require(\"../utils/type\");\nvar lineString_1 = require(\"./lineString\");\nvar MultiLineString = (function () {\n    function MultiLineString(lines) {\n        if (!type_1.isArray(lines)) {\n            throw new TypeError(\"\\\"lines\\\" must be of type LineString[]. Received type \" + typeof lines);\n        }\n        if (lines.length === 0) {\n            throw new Error('Polygon must contain 1 linestring at least');\n        }\n        lines.forEach(function (line) {\n            if (!(line instanceof lineString_1.LineString)) {\n                throw new TypeError(\"\\\"lines\\\" must be of type LineString[]. Received type \" + typeof line + \"[]\");\n            }\n        });\n        this.lines = lines;\n    }\n    MultiLineString.prototype.parse = function (key) {\n        var _a;\n        return _a = {},\n            _a[key] = {\n                type: 'MultiLineString',\n                coordinates: this.lines.map(function (line) {\n                    return line.points.map(function (point) { return [point.longitude, point.latitude]; });\n                })\n            },\n            _a;\n    };\n    MultiLineString.prototype.toJSON = function () {\n        return {\n            type: 'MultiLineString',\n            coordinates: this.lines.map(function (line) {\n                return line.points.map(function (point) { return [point.longitude, point.latitude]; });\n            })\n        };\n    };\n    MultiLineString.validate = function (multiLineString) {\n        var e_1, _a, e_2, _b;\n        if (multiLineString.type !== 'MultiLineString' || !type_1.isArray(multiLineString.coordinates)) {\n            return false;\n        }\n        try {\n            for (var _c = __values(multiLineString.coordinates), _d = _c.next(); !_d.done; _d = _c.next()) {\n                var line = _d.value;\n                try {\n                    for (var line_1 = (e_2 = void 0, __values(line)), line_1_1 = line_1.next(); !line_1_1.done; line_1_1 = line_1.next()) {\n                        var point = line_1_1.value;\n                        if (!type_1.isNumber(point[0]) || !type_1.isNumber(point[1])) {\n                            return false;\n                        }\n                    }\n                }\n                catch (e_2_1) { e_2 = { error: e_2_1 }; }\n                finally {\n                    try {\n                        if (line_1_1 && !line_1_1.done && (_b = line_1.return)) _b.call(line_1);\n                    }\n                    finally { if (e_2) throw e_2.error; }\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_d && !_d.done && (_a = _c.return)) _a.call(_c);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return true;\n    };\n    Object.defineProperty(MultiLineString.prototype, \"_internalType\", {\n        get: function () {\n            return symbol_1.SYMBOL_GEO_MULTI_LINE_STRING;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MultiLineString;\n}());\nexports.MultiLineString = MultiLineString;\n","\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar symbol_1 = require(\"../helper/symbol\");\nvar type_1 = require(\"../utils/type\");\nvar polygon_1 = require(\"./polygon\");\nvar MultiPolygon = (function () {\n    function MultiPolygon(polygons) {\n        var e_1, _a;\n        if (!type_1.isArray(polygons)) {\n            throw new TypeError(\"\\\"polygons\\\" must be of type Polygon[]. Received type \" + typeof polygons);\n        }\n        if (polygons.length === 0) {\n            throw new Error('MultiPolygon must contain 1 polygon at least');\n        }\n        try {\n            for (var polygons_1 = __values(polygons), polygons_1_1 = polygons_1.next(); !polygons_1_1.done; polygons_1_1 = polygons_1.next()) {\n                var polygon = polygons_1_1.value;\n                if (!(polygon instanceof polygon_1.Polygon)) {\n                    throw new TypeError(\"\\\"polygon\\\" must be of type Polygon[]. Received type \" + typeof polygon + \"[]\");\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (polygons_1_1 && !polygons_1_1.done && (_a = polygons_1.return)) _a.call(polygons_1);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        this.polygons = polygons;\n    }\n    MultiPolygon.prototype.parse = function (key) {\n        var _a;\n        return _a = {},\n            _a[key] = {\n                type: 'MultiPolygon',\n                coordinates: this.polygons.map(function (polygon) {\n                    return polygon.lines.map(function (line) {\n                        return line.points.map(function (point) { return [point.longitude, point.latitude]; });\n                    });\n                })\n            },\n            _a;\n    };\n    MultiPolygon.prototype.toJSON = function () {\n        return {\n            type: 'MultiPolygon',\n            coordinates: this.polygons.map(function (polygon) {\n                return polygon.lines.map(function (line) {\n                    return line.points.map(function (point) { return [point.longitude, point.latitude]; });\n                });\n            })\n        };\n    };\n    MultiPolygon.validate = function (multiPolygon) {\n        var e_2, _a, e_3, _b, e_4, _c;\n        if (multiPolygon.type !== 'MultiPolygon' || !type_1.isArray(multiPolygon.coordinates)) {\n            return false;\n        }\n        try {\n            for (var _d = __values(multiPolygon.coordinates), _e = _d.next(); !_e.done; _e = _d.next()) {\n                var polygon = _e.value;\n                try {\n                    for (var polygon_2 = (e_3 = void 0, __values(polygon)), polygon_2_1 = polygon_2.next(); !polygon_2_1.done; polygon_2_1 = polygon_2.next()) {\n                        var line = polygon_2_1.value;\n                        try {\n                            for (var line_1 = (e_4 = void 0, __values(line)), line_1_1 = line_1.next(); !line_1_1.done; line_1_1 = line_1.next()) {\n                                var point = line_1_1.value;\n                                if (!type_1.isNumber(point[0]) || !type_1.isNumber(point[1])) {\n                                    return false;\n                                }\n                            }\n                        }\n                        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n                        finally {\n                            try {\n                                if (line_1_1 && !line_1_1.done && (_c = line_1.return)) _c.call(line_1);\n                            }\n                            finally { if (e_4) throw e_4.error; }\n                        }\n                    }\n                }\n                catch (e_3_1) { e_3 = { error: e_3_1 }; }\n                finally {\n                    try {\n                        if (polygon_2_1 && !polygon_2_1.done && (_b = polygon_2.return)) _b.call(polygon_2);\n                    }\n                    finally { if (e_3) throw e_3.error; }\n                }\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_e && !_e.done && (_a = _d.return)) _a.call(_d);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n        return true;\n    };\n    Object.defineProperty(MultiPolygon.prototype, \"_internalType\", {\n        get: function () {\n            return symbol_1.SYMBOL_GEO_POLYGON;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return MultiPolygon;\n}());\nexports.MultiPolygon = MultiPolygon;\n","\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar document_1 = require(\"./document\");\nvar query_1 = require(\"./query\");\nvar aggregate_1 = require(\"./aggregate\");\nvar CollectionReference = (function (_super) {\n    __extends(CollectionReference, _super);\n    function CollectionReference(db, coll) {\n        return _super.call(this, db, coll) || this;\n    }\n    Object.defineProperty(CollectionReference.prototype, \"name\", {\n        get: function () {\n            return this._coll;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionReference.prototype.doc = function (docID) {\n        if (typeof docID !== 'string' && typeof docID !== 'number') {\n            throw new Error('docId必须为字符串或数字');\n        }\n        return new document_1.DocumentReference(this._db, this._coll, docID);\n    };\n    CollectionReference.prototype.add = function (data, callback) {\n        var docRef = new document_1.DocumentReference(this._db, this._coll, undefined);\n        return docRef.create(data, callback);\n    };\n    CollectionReference.prototype.aggregate = function () {\n        return new aggregate_1.default(this._db, this._coll);\n    };\n    return CollectionReference;\n}(query_1.Query));\nexports.CollectionReference = CollectionReference;\n","\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"./lib/util\");\nvar index_1 = require(\"./index\");\nvar util_2 = require(\"./util\");\nvar update_1 = require(\"./serializer/update\");\nvar datatype_1 = require(\"./serializer/datatype\");\nvar update_2 = require(\"./commands/update\");\nvar constant_1 = require(\"./constant\");\nvar utils_1 = require(\"./utils/utils\");\nvar DocumentReference = (function () {\n    function DocumentReference(db, coll, docID, projection) {\n        var _this = this;\n        if (projection === void 0) { projection = {}; }\n        this.watch = function (options) {\n            var ws = utils_1.getWsInstance(_this._db);\n            return ws.watch(__assign(__assign({}, options), { envId: _this._db.config.env, collectionName: _this._coll, query: JSON.stringify({\n                    _id: _this.id\n                }) }));\n        };\n        this._db = db;\n        this._coll = coll;\n        this.id = docID;\n        this.request = new index_1.Db.reqClass(this._db.config);\n        this.projection = projection;\n    }\n    DocumentReference.prototype.create = function (data, callback) {\n        callback = callback || util_1.createPromiseCallback();\n        var params = {\n            collectionName: this._coll,\n            data: datatype_1.serialize(data)\n        };\n        if (this.id) {\n            params['_id'] = this.id;\n        }\n        this.request\n            .send('database.addDocument', params)\n            .then(function (res) {\n            if (res.code) {\n                callback(0, res);\n            }\n            else {\n                callback(0, {\n                    id: res.data._id,\n                    requestId: res.requestId\n                });\n            }\n        })\n            .catch(function (err) {\n            callback(err);\n        });\n        return callback.promise;\n    };\n    DocumentReference.prototype.set = function (data, callback) {\n        callback = callback || util_1.createPromiseCallback();\n        if (!this.id) {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: 'docId不能为空'\n            });\n        }\n        if (!data || typeof data !== 'object') {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '参数必需是非空对象'\n            });\n        }\n        if (data.hasOwnProperty('_id')) {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '不能更新_id的值'\n            });\n        }\n        var hasOperator = false;\n        var checkMixed = function (objs) {\n            if (typeof objs === 'object') {\n                for (var key in objs) {\n                    if (objs[key] instanceof update_2.UpdateCommand) {\n                        hasOperator = true;\n                    }\n                    else if (typeof objs[key] === 'object') {\n                        checkMixed(objs[key]);\n                    }\n                }\n            }\n        };\n        checkMixed(data);\n        if (hasOperator) {\n            return Promise.resolve({\n                code: 'DATABASE_REQUEST_FAILED',\n                message: 'update operator complicit'\n            });\n        }\n        var merge = false;\n        var param = {\n            collectionName: this._coll,\n            queryType: constant_1.QueryType.DOC,\n            data: datatype_1.serialize(data),\n            multi: false,\n            merge: merge,\n            upsert: true\n        };\n        if (this.id) {\n            param['query'] = { _id: this.id };\n        }\n        this.request\n            .send('database.updateDocument', param)\n            .then(function (res) {\n            if (res.code) {\n                callback(0, res);\n            }\n            else {\n                callback(0, {\n                    updated: res.data.updated,\n                    upsertedId: res.data.upserted_id,\n                    requestId: res.requestId\n                });\n            }\n        })\n            .catch(function (err) {\n            callback(err);\n        });\n        return callback.promise;\n    };\n    DocumentReference.prototype.update = function (data, callback) {\n        callback = callback || util_1.createPromiseCallback();\n        if (!data || typeof data !== 'object') {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '参数必需是非空对象'\n            });\n        }\n        if (data.hasOwnProperty('_id')) {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '不能更新_id的值'\n            });\n        }\n        var query = { _id: this.id };\n        var merge = true;\n        var param = {\n            collectionName: this._coll,\n            data: update_1.UpdateSerializer.encode(data),\n            query: query,\n            queryType: constant_1.QueryType.DOC,\n            multi: false,\n            merge: merge,\n            upsert: false\n        };\n        this.request\n            .send('database.updateDocument', param)\n            .then(function (res) {\n            if (res.code) {\n                callback(0, res);\n            }\n            else {\n                callback(0, {\n                    updated: res.data.updated,\n                    upsertedId: res.data.upserted_id,\n                    requestId: res.requestId\n                });\n            }\n        })\n            .catch(function (err) {\n            callback(err);\n        });\n        return callback.promise;\n    };\n    DocumentReference.prototype.remove = function (callback) {\n        callback = callback || util_1.createPromiseCallback();\n        var query = { _id: this.id };\n        var param = {\n            collectionName: this._coll,\n            query: query,\n            queryType: constant_1.QueryType.DOC,\n            multi: false\n        };\n        this.request\n            .send('database.deleteDocument', param)\n            .then(function (res) {\n            if (res.code) {\n                callback(0, res);\n            }\n            else {\n                callback(0, {\n                    deleted: res.data.deleted,\n                    requestId: res.requestId\n                });\n            }\n        })\n            .catch(function (err) {\n            callback(err);\n        });\n        return callback.promise;\n    };\n    DocumentReference.prototype.get = function (callback) {\n        callback = callback || util_1.createPromiseCallback();\n        var query = { _id: this.id };\n        var param = {\n            collectionName: this._coll,\n            query: query,\n            queryType: constant_1.QueryType.DOC,\n            multi: false,\n            projection: this.projection\n        };\n        this.request\n            .send('database.queryDocument', param)\n            .then(function (res) {\n            if (res.code) {\n                callback(0, res);\n            }\n            else {\n                var documents = util_2.Util.formatResDocumentData(res.data.list);\n                callback(0, {\n                    data: documents,\n                    requestId: res.requestId,\n                    total: res.TotalCount,\n                    limit: res.Limit,\n                    offset: res.Offset\n                });\n            }\n        })\n            .catch(function (err) {\n            callback(err);\n        });\n        return callback.promise;\n    };\n    DocumentReference.prototype.field = function (projection) {\n        for (var k in projection) {\n            if (projection[k]) {\n                projection[k] = 1;\n            }\n            else {\n                projection[k] = 0;\n            }\n        }\n        return new DocumentReference(this._db, this._coll, this.id, projection);\n    };\n    return DocumentReference;\n}());\nexports.DocumentReference = DocumentReference;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.createPromiseCallback = function () {\n    var cb;\n    if (!Promise) {\n        cb = function () { };\n        cb.promise = {};\n        var throwPromiseNotDefined = function () {\n            throw new Error('Your Node runtime does support ES6 Promises. ' +\n                'Set \"global.Promise\" to your preferred implementation of promises.');\n        };\n        Object.defineProperty(cb.promise, 'then', { get: throwPromiseNotDefined });\n        Object.defineProperty(cb.promise, 'catch', { get: throwPromiseNotDefined });\n        return cb;\n    }\n    var promise = new Promise(function (resolve, reject) {\n        cb = function (err, data) {\n            if (err)\n                return reject(err);\n            return resolve(data);\n        };\n    });\n    cb.promise = promise;\n    return cb;\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar update_1 = require(\"../commands/update\");\nvar symbol_1 = require(\"../helper/symbol\");\nvar type_1 = require(\"../utils/type\");\nvar operator_map_1 = require(\"../operator-map\");\nvar common_1 = require(\"./common\");\nvar UpdateSerializer = (function () {\n    function UpdateSerializer() {\n    }\n    UpdateSerializer.encode = function (query) {\n        var stringifier = new UpdateSerializer();\n        return stringifier.encodeUpdate(query);\n    };\n    UpdateSerializer.prototype.encodeUpdate = function (query) {\n        if (update_1.isUpdateCommand(query)) {\n            return this.encodeUpdateCommand(query);\n        }\n        else if (type_1.getType(query) === 'object') {\n            return this.encodeUpdateObject(query);\n        }\n        else {\n            return query;\n        }\n    };\n    UpdateSerializer.prototype.encodeUpdateCommand = function (query) {\n        if (query.fieldName === symbol_1.SYMBOL_UNSET_FIELD_NAME) {\n            throw new Error('Cannot encode a comparison command with unset field name');\n        }\n        switch (query.operator) {\n            case update_1.UPDATE_COMMANDS_LITERAL.PUSH:\n            case update_1.UPDATE_COMMANDS_LITERAL.PULL:\n            case update_1.UPDATE_COMMANDS_LITERAL.PULL_ALL:\n            case update_1.UPDATE_COMMANDS_LITERAL.POP:\n            case update_1.UPDATE_COMMANDS_LITERAL.SHIFT:\n            case update_1.UPDATE_COMMANDS_LITERAL.UNSHIFT:\n            case update_1.UPDATE_COMMANDS_LITERAL.ADD_TO_SET: {\n                return this.encodeArrayUpdateCommand(query);\n            }\n            default: {\n                return this.encodeFieldUpdateCommand(query);\n            }\n        }\n    };\n    UpdateSerializer.prototype.encodeFieldUpdateCommand = function (query) {\n        var _a, _b, _c, _d;\n        var $op = operator_map_1.operatorToString(query.operator);\n        switch (query.operator) {\n            case update_1.UPDATE_COMMANDS_LITERAL.REMOVE: {\n                return _a = {},\n                    _a[$op] = (_b = {},\n                        _b[query.fieldName] = '',\n                        _b),\n                    _a;\n            }\n            default: {\n                return _c = {},\n                    _c[$op] = (_d = {},\n                        _d[query.fieldName] = query.operands[0],\n                        _d),\n                    _c;\n            }\n        }\n    };\n    UpdateSerializer.prototype.encodeArrayUpdateCommand = function (query) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n        var $op = operator_map_1.operatorToString(query.operator);\n        switch (query.operator) {\n            case update_1.UPDATE_COMMANDS_LITERAL.PUSH: {\n                var modifiers = void 0;\n                if (type_1.isArray(query.operands)) {\n                    modifiers = {\n                        $each: query.operands.map(common_1.encodeInternalDataType)\n                    };\n                }\n                else {\n                    modifiers = query.operands;\n                }\n                return _a = {},\n                    _a[$op] = (_b = {},\n                        _b[query.fieldName] = modifiers,\n                        _b),\n                    _a;\n            }\n            case update_1.UPDATE_COMMANDS_LITERAL.UNSHIFT: {\n                var modifiers = {\n                    $each: query.operands.map(common_1.encodeInternalDataType),\n                    $position: 0\n                };\n                return _c = {},\n                    _c[$op] = (_d = {},\n                        _d[query.fieldName] = modifiers,\n                        _d),\n                    _c;\n            }\n            case update_1.UPDATE_COMMANDS_LITERAL.POP: {\n                return _e = {},\n                    _e[$op] = (_f = {},\n                        _f[query.fieldName] = 1,\n                        _f),\n                    _e;\n            }\n            case update_1.UPDATE_COMMANDS_LITERAL.SHIFT: {\n                return _g = {},\n                    _g[$op] = (_h = {},\n                        _h[query.fieldName] = -1,\n                        _h),\n                    _g;\n            }\n            default: {\n                return _j = {},\n                    _j[$op] = (_k = {},\n                        _k[query.fieldName] = common_1.encodeInternalDataType(query.operands),\n                        _k),\n                    _j;\n            }\n        }\n    };\n    UpdateSerializer.prototype.encodeUpdateObject = function (query) {\n        var flattened = common_1.flattenQueryObject(query);\n        for (var key in flattened) {\n            if (/^\\$/.test(key))\n                continue;\n            var val = flattened[key];\n            if (update_1.isUpdateCommand(val)) {\n                flattened[key] = val._setFieldName(key);\n                var condition = this.encodeUpdateCommand(flattened[key]);\n                common_1.mergeConditionAfterEncode(flattened, condition, key);\n            }\n            else {\n                flattened[key] = val = common_1.encodeInternalDataType(val);\n                var $setCommand = new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.SET, [val], key);\n                var condition = this.encodeUpdateCommand($setCommand);\n                common_1.mergeConditionAfterEncode(flattened, condition, key);\n            }\n        }\n        return flattened;\n    };\n    return UpdateSerializer;\n}());\nexports.UpdateSerializer = UpdateSerializer;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar symbol_1 = require(\"../helper/symbol\");\nvar UPDATE_COMMANDS_LITERAL;\n(function (UPDATE_COMMANDS_LITERAL) {\n    UPDATE_COMMANDS_LITERAL[\"SET\"] = \"set\";\n    UPDATE_COMMANDS_LITERAL[\"REMOVE\"] = \"remove\";\n    UPDATE_COMMANDS_LITERAL[\"INC\"] = \"inc\";\n    UPDATE_COMMANDS_LITERAL[\"MUL\"] = \"mul\";\n    UPDATE_COMMANDS_LITERAL[\"PUSH\"] = \"push\";\n    UPDATE_COMMANDS_LITERAL[\"PULL\"] = \"pull\";\n    UPDATE_COMMANDS_LITERAL[\"PULL_ALL\"] = \"pullAll\";\n    UPDATE_COMMANDS_LITERAL[\"POP\"] = \"pop\";\n    UPDATE_COMMANDS_LITERAL[\"SHIFT\"] = \"shift\";\n    UPDATE_COMMANDS_LITERAL[\"UNSHIFT\"] = \"unshift\";\n    UPDATE_COMMANDS_LITERAL[\"ADD_TO_SET\"] = \"addToSet\";\n    UPDATE_COMMANDS_LITERAL[\"BIT\"] = \"bit\";\n    UPDATE_COMMANDS_LITERAL[\"RENAME\"] = \"rename\";\n    UPDATE_COMMANDS_LITERAL[\"MAX\"] = \"max\";\n    UPDATE_COMMANDS_LITERAL[\"MIN\"] = \"min\";\n})(UPDATE_COMMANDS_LITERAL = exports.UPDATE_COMMANDS_LITERAL || (exports.UPDATE_COMMANDS_LITERAL = {}));\nvar UpdateCommand = (function () {\n    function UpdateCommand(operator, operands, fieldName) {\n        this._internalType = symbol_1.SYMBOL_UPDATE_COMMAND;\n        Object.defineProperties(this, {\n            _internalType: {\n                enumerable: false,\n                configurable: false,\n            },\n        });\n        this.operator = operator;\n        this.operands = operands;\n        this.fieldName = fieldName || symbol_1.SYMBOL_UNSET_FIELD_NAME;\n    }\n    UpdateCommand.prototype._setFieldName = function (fieldName) {\n        var command = new UpdateCommand(this.operator, this.operands, fieldName);\n        return command;\n    };\n    return UpdateCommand;\n}());\nexports.UpdateCommand = UpdateCommand;\nfunction isUpdateCommand(object) {\n    return object && (object instanceof UpdateCommand) && (object._internalType === symbol_1.SYMBOL_UPDATE_COMMAND);\n}\nexports.isUpdateCommand = isUpdateCommand;\nfunction isKnownUpdateCommand(object) {\n    return isUpdateCommand(object) && (object.operator.toUpperCase() in UPDATE_COMMANDS_LITERAL);\n}\nexports.isKnownUpdateCommand = isKnownUpdateCommand;\nexports.default = UpdateCommand;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar query_1 = require(\"./commands/query\");\nvar logic_1 = require(\"./commands/logic\");\nvar update_1 = require(\"./commands/update\");\nexports.OperatorMap = {};\nfor (var key in query_1.QUERY_COMMANDS_LITERAL) {\n    exports.OperatorMap[key] = '$' + key;\n}\nfor (var key in logic_1.LOGIC_COMMANDS_LITERAL) {\n    exports.OperatorMap[key] = '$' + key;\n}\nfor (var key in update_1.UPDATE_COMMANDS_LITERAL) {\n    exports.OperatorMap[key] = '$' + key;\n}\nexports.OperatorMap[query_1.QUERY_COMMANDS_LITERAL.NEQ] = '$ne';\nexports.OperatorMap[update_1.UPDATE_COMMANDS_LITERAL.REMOVE] = '$unset';\nexports.OperatorMap[update_1.UPDATE_COMMANDS_LITERAL.SHIFT] = '$pop';\nexports.OperatorMap[update_1.UPDATE_COMMANDS_LITERAL.UNSHIFT] = '$push';\nfunction operatorToString(operator) {\n    return exports.OperatorMap[operator] || '$' + operator;\n}\nexports.operatorToString = operatorToString;\n","\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar logic_1 = require(\"./logic\");\nvar symbol_1 = require(\"../helper/symbol\");\nvar index_1 = require(\"../geo/index\");\nvar type_1 = require(\"../utils/type\");\nexports.EQ = 'eq';\nexports.NEQ = 'neq';\nexports.GT = 'gt';\nexports.GTE = 'gte';\nexports.LT = 'lt';\nexports.LTE = 'lte';\nexports.IN = 'in';\nexports.NIN = 'nin';\nexports.ALL = 'all';\nexports.ELEM_MATCH = 'elemMatch';\nexports.EXISTS = 'exists';\nexports.SIZE = 'size';\nexports.MOD = 'mod';\nvar QUERY_COMMANDS_LITERAL;\n(function (QUERY_COMMANDS_LITERAL) {\n    QUERY_COMMANDS_LITERAL[\"EQ\"] = \"eq\";\n    QUERY_COMMANDS_LITERAL[\"NEQ\"] = \"neq\";\n    QUERY_COMMANDS_LITERAL[\"GT\"] = \"gt\";\n    QUERY_COMMANDS_LITERAL[\"GTE\"] = \"gte\";\n    QUERY_COMMANDS_LITERAL[\"LT\"] = \"lt\";\n    QUERY_COMMANDS_LITERAL[\"LTE\"] = \"lte\";\n    QUERY_COMMANDS_LITERAL[\"IN\"] = \"in\";\n    QUERY_COMMANDS_LITERAL[\"NIN\"] = \"nin\";\n    QUERY_COMMANDS_LITERAL[\"ALL\"] = \"all\";\n    QUERY_COMMANDS_LITERAL[\"ELEM_MATCH\"] = \"elemMatch\";\n    QUERY_COMMANDS_LITERAL[\"EXISTS\"] = \"exists\";\n    QUERY_COMMANDS_LITERAL[\"SIZE\"] = \"size\";\n    QUERY_COMMANDS_LITERAL[\"MOD\"] = \"mod\";\n    QUERY_COMMANDS_LITERAL[\"GEO_NEAR\"] = \"geoNear\";\n    QUERY_COMMANDS_LITERAL[\"GEO_WITHIN\"] = \"geoWithin\";\n    QUERY_COMMANDS_LITERAL[\"GEO_INTERSECTS\"] = \"geoIntersects\";\n})(QUERY_COMMANDS_LITERAL = exports.QUERY_COMMANDS_LITERAL || (exports.QUERY_COMMANDS_LITERAL = {}));\nvar QueryCommand = (function (_super) {\n    __extends(QueryCommand, _super);\n    function QueryCommand(operator, operands, fieldName) {\n        var _this = _super.call(this, operator, operands, fieldName) || this;\n        _this.operator = operator;\n        _this._internalType = symbol_1.SYMBOL_QUERY_COMMAND;\n        return _this;\n    }\n    QueryCommand.prototype.toJSON = function () {\n        var _a, _b;\n        switch (this.operator) {\n            case QUERY_COMMANDS_LITERAL.IN:\n            case QUERY_COMMANDS_LITERAL.NIN:\n                return _a = {},\n                    _a['$' + this.operator] = this.operands,\n                    _a;\n            default:\n                return _b = {},\n                    _b['$' + this.operator] = this.operands[0],\n                    _b;\n        }\n    };\n    QueryCommand.prototype._setFieldName = function (fieldName) {\n        var command = new QueryCommand(this.operator, this.operands, fieldName);\n        return command;\n    };\n    QueryCommand.prototype.eq = function (val) {\n        var command = new QueryCommand(QUERY_COMMANDS_LITERAL.EQ, [val], this.fieldName);\n        return this.and(command);\n    };\n    QueryCommand.prototype.neq = function (val) {\n        var command = new QueryCommand(QUERY_COMMANDS_LITERAL.NEQ, [val], this.fieldName);\n        return this.and(command);\n    };\n    QueryCommand.prototype.gt = function (val) {\n        var command = new QueryCommand(QUERY_COMMANDS_LITERAL.GT, [val], this.fieldName);\n        return this.and(command);\n    };\n    QueryCommand.prototype.gte = function (val) {\n        var command = new QueryCommand(QUERY_COMMANDS_LITERAL.GTE, [val], this.fieldName);\n        return this.and(command);\n    };\n    QueryCommand.prototype.lt = function (val) {\n        var command = new QueryCommand(QUERY_COMMANDS_LITERAL.LT, [val], this.fieldName);\n        return this.and(command);\n    };\n    QueryCommand.prototype.lte = function (val) {\n        var command = new QueryCommand(QUERY_COMMANDS_LITERAL.LTE, [val], this.fieldName);\n        return this.and(command);\n    };\n    QueryCommand.prototype.in = function (list) {\n        var command = new QueryCommand(QUERY_COMMANDS_LITERAL.IN, list, this.fieldName);\n        return this.and(command);\n    };\n    QueryCommand.prototype.nin = function (list) {\n        var command = new QueryCommand(QUERY_COMMANDS_LITERAL.NIN, list, this.fieldName);\n        return this.and(command);\n    };\n    QueryCommand.prototype.geoNear = function (val) {\n        if (!(val.geometry instanceof index_1.Point)) {\n            throw new TypeError(\"\\\"geometry\\\" must be of type Point. Received type \" + typeof val.geometry);\n        }\n        if (val.maxDistance !== undefined && !type_1.isNumber(val.maxDistance)) {\n            throw new TypeError(\"\\\"maxDistance\\\" must be of type Number. Received type \" + typeof val.maxDistance);\n        }\n        if (val.minDistance !== undefined && !type_1.isNumber(val.minDistance)) {\n            throw new TypeError(\"\\\"minDistance\\\" must be of type Number. Received type \" + typeof val.minDistance);\n        }\n        var command = new QueryCommand(QUERY_COMMANDS_LITERAL.GEO_NEAR, [val], this.fieldName);\n        return this.and(command);\n    };\n    QueryCommand.prototype.geoWithin = function (val) {\n        if (!(val.geometry instanceof index_1.MultiPolygon) && !(val.geometry instanceof index_1.Polygon)) {\n            throw new TypeError(\"\\\"geometry\\\" must be of type Polygon or MultiPolygon. Received type \" + typeof val.geometry);\n        }\n        var command = new QueryCommand(QUERY_COMMANDS_LITERAL.GEO_WITHIN, [val], this.fieldName);\n        return this.and(command);\n    };\n    QueryCommand.prototype.geoIntersects = function (val) {\n        if (!(val.geometry instanceof index_1.Point) &&\n            !(val.geometry instanceof index_1.LineString) &&\n            !(val.geometry instanceof index_1.Polygon) &&\n            !(val.geometry instanceof index_1.MultiPoint) &&\n            !(val.geometry instanceof index_1.MultiLineString) &&\n            !(val.geometry instanceof index_1.MultiPolygon)) {\n            throw new TypeError(\"\\\"geometry\\\" must be of type Point, LineString, Polygon, MultiPoint, MultiLineString or MultiPolygon. Received type \" + typeof val.geometry);\n        }\n        var command = new QueryCommand(QUERY_COMMANDS_LITERAL.GEO_INTERSECTS, [val], this.fieldName);\n        return this.and(command);\n    };\n    return QueryCommand;\n}(logic_1.LogicCommand));\nexports.QueryCommand = QueryCommand;\nfunction isQueryCommand(object) {\n    return object && object instanceof QueryCommand && object._internalType === symbol_1.SYMBOL_QUERY_COMMAND;\n}\nexports.isQueryCommand = isQueryCommand;\nfunction isKnownQueryCommand(object) {\n    return isQueryCommand(object) && object.operator.toUpperCase() in QUERY_COMMANDS_LITERAL;\n}\nexports.isKnownQueryCommand = isKnownQueryCommand;\nfunction isComparisonCommand(object) {\n    return isQueryCommand(object);\n}\nexports.isComparisonCommand = isComparisonCommand;\nexports.default = QueryCommand;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar symbol_1 = require(\"../helper/symbol\");\nvar query_1 = require(\"./query\");\nexports.AND = 'and';\nexports.OR = 'or';\nexports.NOT = 'not';\nexports.NOR = 'nor';\nvar LOGIC_COMMANDS_LITERAL;\n(function (LOGIC_COMMANDS_LITERAL) {\n    LOGIC_COMMANDS_LITERAL[\"AND\"] = \"and\";\n    LOGIC_COMMANDS_LITERAL[\"OR\"] = \"or\";\n    LOGIC_COMMANDS_LITERAL[\"NOT\"] = \"not\";\n    LOGIC_COMMANDS_LITERAL[\"NOR\"] = \"nor\";\n})(LOGIC_COMMANDS_LITERAL = exports.LOGIC_COMMANDS_LITERAL || (exports.LOGIC_COMMANDS_LITERAL = {}));\nvar LogicCommand = (function () {\n    function LogicCommand(operator, operands, fieldName) {\n        this._internalType = symbol_1.SYMBOL_LOGIC_COMMAND;\n        Object.defineProperties(this, {\n            _internalType: {\n                enumerable: false,\n                configurable: false,\n            },\n        });\n        this.operator = operator;\n        this.operands = operands;\n        this.fieldName = fieldName || symbol_1.SYMBOL_UNSET_FIELD_NAME;\n        if (this.fieldName !== symbol_1.SYMBOL_UNSET_FIELD_NAME) {\n            if (Array.isArray(operands)) {\n                operands = operands.slice();\n                this.operands = operands;\n                for (var i = 0, len = operands.length; i < len; i++) {\n                    var query = operands[i];\n                    if (isLogicCommand(query) || query_1.isQueryCommand(query)) {\n                        operands[i] = query._setFieldName(this.fieldName);\n                    }\n                }\n            }\n            else {\n                var query = operands;\n                if (isLogicCommand(query) || query_1.isQueryCommand(query)) {\n                    operands = query._setFieldName(this.fieldName);\n                }\n            }\n        }\n    }\n    LogicCommand.prototype._setFieldName = function (fieldName) {\n        var operands = this.operands.map(function (operand) {\n            if (operand instanceof LogicCommand) {\n                return operand._setFieldName(fieldName);\n            }\n            else {\n                return operand;\n            }\n        });\n        var command = new LogicCommand(this.operator, operands, fieldName);\n        return command;\n    };\n    LogicCommand.prototype.and = function () {\n        var __expressions__ = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            __expressions__[_i] = arguments[_i];\n        }\n        var expressions = Array.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        expressions.unshift(this);\n        return new LogicCommand(LOGIC_COMMANDS_LITERAL.AND, expressions, this.fieldName);\n    };\n    LogicCommand.prototype.or = function () {\n        var __expressions__ = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            __expressions__[_i] = arguments[_i];\n        }\n        var expressions = Array.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        expressions.unshift(this);\n        return new LogicCommand(LOGIC_COMMANDS_LITERAL.OR, expressions, this.fieldName);\n    };\n    return LogicCommand;\n}());\nexports.LogicCommand = LogicCommand;\nfunction isLogicCommand(object) {\n    return object && (object instanceof LogicCommand) && (object._internalType === symbol_1.SYMBOL_LOGIC_COMMAND);\n}\nexports.isLogicCommand = isLogicCommand;\nfunction isKnownLogicCommand(object) {\n    return isLogicCommand && (object.operator.toUpperCase() in LOGIC_COMMANDS_LITERAL);\n}\nexports.isKnownLogicCommand = isKnownLogicCommand;\nexports.default = LogicCommand;\n","\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar type_1 = require(\"../utils/type\");\nvar datatype_1 = require(\"./datatype\");\nfunction flatten(query, shouldPreserverObject, parents, visited) {\n    var cloned = __assign({}, query);\n    for (var key in query) {\n        if (/^\\$/.test(key))\n            continue;\n        var value = query[key];\n        if (!value)\n            continue;\n        if (type_1.isObject(value) && !shouldPreserverObject(value)) {\n            if (visited.indexOf(value) > -1) {\n                throw new Error('Cannot convert circular structure to JSON');\n            }\n            var newParents = __spread(parents, [\n                key,\n            ]);\n            var newVisited = __spread(visited, [\n                value,\n            ]);\n            var flattenedChild = flatten(value, shouldPreserverObject, newParents, newVisited);\n            cloned[key] = flattenedChild;\n            var hasKeyNotCombined = false;\n            for (var childKey in flattenedChild) {\n                if (!/^\\$/.test(childKey)) {\n                    cloned[key + \".\" + childKey] = flattenedChild[childKey];\n                    delete cloned[key][childKey];\n                }\n                else {\n                    hasKeyNotCombined = true;\n                }\n            }\n            if (!hasKeyNotCombined) {\n                delete cloned[key];\n            }\n        }\n    }\n    return cloned;\n}\nfunction flattenQueryObject(query) {\n    return flatten(query, isConversionRequired, [], [query]);\n}\nexports.flattenQueryObject = flattenQueryObject;\nfunction flattenObject(object) {\n    return flatten(object, function (_) { return false; }, [], [object]);\n}\nexports.flattenObject = flattenObject;\nfunction mergeConditionAfterEncode(query, condition, key) {\n    if (!condition[key]) {\n        delete query[key];\n    }\n    for (var conditionKey in condition) {\n        if (query[conditionKey]) {\n            if (type_1.isArray(query[conditionKey])) {\n                query[conditionKey].push(condition[conditionKey]);\n            }\n            else if (type_1.isObject(query[conditionKey])) {\n                if (type_1.isObject(condition[conditionKey])) {\n                    Object.assign(query[conditionKey], condition[conditionKey]);\n                }\n                else {\n                    console.warn(\"unmergable condition, query is object but condition is \" + type_1.getType(condition) + \", can only overwrite\", condition, key);\n                    query[conditionKey] = condition[conditionKey];\n                }\n            }\n            else {\n                console.warn(\"to-merge query is of type \" + type_1.getType(query) + \", can only overwrite\", query, condition, key);\n                query[conditionKey] = condition[conditionKey];\n            }\n        }\n        else {\n            query[conditionKey] = condition[conditionKey];\n        }\n    }\n}\nexports.mergeConditionAfterEncode = mergeConditionAfterEncode;\nfunction isConversionRequired(val) {\n    return type_1.isInternalObject(val) || type_1.isDate(val) || type_1.isRegExp(val);\n}\nexports.isConversionRequired = isConversionRequired;\nfunction encodeInternalDataType(val) {\n    return datatype_1.serialize(val);\n}\nexports.encodeInternalDataType = encodeInternalDataType;\nfunction decodeInternalDataType(object) {\n    return datatype_1.deserialize(object);\n}\nexports.decodeInternalDataType = decodeInternalDataType;\n","\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spread = (this && this.__spread) || function () {\n    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));\n    return ar;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar symbol_1 = require(\"../helper/symbol\");\nvar type_1 = require(\"../utils/type\");\nvar index_1 = require(\"../geo/index\");\nvar index_2 = require(\"../serverDate/index\");\nfunction serialize(val) {\n    return serializeHelper(val, [val]);\n}\nexports.serialize = serialize;\nfunction serializeHelper(val, visited) {\n    if (type_1.isInternalObject(val)) {\n        switch (val._internalType) {\n            case symbol_1.SYMBOL_GEO_POINT: {\n                return val.toJSON();\n            }\n            case symbol_1.SYMBOL_SERVER_DATE: {\n                return val.parse();\n            }\n            case symbol_1.SYMBOL_REGEXP: {\n                return val.parse();\n            }\n            default: {\n                return val.toJSON ? val.toJSON() : val;\n            }\n        }\n    }\n    else if (type_1.isDate(val)) {\n        return {\n            $date: +val,\n        };\n    }\n    else if (type_1.isRegExp(val)) {\n        return {\n            $regex: val.source,\n            $options: val.flags,\n        };\n    }\n    else if (type_1.isArray(val)) {\n        return val.map(function (item) {\n            if (visited.indexOf(item) > -1) {\n                throw new Error('Cannot convert circular structure to JSON');\n            }\n            return serializeHelper(item, __spread(visited, [\n                item,\n            ]));\n        });\n    }\n    else if (type_1.isObject(val)) {\n        var ret = __assign({}, val);\n        for (var key in ret) {\n            if (visited.indexOf(ret[key]) > -1) {\n                throw new Error('Cannot convert circular structure to JSON');\n            }\n            ret[key] = serializeHelper(ret[key], __spread(visited, [\n                ret[key],\n            ]));\n        }\n        return ret;\n    }\n    else {\n        return val;\n    }\n}\nfunction deserialize(object) {\n    var ret = __assign({}, object);\n    for (var key in ret) {\n        switch (key) {\n            case '$date': {\n                switch (type_1.getType(ret[key])) {\n                    case 'number': {\n                        return new Date(ret[key]);\n                    }\n                    case 'object': {\n                        return new index_2.ServerDate(ret[key]);\n                    }\n                }\n                break;\n            }\n            case 'type': {\n                switch (ret.type) {\n                    case 'Point': {\n                        if (type_1.isArray(ret.coordinates) && type_1.isNumber(ret.coordinates[0]) && type_1.isNumber(ret.coordinates[1])) {\n                            return new index_1.Point(ret.coordinates[0], ret.coordinates[1]);\n                        }\n                        break;\n                    }\n                }\n                break;\n            }\n        }\n    }\n    return object;\n}\nexports.deserialize = deserialize;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar __1 = require(\"../\");\nexports.sleep = function (ms) {\n    if (ms === void 0) { ms = 0; }\n    return new Promise(function (r) { return setTimeout(r, ms); });\n};\nvar counters = {};\nexports.autoCount = function (domain) {\n    if (domain === void 0) { domain = 'any'; }\n    if (!counters[domain]) {\n        counters[domain] = 0;\n    }\n    return counters[domain]++;\n};\nvar wsList = {};\nfunction getWsInstance(db) {\n    if (!__1.Db.wsClientClass) {\n        throw new Error('to use realtime you must import realtime module first');\n    }\n    var env = db.config.env;\n    if (!wsList[env]) {\n        wsList[env] = new __1.Db.wsClientClass({\n            context: {\n                appConfig: {\n                    docSizeLimit: 1000,\n                    realtimePingInterval: 10000,\n                    realtimePongWaitTimeout: 5000,\n                    request: new __1.Db.reqClass(db.config)\n                }\n            }\n        });\n    }\n    return wsList[env];\n}\nexports.getWsInstance = getWsInstance;\n","\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar util_1 = require(\"./lib/util\");\nvar constant_1 = require(\"./constant\");\nvar index_1 = require(\"./index\");\nvar validate_1 = require(\"./validate\");\nvar util_2 = require(\"./util\");\nvar query_1 = require(\"./serializer/query\");\nvar update_1 = require(\"./serializer/update\");\nvar constant_2 = require(\"./constant\");\nvar utils_1 = require(\"./utils/utils\");\nvar Query = (function () {\n    function Query(db, coll, fieldFilters, fieldOrders, queryOptions) {\n        var _this = this;\n        this.watch = function (options) {\n            var ws = utils_1.getWsInstance(_this._db);\n            return ws.watch(__assign(__assign({}, options), { envId: _this._db.config.env, collectionName: _this._coll, query: JSON.stringify(_this._fieldFilters || {}), limit: _this._queryOptions.limit, orderBy: _this._fieldOrders\n                    ? _this._fieldOrders.reduce(function (acc, cur) {\n                        acc[cur.field] = cur.direction;\n                        return acc;\n                    }, {})\n                    : undefined }));\n        };\n        this._db = db;\n        this._coll = coll;\n        this._fieldFilters = fieldFilters;\n        this._fieldOrders = fieldOrders || [];\n        this._queryOptions = queryOptions || {};\n        this._request = new index_1.Db.reqClass(this._db.config);\n    }\n    Query.prototype.get = function (callback) {\n        callback = callback || util_1.createPromiseCallback();\n        var newOder = [];\n        if (this._fieldOrders) {\n            this._fieldOrders.forEach(function (order) {\n                newOder.push(order);\n            });\n        }\n        var param = {\n            collectionName: this._coll,\n            queryType: constant_1.QueryType.WHERE\n        };\n        if (this._fieldFilters) {\n            param.query = this._fieldFilters;\n        }\n        if (newOder.length > 0) {\n            param.order = newOder;\n        }\n        if (this._queryOptions.offset) {\n            param.offset = this._queryOptions.offset;\n        }\n        if (this._queryOptions.limit) {\n            param.limit = this._queryOptions.limit < 1000 ? this._queryOptions.limit : 1000;\n        }\n        else {\n            param.limit = 100;\n        }\n        if (this._queryOptions.projection) {\n            param.projection = this._queryOptions.projection;\n        }\n        this._request\n            .send('database.queryDocument', param)\n            .then(function (res) {\n            if (res.code) {\n                callback(0, res);\n            }\n            else {\n                var documents = util_2.Util.formatResDocumentData(res.data.list);\n                var result = {\n                    data: documents,\n                    requestId: res.requestId\n                };\n                if (res.TotalCount)\n                    result.total = res.TotalCount;\n                if (res.Limit)\n                    result.limit = res.Limit;\n                if (res.Offset)\n                    result.offset = res.Offset;\n                callback(0, result);\n            }\n        })\n            .catch(function (err) {\n            callback(err);\n        });\n        return callback.promise;\n    };\n    Query.prototype.count = function (callback) {\n        callback = callback || util_1.createPromiseCallback();\n        var param = {\n            collectionName: this._coll,\n            queryType: constant_1.QueryType.WHERE\n        };\n        if (this._fieldFilters) {\n            param.query = this._fieldFilters;\n        }\n        this._request\n            .send('database.countDocument', param)\n            .then(function (res) {\n            if (res.code) {\n                callback(0, res);\n            }\n            else {\n                callback(0, {\n                    requestId: res.requestId,\n                    total: res.data.total\n                });\n            }\n        })\n            .catch(function (e) {\n            callback(e);\n        });\n        return callback.promise;\n    };\n    Query.prototype.where = function (query) {\n        if (Object.prototype.toString.call(query).slice(8, -1) !== 'Object') {\n            throw Error(constant_2.ErrorCode.QueryParamTypeError);\n        }\n        var keys = Object.keys(query);\n        var checkFlag = keys.some(function (item) {\n            return query[item] !== undefined;\n        });\n        if (keys.length && !checkFlag) {\n            throw Error(constant_2.ErrorCode.QueryParamValueError);\n        }\n        return new Query(this._db, this._coll, query_1.QuerySerializer.encode(query), this._fieldOrders, this._queryOptions);\n    };\n    Query.prototype.orderBy = function (fieldPath, directionStr) {\n        validate_1.Validate.isFieldPath(fieldPath);\n        validate_1.Validate.isFieldOrder(directionStr);\n        var newOrder = {\n            field: fieldPath,\n            direction: directionStr\n        };\n        var combinedOrders = this._fieldOrders.concat(newOrder);\n        return new Query(this._db, this._coll, this._fieldFilters, combinedOrders, this._queryOptions);\n    };\n    Query.prototype.limit = function (limit) {\n        validate_1.Validate.isInteger('limit', limit);\n        var option = __assign({}, this._queryOptions);\n        option.limit = limit;\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\n    };\n    Query.prototype.skip = function (offset) {\n        validate_1.Validate.isInteger('offset', offset);\n        var option = __assign({}, this._queryOptions);\n        option.offset = offset;\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\n    };\n    Query.prototype.update = function (data, callback) {\n        callback = callback || util_1.createPromiseCallback();\n        if (!data || typeof data !== 'object') {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '参数必需是非空对象'\n            });\n        }\n        if (data.hasOwnProperty('_id')) {\n            return Promise.resolve({\n                code: 'INVALID_PARAM',\n                message: '不能更新_id的值'\n            });\n        }\n        var param = {\n            collectionName: this._coll,\n            query: this._fieldFilters,\n            queryType: constant_1.QueryType.WHERE,\n            multi: true,\n            merge: true,\n            upsert: false,\n            data: update_1.UpdateSerializer.encode(data)\n        };\n        this._request\n            .send('database.updateDocument', param)\n            .then(function (res) {\n            if (res.code) {\n                callback(0, res);\n            }\n            else {\n                callback(0, {\n                    requestId: res.requestId,\n                    updated: res.data.updated,\n                    upsertId: res.data.upsert_id\n                });\n            }\n        })\n            .catch(function (e) {\n            callback(e);\n        });\n        return callback.promise;\n    };\n    Query.prototype.field = function (projection) {\n        for (var k in projection) {\n            if (projection[k]) {\n                if (typeof projection[k] !== 'object') {\n                    projection[k] = 1;\n                }\n            }\n            else {\n                projection[k] = 0;\n            }\n        }\n        var option = __assign({}, this._queryOptions);\n        option.projection = projection;\n        return new Query(this._db, this._coll, this._fieldFilters, this._fieldOrders, option);\n    };\n    Query.prototype.remove = function (callback) {\n        callback = callback || util_1.createPromiseCallback();\n        if (Object.keys(this._queryOptions).length > 0) {\n            console.warn('`offset`, `limit` and `projection` are not supported in remove() operation');\n        }\n        if (this._fieldOrders.length > 0) {\n            console.warn('`orderBy` is not supported in remove() operation');\n        }\n        var param = {\n            collectionName: this._coll,\n            query: query_1.QuerySerializer.encode(this._fieldFilters),\n            queryType: constant_1.QueryType.WHERE,\n            multi: true\n        };\n        this._request\n            .send('database.deleteDocument', param)\n            .then(function (res) {\n            if (res.code) {\n                callback(0, res);\n            }\n            else {\n                callback(0, {\n                    requestId: res.requestId,\n                    deleted: res.data.deleted\n                });\n            }\n        })\n            .catch(function (e) {\n            callback(e);\n        });\n        return callback.promise;\n    };\n    return Query;\n}());\nexports.Query = Query;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar query_1 = require(\"../commands/query\");\nvar logic_1 = require(\"../commands/logic\");\nvar symbol_1 = require(\"../helper/symbol\");\nvar type_1 = require(\"../utils/type\");\nvar operator_map_1 = require(\"../operator-map\");\nvar common_1 = require(\"./common\");\nvar QuerySerializer = (function () {\n    function QuerySerializer() {\n    }\n    QuerySerializer.encode = function (query) {\n        var encoder = new QueryEncoder();\n        return encoder.encodeQuery(query);\n    };\n    return QuerySerializer;\n}());\nexports.QuerySerializer = QuerySerializer;\nvar QueryEncoder = (function () {\n    function QueryEncoder() {\n    }\n    QueryEncoder.prototype.encodeQuery = function (query, key) {\n        var _a;\n        if (common_1.isConversionRequired(query)) {\n            if (logic_1.isLogicCommand(query)) {\n                return this.encodeLogicCommand(query);\n            }\n            else if (query_1.isQueryCommand(query)) {\n                return this.encodeQueryCommand(query);\n            }\n            else {\n                return _a = {}, _a[key] = this.encodeQueryObject(query), _a;\n            }\n        }\n        else {\n            if (type_1.isObject(query)) {\n                return this.encodeQueryObject(query);\n            }\n            else {\n                return query;\n            }\n        }\n    };\n    QueryEncoder.prototype.encodeRegExp = function (query) {\n        return {\n            $regex: query.source,\n            $options: query.flags\n        };\n    };\n    QueryEncoder.prototype.encodeLogicCommand = function (query) {\n        var _a, _b, _c, _d, _e, _f, _g;\n        var _this = this;\n        switch (query.operator) {\n            case logic_1.LOGIC_COMMANDS_LITERAL.NOR:\n            case logic_1.LOGIC_COMMANDS_LITERAL.AND:\n            case logic_1.LOGIC_COMMANDS_LITERAL.OR: {\n                var $op = operator_map_1.operatorToString(query.operator);\n                var subqueries = query.operands.map(function (oprand) {\n                    return _this.encodeQuery(oprand, query.fieldName);\n                });\n                return _a = {},\n                    _a[$op] = subqueries,\n                    _a;\n            }\n            case logic_1.LOGIC_COMMANDS_LITERAL.NOT: {\n                var $op = operator_map_1.operatorToString(query.operator);\n                var operatorExpression = query.operands[0];\n                if (type_1.isRegExp(operatorExpression)) {\n                    return _b = {},\n                        _b[query.fieldName] = (_c = {},\n                            _c[$op] = this.encodeRegExp(operatorExpression),\n                            _c),\n                        _b;\n                }\n                else {\n                    var subqueries = this.encodeQuery(operatorExpression)[query.fieldName];\n                    return _d = {},\n                        _d[query.fieldName] = (_e = {},\n                            _e[$op] = subqueries,\n                            _e),\n                        _d;\n                }\n            }\n            default: {\n                var $op = operator_map_1.operatorToString(query.operator);\n                if (query.operands.length === 1) {\n                    var subquery = this.encodeQuery(query.operands[0]);\n                    return _f = {},\n                        _f[$op] = subquery,\n                        _f;\n                }\n                else {\n                    var subqueries = query.operands.map(this.encodeQuery.bind(this));\n                    return _g = {},\n                        _g[$op] = subqueries,\n                        _g;\n                }\n            }\n        }\n    };\n    QueryEncoder.prototype.encodeQueryCommand = function (query) {\n        if (query_1.isComparisonCommand(query)) {\n            return this.encodeComparisonCommand(query);\n        }\n        else {\n            return this.encodeComparisonCommand(query);\n        }\n    };\n    QueryEncoder.prototype.encodeComparisonCommand = function (query) {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n        if (query.fieldName === symbol_1.SYMBOL_UNSET_FIELD_NAME) {\n            throw new Error('Cannot encode a comparison command with unset field name');\n        }\n        var $op = operator_map_1.operatorToString(query.operator);\n        switch (query.operator) {\n            case query_1.QUERY_COMMANDS_LITERAL.EQ:\n            case query_1.QUERY_COMMANDS_LITERAL.NEQ:\n            case query_1.QUERY_COMMANDS_LITERAL.LT:\n            case query_1.QUERY_COMMANDS_LITERAL.LTE:\n            case query_1.QUERY_COMMANDS_LITERAL.GT:\n            case query_1.QUERY_COMMANDS_LITERAL.GTE:\n            case query_1.QUERY_COMMANDS_LITERAL.ELEM_MATCH:\n            case query_1.QUERY_COMMANDS_LITERAL.EXISTS:\n            case query_1.QUERY_COMMANDS_LITERAL.SIZE:\n            case query_1.QUERY_COMMANDS_LITERAL.MOD: {\n                return _a = {},\n                    _a[query.fieldName] = (_b = {},\n                        _b[$op] = common_1.encodeInternalDataType(query.operands[0]),\n                        _b),\n                    _a;\n            }\n            case query_1.QUERY_COMMANDS_LITERAL.IN:\n            case query_1.QUERY_COMMANDS_LITERAL.NIN:\n            case query_1.QUERY_COMMANDS_LITERAL.ALL: {\n                return _c = {},\n                    _c[query.fieldName] = (_d = {},\n                        _d[$op] = common_1.encodeInternalDataType(query.operands),\n                        _d),\n                    _c;\n            }\n            case query_1.QUERY_COMMANDS_LITERAL.GEO_NEAR: {\n                var options = query.operands[0];\n                return _e = {},\n                    _e[query.fieldName] = {\n                        $nearSphere: {\n                            $geometry: options.geometry.toJSON(),\n                            $maxDistance: options.maxDistance,\n                            $minDistance: options.minDistance\n                        }\n                    },\n                    _e;\n            }\n            case query_1.QUERY_COMMANDS_LITERAL.GEO_WITHIN: {\n                var options = query.operands[0];\n                return _f = {},\n                    _f[query.fieldName] = {\n                        $geoWithin: {\n                            $geometry: options.geometry.toJSON()\n                        }\n                    },\n                    _f;\n            }\n            case query_1.QUERY_COMMANDS_LITERAL.GEO_INTERSECTS: {\n                var options = query.operands[0];\n                return _g = {},\n                    _g[query.fieldName] = {\n                        $geoIntersects: {\n                            $geometry: options.geometry.toJSON()\n                        }\n                    },\n                    _g;\n            }\n            default: {\n                return _h = {},\n                    _h[query.fieldName] = (_j = {},\n                        _j[$op] = common_1.encodeInternalDataType(query.operands[0]),\n                        _j),\n                    _h;\n            }\n        }\n    };\n    QueryEncoder.prototype.encodeQueryObject = function (query) {\n        var flattened = common_1.flattenQueryObject(query);\n        for (var key in flattened) {\n            var val = flattened[key];\n            if (logic_1.isLogicCommand(val)) {\n                flattened[key] = val._setFieldName(key);\n                var condition = this.encodeLogicCommand(flattened[key]);\n                this.mergeConditionAfterEncode(flattened, condition, key);\n            }\n            else if (query_1.isComparisonCommand(val)) {\n                flattened[key] = val._setFieldName(key);\n                var condition = this.encodeComparisonCommand(flattened[key]);\n                this.mergeConditionAfterEncode(flattened, condition, key);\n            }\n            else if (common_1.isConversionRequired(val)) {\n                flattened[key] = common_1.encodeInternalDataType(val);\n            }\n        }\n        return flattened;\n    };\n    QueryEncoder.prototype.mergeConditionAfterEncode = function (query, condition, key) {\n        if (!condition[key]) {\n            delete query[key];\n        }\n        for (var conditionKey in condition) {\n            if (query[conditionKey]) {\n                if (type_1.isArray(query[conditionKey])) {\n                    query[conditionKey] = query[conditionKey].concat(condition[conditionKey]);\n                }\n                else if (type_1.isObject(query[conditionKey])) {\n                    if (type_1.isObject(condition[conditionKey])) {\n                        Object.assign(query, condition);\n                    }\n                    else {\n                        console.warn(\"unmergable condition, query is object but condition is \" + type_1.getType(condition) + \", can only overwrite\", condition, key);\n                        query[conditionKey] = condition[conditionKey];\n                    }\n                }\n                else {\n                    console.warn(\"to-merge query is of type \" + type_1.getType(query) + \", can only overwrite\", query, condition, key);\n                    query[conditionKey] = condition[conditionKey];\n                }\n            }\n            else {\n                query[conditionKey] = condition[conditionKey];\n            }\n        }\n    };\n    return QueryEncoder;\n}());\n","\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"./index\");\nvar bson_1 = require(\"bson\");\nvar query_1 = require(\"./serializer/query\");\nvar Aggregation = (function () {\n    function Aggregation(db, collectionName) {\n        this._stages = [];\n        if (db && collectionName) {\n            this._db = db;\n            this._request = new index_1.Db.reqClass(this._db.config);\n            this._collectionName = collectionName;\n        }\n    }\n    Aggregation.prototype.end = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var result;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this._collectionName || !this._db) {\n                            throw new Error('Aggregation pipeline cannot send request');\n                        }\n                        return [4, this._request.send('database.aggregate', {\n                                collectionName: this._collectionName,\n                                stages: this._stages\n                            })];\n                    case 1:\n                        result = _a.sent();\n                        if (result && result.data && result.data.list) {\n                            return [2, {\n                                    requestId: result.requestId,\n                                    data: JSON.parse(result.data.list).map(bson_1.EJSON.parse)\n                                }];\n                        }\n                        return [2, result];\n                }\n            });\n        });\n    };\n    Aggregation.prototype.unwrap = function () {\n        return this._stages;\n    };\n    Aggregation.prototype.done = function () {\n        return this._stages.map(function (_a) {\n            var _b;\n            var stageKey = _a.stageKey, stageValue = _a.stageValue;\n            return _b = {},\n                _b[stageKey] = JSON.parse(stageValue),\n                _b;\n        });\n    };\n    Aggregation.prototype._pipe = function (stage, param) {\n        this._stages.push({\n            stageKey: \"$\" + stage,\n            stageValue: JSON.stringify(param)\n        });\n        return this;\n    };\n    Aggregation.prototype.addFields = function (param) {\n        return this._pipe('addFields', param);\n    };\n    Aggregation.prototype.bucket = function (param) {\n        return this._pipe('bucket', param);\n    };\n    Aggregation.prototype.bucketAuto = function (param) {\n        return this._pipe('bucketAuto', param);\n    };\n    Aggregation.prototype.count = function (param) {\n        return this._pipe('count', param);\n    };\n    Aggregation.prototype.geoNear = function (param) {\n        return this._pipe('geoNear', param);\n    };\n    Aggregation.prototype.group = function (param) {\n        return this._pipe('group', param);\n    };\n    Aggregation.prototype.limit = function (param) {\n        return this._pipe('limit', param);\n    };\n    Aggregation.prototype.match = function (param) {\n        return this._pipe('match', query_1.QuerySerializer.encode(param));\n    };\n    Aggregation.prototype.project = function (param) {\n        return this._pipe('project', param);\n    };\n    Aggregation.prototype.lookup = function (param) {\n        return this._pipe('lookup', param);\n    };\n    Aggregation.prototype.replaceRoot = function (param) {\n        return this._pipe('replaceRoot', param);\n    };\n    Aggregation.prototype.sample = function (param) {\n        return this._pipe('sample', param);\n    };\n    Aggregation.prototype.skip = function (param) {\n        return this._pipe('skip', param);\n    };\n    Aggregation.prototype.sort = function (param) {\n        return this._pipe('sort', param);\n    };\n    Aggregation.prototype.sortByCount = function (param) {\n        return this._pipe('sortByCount', param);\n    };\n    Aggregation.prototype.unwind = function (param) {\n        return this._pipe('unwind', param);\n    };\n    return Aggregation;\n}());\nexports.default = Aggregation;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar query_1 = require(\"./commands/query\");\nvar logic_1 = require(\"./commands/logic\");\nvar update_1 = require(\"./commands/update\");\nvar type_1 = require(\"./utils/type\");\nvar aggregate_1 = require(\"./aggregate\");\nexports.Command = {\n    eq: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.EQ, [val]);\n    },\n    neq: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.NEQ, [val]);\n    },\n    lt: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.LT, [val]);\n    },\n    lte: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.LTE, [val]);\n    },\n    gt: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.GT, [val]);\n    },\n    gte: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.GTE, [val]);\n    },\n    in: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.IN, val);\n    },\n    nin: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.NIN, val);\n    },\n    all: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.ALL, val);\n    },\n    elemMatch: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.ELEM_MATCH, [val]);\n    },\n    exists: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.EXISTS, [val]);\n    },\n    size: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.SIZE, [val]);\n    },\n    mod: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.MOD, [val]);\n    },\n    geoNear: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.GEO_NEAR, [val]);\n    },\n    geoWithin: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.GEO_WITHIN, [val]);\n    },\n    geoIntersects: function (val) {\n        return new query_1.QueryCommand(query_1.QUERY_COMMANDS_LITERAL.GEO_INTERSECTS, [val]);\n    },\n    and: function () {\n        var __expressions__ = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            __expressions__[_i] = arguments[_i];\n        }\n        var expressions = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        return new logic_1.LogicCommand(logic_1.LOGIC_COMMANDS_LITERAL.AND, expressions);\n    },\n    nor: function () {\n        var __expressions__ = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            __expressions__[_i] = arguments[_i];\n        }\n        var expressions = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        return new logic_1.LogicCommand(logic_1.LOGIC_COMMANDS_LITERAL.NOR, expressions);\n    },\n    or: function () {\n        var __expressions__ = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            __expressions__[_i] = arguments[_i];\n        }\n        var expressions = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        return new logic_1.LogicCommand(logic_1.LOGIC_COMMANDS_LITERAL.OR, expressions);\n    },\n    not: function () {\n        var __expressions__ = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            __expressions__[_i] = arguments[_i];\n        }\n        var expressions = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        return new logic_1.LogicCommand(logic_1.LOGIC_COMMANDS_LITERAL.NOT, expressions);\n    },\n    set: function (val) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.SET, [val]);\n    },\n    remove: function () {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.REMOVE, []);\n    },\n    inc: function (val) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.INC, [val]);\n    },\n    mul: function (val) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.MUL, [val]);\n    },\n    push: function () {\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        var values;\n        if (type_1.isObject(args[0]) && args[0].hasOwnProperty('each')) {\n            var options = args[0];\n            values = {\n                $each: options.each,\n                $position: options.position,\n                $sort: options.sort,\n                $slice: options.slice\n            };\n        }\n        else if (type_1.isArray(args[0])) {\n            values = args[0];\n        }\n        else {\n            values = Array.from(args);\n        }\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.PUSH, values);\n    },\n    pull: function (values) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.PULL, values);\n    },\n    pullAll: function (values) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.PULL_ALL, values);\n    },\n    pop: function () {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.POP, []);\n    },\n    shift: function () {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.SHIFT, []);\n    },\n    unshift: function () {\n        var __values__ = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            __values__[_i] = arguments[_i];\n        }\n        var values = type_1.isArray(arguments[0]) ? arguments[0] : Array.from(arguments);\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.UNSHIFT, values);\n    },\n    addToSet: function (values) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.ADD_TO_SET, values);\n    },\n    rename: function (values) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.RENAME, [values]);\n    },\n    bit: function (values) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.BIT, [values]);\n    },\n    max: function (values) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.MAX, [values]);\n    },\n    min: function (values) {\n        return new update_1.UpdateCommand(update_1.UPDATE_COMMANDS_LITERAL.MIN, [values]);\n    },\n    expr: function (values) {\n        return {\n            $expr: values\n        };\n    },\n    jsonSchema: function (schema) {\n        return {\n            $jsonSchema: schema\n        };\n    },\n    text: function (values) {\n        if (type_1.isString(values)) {\n            return {\n                $search: values.search\n            };\n        }\n        else {\n            return {\n                $search: values.search,\n                $language: values.language,\n                $caseSensitive: values.caseSensitive,\n                $diacriticSensitive: values.diacriticSensitive\n            };\n        }\n    },\n    aggregate: {\n        pipeline: function () {\n            return new aggregate_1.default();\n        },\n        abs: function (param) { return new AggregationOperator('abs', param); },\n        add: function (param) { return new AggregationOperator('add', param); },\n        ceil: function (param) { return new AggregationOperator('ceil', param); },\n        divide: function (param) { return new AggregationOperator('divide', param); },\n        exp: function (param) { return new AggregationOperator('exp', param); },\n        floor: function (param) { return new AggregationOperator('floor', param); },\n        ln: function (param) { return new AggregationOperator('ln', param); },\n        log: function (param) { return new AggregationOperator('log', param); },\n        log10: function (param) { return new AggregationOperator('log10', param); },\n        mod: function (param) { return new AggregationOperator('mod', param); },\n        multiply: function (param) { return new AggregationOperator('multiply', param); },\n        pow: function (param) { return new AggregationOperator('pow', param); },\n        sqrt: function (param) { return new AggregationOperator('sqrt', param); },\n        subtract: function (param) { return new AggregationOperator('subtract', param); },\n        trunc: function (param) { return new AggregationOperator('trunc', param); },\n        arrayElemAt: function (param) { return new AggregationOperator('arrayElemAt', param); },\n        arrayToObject: function (param) { return new AggregationOperator('arrayToObject', param); },\n        concatArrays: function (param) { return new AggregationOperator('concatArrays', param); },\n        filter: function (param) { return new AggregationOperator('filter', param); },\n        in: function (param) { return new AggregationOperator('in', param); },\n        indexOfArray: function (param) { return new AggregationOperator('indexOfArray', param); },\n        isArray: function (param) { return new AggregationOperator('isArray', param); },\n        map: function (param) { return new AggregationOperator('map', param); },\n        range: function (param) { return new AggregationOperator('range', param); },\n        reduce: function (param) { return new AggregationOperator('reduce', param); },\n        reverseArray: function (param) { return new AggregationOperator('reverseArray', param); },\n        size: function (param) { return new AggregationOperator('size', param); },\n        slice: function (param) { return new AggregationOperator('slice', param); },\n        zip: function (param) { return new AggregationOperator('zip', param); },\n        and: function (param) { return new AggregationOperator('and', param); },\n        not: function (param) { return new AggregationOperator('not', param); },\n        or: function (param) { return new AggregationOperator('or', param); },\n        cmp: function (param) { return new AggregationOperator('cmp', param); },\n        eq: function (param) { return new AggregationOperator('eq', param); },\n        gt: function (param) { return new AggregationOperator('gt', param); },\n        gte: function (param) { return new AggregationOperator('gte', param); },\n        lt: function (param) { return new AggregationOperator('lt', param); },\n        lte: function (param) { return new AggregationOperator('lte', param); },\n        neq: function (param) { return new AggregationOperator('ne', param); },\n        cond: function (param) { return new AggregationOperator('cond', param); },\n        ifNull: function (param) { return new AggregationOperator('ifNull', param); },\n        switch: function (param) { return new AggregationOperator('switch', param); },\n        dateFromParts: function (param) { return new AggregationOperator('dateFromParts', param); },\n        dateFromString: function (param) { return new AggregationOperator('dateFromString', param); },\n        dayOfMonth: function (param) { return new AggregationOperator('dayOfMonth', param); },\n        dayOfWeek: function (param) { return new AggregationOperator('dayOfWeek', param); },\n        dayOfYear: function (param) { return new AggregationOperator('dayOfYear', param); },\n        isoDayOfWeek: function (param) { return new AggregationOperator('isoDayOfWeek', param); },\n        isoWeek: function (param) { return new AggregationOperator('isoWeek', param); },\n        isoWeekYear: function (param) { return new AggregationOperator('isoWeekYear', param); },\n        millisecond: function (param) { return new AggregationOperator('millisecond', param); },\n        minute: function (param) { return new AggregationOperator('minute', param); },\n        month: function (param) { return new AggregationOperator('month', param); },\n        second: function (param) { return new AggregationOperator('second', param); },\n        hour: function (param) { return new AggregationOperator('hour', param); },\n        week: function (param) { return new AggregationOperator('week', param); },\n        year: function (param) { return new AggregationOperator('year', param); },\n        literal: function (param) { return new AggregationOperator('literal', param); },\n        mergeObjects: function (param) { return new AggregationOperator('mergeObjects', param); },\n        objectToArray: function (param) { return new AggregationOperator('objectToArray', param); },\n        allElementsTrue: function (param) { return new AggregationOperator('allElementsTrue', param); },\n        anyElementTrue: function (param) { return new AggregationOperator('anyElementTrue', param); },\n        setDifference: function (param) { return new AggregationOperator('setDifference', param); },\n        setEquals: function (param) { return new AggregationOperator('setEquals', param); },\n        setIntersection: function (param) { return new AggregationOperator('setIntersection', param); },\n        setIsSubset: function (param) { return new AggregationOperator('setIsSubset', param); },\n        setUnion: function (param) { return new AggregationOperator('setUnion', param); },\n        concat: function (param) { return new AggregationOperator('concat', param); },\n        dateToString: function (param) { return new AggregationOperator('dateToString', param); },\n        indexOfBytes: function (param) { return new AggregationOperator('indexOfBytes', param); },\n        indexOfCP: function (param) { return new AggregationOperator('indexOfCP', param); },\n        split: function (param) { return new AggregationOperator('split', param); },\n        strLenBytes: function (param) { return new AggregationOperator('strLenBytes', param); },\n        strLenCP: function (param) { return new AggregationOperator('strLenCP', param); },\n        strcasecmp: function (param) { return new AggregationOperator('strcasecmp', param); },\n        substr: function (param) { return new AggregationOperator('substr', param); },\n        substrBytes: function (param) { return new AggregationOperator('substrBytes', param); },\n        substrCP: function (param) { return new AggregationOperator('substrCP', param); },\n        toLower: function (param) { return new AggregationOperator('toLower', param); },\n        toUpper: function (param) { return new AggregationOperator('toUpper', param); },\n        meta: function (param) { return new AggregationOperator('meta', param); },\n        addToSet: function (param) { return new AggregationOperator('addToSet', param); },\n        avg: function (param) { return new AggregationOperator('avg', param); },\n        first: function (param) { return new AggregationOperator('first', param); },\n        last: function (param) { return new AggregationOperator('last', param); },\n        max: function (param) { return new AggregationOperator('max', param); },\n        min: function (param) { return new AggregationOperator('min', param); },\n        push: function (param) { return new AggregationOperator('push', param); },\n        stdDevPop: function (param) { return new AggregationOperator('stdDevPop', param); },\n        stdDevSamp: function (param) { return new AggregationOperator('stdDevSamp', param); },\n        sum: function (param) { return new AggregationOperator('sum', param); },\n        let: function (param) { return new AggregationOperator('let', param); }\n    },\n    project: {\n        slice: function (param) { return new ProjectionOperator('slice', param); },\n        elemMatch: function (param) { return new ProjectionOperator('elemMatch', param); }\n    }\n};\nvar AggregationOperator = (function () {\n    function AggregationOperator(name, param) {\n        this['$' + name] = param;\n    }\n    return AggregationOperator;\n}());\nvar ProjectionOperator = (function () {\n    function ProjectionOperator(name, param) {\n        this['$' + name] = param;\n    }\n    return ProjectionOperator;\n}());\nexports.default = exports.Command;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar symbol_1 = require(\"../helper/symbol\");\nvar RegExp = (function () {\n    function RegExp(_a) {\n        var regexp = _a.regexp, options = _a.options;\n        if (!regexp) {\n            throw new TypeError('regexp must be a string');\n        }\n        this.$regex = regexp;\n        this.$options = options;\n    }\n    RegExp.prototype.parse = function () {\n        return {\n            $regex: this.$regex,\n            $options: this.$options\n        };\n    };\n    Object.defineProperty(RegExp.prototype, \"_internalType\", {\n        get: function () {\n            return symbol_1.SYMBOL_REGEXP;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    return RegExp;\n}());\nexports.RegExp = RegExp;\nfunction RegExpConstructor(param) {\n    return new RegExp(param);\n}\nexports.RegExpConstructor = RegExpConstructor;\n","\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar index_1 = require(\"../index\");\nvar collection_1 = require(\"./collection\");\nvar code_1 = require(\"../const/code\");\nvar START = 'database.startTransaction';\nvar COMMIT = 'database.commitTransaction';\nvar ABORT = 'database.abortTransaction';\nvar Transaction = (function () {\n    function Transaction(db) {\n        this._db = db;\n        this._request = new index_1.Db.reqClass(this._db.config);\n        this.aborted = false;\n        this.commited = false;\n        this.inited = false;\n    }\n    Transaction.prototype.init = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0: return [4, this._request.send(START)];\n                    case 1:\n                        res = _a.sent();\n                        if (res.code) {\n                            throw res;\n                        }\n                        this.inited = true;\n                        this._id = res.transactionId;\n                        return [2];\n                }\n            });\n        });\n    };\n    Transaction.prototype.collection = function (collName) {\n        if (!collName) {\n            throw new Error('Collection name is required');\n        }\n        return new collection_1.CollectionReference(this, collName);\n    };\n    Transaction.prototype.getTransactionId = function () {\n        return this._id;\n    };\n    Transaction.prototype.getRequestMethod = function () {\n        return this._request;\n    };\n    Transaction.prototype.commit = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var param, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        param = {\n                            transactionId: this._id\n                        };\n                        return [4, this._request.send(COMMIT, param)];\n                    case 1:\n                        res = _a.sent();\n                        if (res.code)\n                            throw res;\n                        this.commited = true;\n                        return [2, res];\n                }\n            });\n        });\n    };\n    Transaction.prototype.rollback = function (customRollbackRes) {\n        return __awaiter(this, void 0, void 0, function () {\n            var param, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        param = {\n                            transactionId: this._id\n                        };\n                        return [4, this._request.send(ABORT, param)];\n                    case 1:\n                        res = _a.sent();\n                        if (res.code)\n                            throw res;\n                        this.aborted = true;\n                        this.abortReason = customRollbackRes;\n                        return [2, res];\n                }\n            });\n        });\n    };\n    return Transaction;\n}());\nexports.Transaction = Transaction;\nfunction startTransaction() {\n    return __awaiter(this, void 0, void 0, function () {\n        var transaction;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    transaction = new Transaction(this);\n                    return [4, transaction.init()];\n                case 1:\n                    _a.sent();\n                    return [2, transaction];\n            }\n        });\n    });\n}\nexports.startTransaction = startTransaction;\nfunction runTransaction(callback, times) {\n    if (times === void 0) { times = 3; }\n    return __awaiter(this, void 0, void 0, function () {\n        var transaction, callbackRes, error_1, throwWithRollback;\n        var _this = this;\n        return __generator(this, function (_a) {\n            switch (_a.label) {\n                case 0:\n                    _a.trys.push([0, 4, , 10]);\n                    transaction = new Transaction(this);\n                    return [4, transaction.init()];\n                case 1:\n                    _a.sent();\n                    return [4, callback(transaction)];\n                case 2:\n                    callbackRes = _a.sent();\n                    if (transaction.aborted === true) {\n                        throw transaction.abortReason;\n                    }\n                    return [4, transaction.commit()];\n                case 3:\n                    _a.sent();\n                    return [2, callbackRes];\n                case 4:\n                    error_1 = _a.sent();\n                    if (transaction.inited === false) {\n                        throw error_1;\n                    }\n                    throwWithRollback = function (error) { return __awaiter(_this, void 0, void 0, function () {\n                        var err_1;\n                        return __generator(this, function (_a) {\n                            switch (_a.label) {\n                                case 0:\n                                    if (!(!transaction.aborted && !transaction.commited)) return [3, 5];\n                                    _a.label = 1;\n                                case 1:\n                                    _a.trys.push([1, 3, , 4]);\n                                    return [4, transaction.rollback()];\n                                case 2:\n                                    _a.sent();\n                                    return [3, 4];\n                                case 3:\n                                    err_1 = _a.sent();\n                                    return [3, 4];\n                                case 4: throw error;\n                                case 5:\n                                    if (transaction.aborted === true) {\n                                        throw transaction.abortReason;\n                                    }\n                                    throw error;\n                            }\n                        });\n                    }); };\n                    if (!(times <= 0)) return [3, 6];\n                    return [4, throwWithRollback(error_1)];\n                case 5:\n                    _a.sent();\n                    _a.label = 6;\n                case 6:\n                    if (!(error_1 && error_1.code === code_1.ERRORS.DATABASE_TRANSACTION_CONFLICT.code)) return [3, 8];\n                    return [4, runTransaction.bind(this)(callback, --times)];\n                case 7: return [2, _a.sent()];\n                case 8: return [4, throwWithRollback(error_1)];\n                case 9:\n                    _a.sent();\n                    return [3, 10];\n                case 10: return [2];\n            }\n        });\n    });\n}\nexports.runTransaction = runTransaction;\n","\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar document_1 = require(\"./document\");\nvar query_1 = require(\"./query\");\nvar CollectionReference = (function (_super) {\n    __extends(CollectionReference, _super);\n    function CollectionReference(transaction, coll) {\n        return _super.call(this, transaction, coll) || this;\n    }\n    Object.defineProperty(CollectionReference.prototype, \"name\", {\n        get: function () {\n            return this._coll;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    CollectionReference.prototype.doc = function (docID) {\n        if (typeof docID !== 'string' && typeof docID !== 'number') {\n            throw new Error('docId必须为字符串或数字');\n        }\n        return new document_1.DocumentReference(this._transaction, this._coll, docID);\n    };\n    CollectionReference.prototype.add = function (data) {\n        var docID;\n        if (data._id !== undefined) {\n            docID = data._id;\n        }\n        var docRef = new document_1.DocumentReference(this._transaction, this._coll, docID);\n        return docRef.create(data);\n    };\n    return CollectionReference;\n}(query_1.Query));\nexports.CollectionReference = CollectionReference;\n","\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar bson_1 = require(\"bson\");\nvar code_1 = require(\"../const/code\");\nvar update_1 = require(\"../serializer/update\");\nvar datatype_1 = require(\"../serializer/datatype\");\nvar util_1 = require(\"../util\");\nvar GET_DOC = 'database.getInTransaction';\nvar UPDATE_DOC = 'database.updateDocInTransaction';\nvar DELETE_DOC = 'database.deleteDocInTransaction';\nvar INSERT_DOC = 'database.insertDocInTransaction';\nvar DocumentReference = (function () {\n    function DocumentReference(transaction, coll, docID) {\n        this._coll = coll;\n        this.id = docID;\n        this._transaction = transaction;\n        this._request = this._transaction.getRequestMethod();\n        this._transactionId = this._transaction.getTransactionId();\n    }\n    DocumentReference.prototype.create = function (data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var params, res, inserted, ok;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        params = {\n                            collectionName: this._coll,\n                            transactionId: this._transactionId,\n                            data: bson_1.EJSON.stringify(datatype_1.serialize(data), { relaxed: false })\n                        };\n                        if (this.id) {\n                            params['_id'] = this.id;\n                        }\n                        return [4, this._request.send(INSERT_DOC, params)];\n                    case 1:\n                        res = _a.sent();\n                        if (res.code) {\n                            throw res;\n                        }\n                        inserted = bson_1.EJSON.parse(res.inserted);\n                        ok = bson_1.EJSON.parse(res.ok);\n                        if (ok == 1 && inserted == 1) {\n                            return [2, __assign(__assign({}, res), { ok: ok,\n                                    inserted: inserted })];\n                        }\n                        else {\n                            throw new Error(code_1.ERRORS.INSERT_DOC_FAIL.message);\n                        }\n                        return [2];\n                }\n            });\n        });\n    };\n    DocumentReference.prototype.get = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var param, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        param = {\n                            collectionName: this._coll,\n                            transactionId: this._transactionId,\n                            query: {\n                                _id: { $eq: this.id }\n                            }\n                        };\n                        return [4, this._request.send(GET_DOC, param)];\n                    case 1:\n                        res = _a.sent();\n                        if (res.code)\n                            throw res;\n                        return [2, {\n                                data: res.data !== 'null' ? util_1.Util.formatField(bson_1.EJSON.parse(res.data)) : bson_1.EJSON.parse(res.data),\n                                requestId: res.requestId\n                            }];\n                }\n            });\n        });\n    };\n    DocumentReference.prototype.set = function (data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var param, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        param = {\n                            collectionName: this._coll,\n                            transactionId: this._transactionId,\n                            query: {\n                                _id: { $eq: this.id }\n                            },\n                            data: bson_1.EJSON.stringify(datatype_1.serialize(data), { relaxed: false }),\n                            upsert: true\n                        };\n                        return [4, this._request.send(UPDATE_DOC, param)];\n                    case 1:\n                        res = _a.sent();\n                        if (res.code)\n                            throw res;\n                        return [2, __assign(__assign({}, res), { updated: bson_1.EJSON.parse(res.updated), upserted: res.upserted\n                                    ? JSON.parse(res.upserted)\n                                    : null })];\n                }\n            });\n        });\n    };\n    DocumentReference.prototype.update = function (data) {\n        return __awaiter(this, void 0, void 0, function () {\n            var param, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        param = {\n                            collectionName: this._coll,\n                            transactionId: this._transactionId,\n                            query: {\n                                _id: { $eq: this.id }\n                            },\n                            data: bson_1.EJSON.stringify(update_1.UpdateSerializer.encode(data), {\n                                relaxed: false\n                            })\n                        };\n                        return [4, this._request.send(UPDATE_DOC, param)];\n                    case 1:\n                        res = _a.sent();\n                        if (res.code)\n                            throw res;\n                        return [2, __assign(__assign({}, res), { updated: bson_1.EJSON.parse(res.updated) })];\n                }\n            });\n        });\n    };\n    DocumentReference.prototype.delete = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            var param, res;\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        param = {\n                            collectionName: this._coll,\n                            transactionId: this._transactionId,\n                            query: {\n                                _id: { $eq: this.id }\n                            }\n                        };\n                        return [4, this._request.send(DELETE_DOC, param)];\n                    case 1:\n                        res = _a.sent();\n                        if (res.code)\n                            throw res;\n                        return [2, __assign(__assign({}, res), { deleted: bson_1.EJSON.parse(res.deleted) })];\n                }\n            });\n        });\n    };\n    return DocumentReference;\n}());\nexports.DocumentReference = DocumentReference;\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.ERRORS = {\n    CREATE_WATCH_NET_ERROR: {\n        code: 'CREATE_WATCH_NET_ERROR',\n        message: 'create watch network error'\n    },\n    CREATE_WACTH_EXCEED_ERROR: {\n        code: 'CREATE_WACTH_EXCEED_ERROR',\n        message: 'maximum connections exceed'\n    },\n    CREATE_WATCH_SERVER_ERROR: {\n        code: 'CREATE_WATCH_SERVER_ERROR',\n        message: 'create watch server error'\n    },\n    CONN_ERROR: {\n        code: 'CONN_ERROR',\n        message: 'connection error'\n    },\n    INVALID_PARAM: {\n        code: 'INVALID_PARAM',\n        message: 'Invalid request param'\n    },\n    INSERT_DOC_FAIL: {\n        code: 'INSERT_DOC_FAIL',\n        message: 'insert document failed'\n    },\n    DATABASE_TRANSACTION_CONFLICT: {\n        code: 'DATABASE_TRANSACTION_CONFLICT',\n        message: 'database transaction conflict'\n    }\n};\n","\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Query = (function () {\n    function Query(transaction, coll) {\n        this._coll = coll;\n        this._transaction = transaction;\n    }\n    return Query;\n}());\nexports.Query = Query;\n"]}